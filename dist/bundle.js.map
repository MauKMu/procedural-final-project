{"version":3,"sources":["webpack:///webpack/bootstrap 76f8011b1749013eab18","webpack:///./node_modules/gl-matrix/src/gl-matrix.js","webpack:///./src/globals.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./src/Utils.ts","webpack:///./src/geometry/Decoration.ts","webpack:///./src/l-system/Turtle.ts","webpack:///./src/l-system/LSymbol.ts","webpack:///./src/l-system/LRandom.ts","webpack:///./src/rendering/gl/Drawable.ts","webpack:///./src/game/Terrain.ts","webpack:///./src/l-system/LSystem.ts","webpack:///./src/rendering/gl/ShaderProgram.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./src/geometry/Square.ts","webpack:///./node_modules/webgl-obj-loader/dist/webgl-obj-loader.min.js","webpack:///./src/game/Collider.ts","webpack:///./src/rendering/gl/ShaderFlags.ts","webpack:///./src/main.ts","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./node_modules/stats-js/build/stats.min.js","webpack:///./src/geometry/TerrainPlane.ts","webpack:///./src/game/BasicTree.ts","webpack:///./src/l-system/LString.ts","webpack:///./src/game/Snowman.ts","webpack:///./src/game/Ghost.ts","webpack:///./src/game/SquareCollider.ts","webpack:///./src/rendering/gl/OpenGLRenderer.ts","webpack:///./src/rendering/gl/PostProcess.ts","webpack:///./src/shaders/screenspace-vert.glsl","webpack:///./src/shaders/deferred-render-desert.glsl","webpack:///./src/shaders/deferred-render-snow.glsl","webpack:///./src/shaders/deferred-render.glsl","webpack:///./src/shaders/tonemap-frag.glsl","webpack:///./src/shaders/dofBlurX-frag.glsl","webpack:///./src/shaders/dofBlurY-frag.glsl","webpack:///./src/shaders/bloomHigh-frag.glsl","webpack:///./src/shaders/blurX-frag.glsl","webpack:///./src/shaders/blurY-frag.glsl","webpack:///./src/shaders/bloomAdd-frag.glsl","webpack:///./src/shaders/pointilism-frag.glsl","webpack:///./src/shaders/curl-frag.glsl","webpack:///./src/shaders/paint-frag.glsl","webpack:///./src/shaders/vaporwave-frag.glsl","webpack:///./src/shaders/vaporwaveGlitches-frag.glsl","webpack:///./src/Camera.ts","webpack:///./src/game/Player.ts","webpack:///./src/rendering/gl/Texture.ts","webpack:///./node_modules/howler/dist/howler.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/shaders/standard-vert.glsl","webpack:///./src/shaders/standard-frag.glsl"],"names":[],"mappings":"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wB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAClE,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;YAAE,oDAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClE,CAAC;CACF;AAAA,CAAC;AAEF,yDAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnP7B;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5vBA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,OAAO;AAC1B,oBAAoB,iBAAiB;AACrC;AACA,oBAAoB,iBAAiB;AACrC;;AAEA;AACA;AACA,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvwBD;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AA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ChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChbA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjdA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,WAAW,WAAW;AAClC;AACA;AACA;AACA;;AAEA,YAAY,WAAW,YAAY;AACnC;AACA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,aAAa;;AAExC,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,cAAc;AAC7C,iBAAiB,cAAc,eAAe;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oFAAyC,aAAa;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,YAAY;AACrC,aAAa,YAAY,aAAa;;AAEtC;AACA,sBAAsB,yBAAyB;AAC/C,0BAA0B,qBAAqB;AAC/C,0BAA0B,yBAAyB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA,oFAAyC,aAAa;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnqDA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA,sBAAsB;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AAAA;AAAA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;AAAA;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AAAA;AAAA;;AAED;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjnBD;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;A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,oDAAE,CAAC,MAAM,CAAC,CAAC;QACrE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEb,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC,iBAAiB;IACvC,CAAC;CAGF;AAAA;AAAA;AAAA,CAAC;AAEF,yDAAe,OAAO,EAAC;;;;;;;8CClDvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;;AAEA;AACA,yBAAyB,cAAc;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;AACA,uBAAuB,cAAc;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA,sCAAsC,MAAM;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA,uDAAuD;;AAEvD;AACA;AACA;;AAEA;AACA,6EAA6E;AAC7E;AACA,iDAAiD;AACjD,gDAAgD;AAChD,gDAAgD;AAChD,gDAAgD;AAChD,gDAAgD;AAChD,kDAAkD;AAClD,mDAAmD,uCAAuC,uCAAuC;AACjI,mDAAmD,uCAAuC,uCAAuC;AACjI,kDAAkD;AAClD,kDAAkD;AAClD,kDAAkD;AAClD,qDAAqD,wCAAwC;AAC7F;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;AACA,uBAAuB,iCAAiC;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,YAAY;AAC5C,kCAAkC,aAAa;AAC/C,kCAAkC,aAAa;AAC/C,4CAA4C,kBAAkB;AAC9D,4CAA4C,kBAAkB;AAC9D,oCAAoC,cAAc;AAClD,kCAAkC,aAAa;AAC/C,kCAAkC,aAAa;AAC/C,kCAAkC,aAAa;AAC/C,sCAAsC,eAAe;AACrD,kCAAkC,aAAa;AAC/C,kCAAkC,aAAa;AAC/C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,mBAAmB,cAAc;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,mBAAmB,cAAc;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,cAAc;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,cAAc;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,2BAA2B,IAAI,eAAe;AAC1E;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,kDAAkD,EAAE;AACjE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAkB,GAAG;AACrB;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AAAA;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,0CAA0C;AAC7C;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,cAAc;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,MAAM;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,aAAa;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,aAAa;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,eAAe;AACrD,gCAAgC,YAAY;AAC5C,gDAAgD,oBAAoB;;AAEpE;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,YAAY;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,WAAW;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,WAAW;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,cAAc;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,SAAS;AACvB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,cAAc,MAAM;AACpB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACt1FD;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;ACpBA,2DAA2D,6BAA6B,8BAA8B,8BAA8B,2BAA2B,wBAAwB,mBAAmB,mBAAmB,kBAAkB,wBAAwB,oBAAoB,gCAAgC,8BAA8B,+BAA+B,wBAAwB,wBAAwB,sBAAsB,gCAAgC,8FAA8F,iCAAiC,+DAA+D,sDAAsD,oCAAoC,2CAA2C,yCAAyC,iEAAiE,KAAK,K;;;;;;ACAh6B,2DAA2D,uBAAuB,mBAAmB,mBAAmB,kBAAkB,8BAA8B,8BAA8B,2cAA2c,uCAAuC,qBAAqB,oOAAoO,8BAA8B,2FAA2F,iGAAiG,0DAA0D,6CAA6C,+CAA+C,sCAAsC,KAAK,K","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 76f8011b1749013eab18","/**\r\n * @fileoverview gl-matrix - High performance matrix and vector operations\r\n * @author Brandon Jones\r\n * @author Colin MacKenzie IV\r\n * @version 2.4.0\r\n */\r\n\r\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n// END HEADER\r\n\r\nimport * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport {\r\n  glMatrix,\r\n  mat2, mat2d, mat3, mat4,\r\n  quat,\r\n  vec2, vec3, vec4,\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix.js\n// module id = 0\n// module chunks = 0","\r\nexport var gl: WebGL2RenderingContext;\r\nexport function setGL(_gl: WebGL2RenderingContext) {\r\n  gl = _gl;\r\n}\r\n\r\nexport function readTextFile(file: string): string\r\n{\r\n    var text = \"\";\r\n    var rawFile = new XMLHttpRequest();\r\n    rawFile.open(\"GET\", file, false);\r\n    rawFile.onreadystatechange = function ()\r\n    {\r\n        if(rawFile.readyState === 4)\r\n        {\r\n            if(rawFile.status === 200 || rawFile.status == 0)\r\n            {\r\n                var allText = rawFile.responseText;\r\n                text = allText;\r\n            }\r\n        }\r\n    }\r\n    rawFile.send(null);\r\n    return text;\r\n}\r\n\r\nexport function readTextFileSync(file: string): string\r\n{\r\n    var text = \"\";\r\n    var rawFile = new XMLHttpRequest();\r\n    rawFile.open(\"GET\", file, false);\r\n    var isFinished = false;\r\n    rawFile.onreadystatechange = function ()\r\n    {\r\n        if(rawFile.readyState === 4)\r\n        {\r\n            if(rawFile.status === 200 || rawFile.status == 0)\r\n            {\r\n                var allText = rawFile.responseText;\r\n                text = allText;\r\n            }\r\n            isFinished = true;\r\n        }\r\n    }\r\n    rawFile.send(null);\r\n    while (!isFinished);\r\n    return text;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/globals.ts","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport const EPSILON = 0.000001;\r\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\r\nexport const RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nconst degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/common.js\n// module id = 2\n// module chunks = 0","import {vec2, vec3, vec4, mat3, mat4} from 'gl-matrix';\r\n\r\nexport function mat3ToMat4(m3: mat3): mat4 {\r\n    return mat4.fromValues(\r\n        m3[0], m3[1], m3[2], 0,\r\n        m3[3], m3[4], m3[5], 0,\r\n        m3[6], m3[7], m3[8], 0,\r\n        0, 0, 0, 1\r\n    );\r\n}\r\n\r\n// http://demofox.org/biasgain.html\r\nexport function perlinBias(time: number, bias: number): number {\r\n    return (time / ((((1.0 / bias) - 2.0) * (1.0 - time)) + 1.0));\r\n}\r\n\r\nexport function perlinGain(time: number, gain: number): number {\r\n    if (time < 0.5) {\r\n        return perlinBias(time * 2.0, gain) / 2.0;\r\n    }\r\n    else {\r\n        return perlinBias(time * 2.0 - 1.0, 1.0 - gain) / 2.0 + 0.5;\r\n    }\r\n}\r\n\r\n// converts RGB in [0, 255]^3 to [0, 1]^3 and adds 4th coordinate = 1\r\nexport function normalizeRGB(r: number, g: number, b: number): vec4 {\r\n    return vec4.fromValues(r / 255.0, g / 255.0, b / 255.0, 1.0);\r\n}\r\n\r\n// http://geomalgorithms.com/a01-_area.html\r\n// https://gamedev.stackexchange.com/questions/23743/whats-the-most-efficient-way-to-find-barycentric-coordinates\r\nexport function baryInterp(a: vec2, b: vec2, c: vec2, p: vec2): vec3 {\r\n    let ba = vec2.fromValues(b[0] - a[0], b[1] - a[1]);\r\n    let ca = vec2.fromValues(c[0] - a[0], c[1] - a[1]);\r\n    let pa = vec2.fromValues(p[0] - a[0], p[1] - a[1]);\r\n\r\n    let invArea = 1.0 / (ba[0] * ca[1] - ca[0] * ba[1]);\r\n    let valB = (pa[0] * ca[1] - ca[0] * pa[1]) * invArea;\r\n    let valC = (ba[0] * pa[1] - pa[0] * ba[1]) * invArea;\r\n\r\n    return vec3.fromValues(1.0 - valB - valC, valB, valC);\r\n}\r\n\r\nexport function modfVec2(x: vec2, y: number, intPart: vec2): vec2 {\r\n    vec2.set(intPart, Math.floor(x[0] / y), Math.floor(x[1] / y));\r\n    return vec2.fromValues(x[0] - y * intPart[0], x[1] - y * intPart[1]);\r\n}\r\n\r\nexport function mod(x: number, y: number): number {\r\n    return x - y * Math.floor(x / y);\r\n}\r\n\r\nexport function maxVec2(x: vec2, y: vec2): vec2 {\r\n    return vec2.fromValues((x[0] > y[0]) ? x[0] : y[0], (x[1] > y[1]) ? x[1] : y[1]);\r\n}\r\n\r\nexport function absVec2(x: vec2): vec2 {\r\n    return vec2.fromValues(Math.abs(x[0]), Math.abs(x[1]));\r\n}\r\n\r\nexport function clamp(x: number, minVal: number, maxVal: number) {\r\n    return (x <= minVal) ? minVal : (x >= maxVal) ? maxVal : x;\r\n}\r\n\r\nfunction fract(x: number): number {\r\n    return x - Math.floor(x);\r\n}\r\n\r\nfunction mix(x: number, y: number, a: number) {\r\n    return x * (1.0 - a) + y * a;\r\n}\r\n\r\nconst RAND_DOT_VEC2 = vec2.fromValues(12.9898, 4.1414);\r\n\r\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\r\nfunction rand(n: vec2): number { \r\n    return fract(Math.sin(vec2.dot(n, RAND_DOT_VEC2)) * 43758.5453);\r\n}\r\n\r\nfunction noise(p: vec2): number {\r\n    let ip = vec2.create();\r\n    vec2.floor(ip, p);\r\n    let u = vec2.fromValues(fract(p[0]), fract(p[1]));\r\n    // u = u * u * (3.0 - 2.0 * u);\r\n    let v = vec2.fromValues(3, 3);\r\n    vec2.scaleAndAdd(v, v, u, -2); // v = vec2(3) - 2 * u\r\n    vec2.multiply(u, u, u); // u = u * u\r\n    vec2.multiply(u, u, v); // u = u * v\r\n\r\n    let ipPlusX = vec2.fromValues(ip[0] + 1, ip[1]);\r\n    let ipPlusY = vec2.fromValues(ip[0], ip[1] + 1);\r\n    let ipPlusXY = vec2.fromValues(ipPlusX[0], ipPlusY[1]);\r\n\r\n    let res = mix(\r\n        mix(rand(ip), rand(ipPlusX), u[0]),\r\n        mix(rand(ipPlusY), rand(ipPlusXY), u[0]), u[1]);\r\n    return res * res;\r\n}\r\n\r\n// http://flafla2.github.io/2014/08/09/perlinnoise.html\r\nexport function smoothNoise(p: vec2): number {\r\n    let total = 0.0;\r\n    let freq = 1.0;\r\n    let ampl = 1.0;\r\n    let maxVal = 0.0;\r\n    let scaledP = vec2.create();\r\n    for (let i = 0; i < 6; i++) {\r\n        vec2.scale(scaledP, p, freq);\r\n        total += noise(scaledP) * ampl;\r\n        maxVal += ampl;\r\n        ampl *= 0.5;\r\n        freq *= 2.0;\r\n    }\r\n    return total / maxVal;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Utils.ts","import {vec2, vec3, vec4, mat3, mat4} from 'gl-matrix';\r\nimport Drawable from '../rendering/gl/Drawable';\r\nimport {gl} from '../globals';\r\n\r\n\r\nconst PI = 3.14159265;\r\nconst TWO_PI = 6.283185307;\r\n\r\nexport const PRISM_HEIGHT = 10;\r\nexport const BRANCH_COLOR = vec4.fromValues(0.82353, 0.71764706, 0.60392157, 1);\r\n\r\n// helper function for copying values of a vec4 into an array\r\nfunction copyVec4ToArray(arr: Array<number>, startIdx: number, vec: vec4) {\r\n    arr[startIdx] = vec[0];\r\n    arr[startIdx + 1] = vec[1];\r\n    arr[startIdx + 2] = vec[2];\r\n    arr[startIdx + 3] = vec[3];\r\n}\r\n\r\n// like above, but assumes you are adding to end\r\nfunction appendVec4ToArray(arr: Array<number>, vec: vec4) {\r\n    copyVec4ToArray(arr, arr.length, vec);\r\n}\r\n\r\n// hack to put normals in array without explicitly specifying last coord as 0\r\nfunction appendNormalToArray(arr: Array<number>, vec: vec3) {\r\n    let len = arr.length;\r\n    arr[len] = vec[0];\r\n    arr[len + 1] = vec[1];\r\n    arr[len + 2] = vec[2];\r\n    arr[len + 3] = 0;\r\n}\r\n\r\nfunction appendVec2ToArray(arr: Array<number>, vec: vec2) {\r\n    let len = arr.length;\r\n    arr[len] = vec[0];\r\n    arr[len + 1] = vec[1];\r\n}\r\n\r\nfunction appendTri(arr: Array<number>, i0: number, i1: number, i2: number) {\r\n    let len = arr.length;\r\n    arr[len] = i0;\r\n    arr[len + 1] = i1;\r\n    arr[len + 2] = i2;\r\n}\r\n\r\n\r\nclass Decoration extends Drawable {\r\n    indices: Uint32Array;\r\n    positions: Float32Array;\r\n    normals: Float32Array;\r\n    colors: Float32Array;\r\n    uvs: Float32Array;\r\n    stagedIndices: Array<number>;\r\n    stagedPositions: Array<number>;\r\n    stagedNormals: Array<number>;\r\n    stagedColors: Array<number>;\r\n    stagedUVs: Array<number>;\r\n    wasSafe: boolean;\r\n\r\n    currColor: vec4;\r\n\r\n    constructor() {\r\n        super(); // Call the constructor of the super class. This is required.\r\n        // The staged* arrays are modifiable arrays used to hold\r\n        // indices/positions/normals prior to putting them in\r\n        // fixed Uint32Arrays/Float32Arrays.\r\n        this.stagedIndices = [];\r\n        this.stagedPositions = [];\r\n        this.stagedNormals = [];\r\n        this.stagedColors = [];\r\n        this.stagedUVs = [];\r\n\r\n        this.currColor = vec4.create();\r\n        vec4.copy(this.currColor, BRANCH_COLOR);\r\n\r\n        this.wasSafe = true;\r\n    }\r\n\r\n    isSafeToGrow(): boolean {\r\n        this.wasSafe = this.stagedPositions.length < 12800000;\r\n        return this.wasSafe;\r\n    }\r\n\r\n    clearBuffers() {\r\n        this.stagedIndices = [];\r\n        this.stagedPositions = [];\r\n        this.stagedNormals = [];\r\n        this.stagedColors = [];\r\n        this.stagedUVs = [];\r\n    }\r\n\r\n    destroy() {\r\n        super.destroy();\r\n        this.clearBuffers();\r\n    }\r\n\r\n    useColor(color: vec4) {\r\n        vec4.copy(this.currColor, color);\r\n    }\r\n\r\n    // add mesh loaded by OBJ loader\r\n    addMesh(mesh: any, transform: mat4) {\r\n        // set up =============================================\r\n        let idxStart = this.stagedPositions.length / 4;\r\n\r\n        // get the inverse transpose for normals\r\n        let invTr = mat3.create();\r\n        mat3.fromMat4(invTr, transform);\r\n        mat3.invert(invTr, invTr);\r\n        mat3.transpose(invTr, invTr);\r\n\r\n        // add vertex data ====================================\r\n        let uvIdx = 0;\r\n        for (let i = 0; i < mesh.vertices.length; i += 3) {\r\n            let p = vec4.fromValues(mesh.vertices[i], mesh.vertices[i + 1], mesh.vertices[i + 2], 1);\r\n            vec4.transformMat4(p, p, transform);\r\n            let n = vec3.fromValues(mesh.vertexNormals[i], mesh.vertexNormals[i + 1], mesh.vertexNormals[i + 2]);\r\n            vec3.transformMat3(n, n, invTr);\r\n\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(mesh.textures[uvIdx], 1.0 - mesh.textures[uvIdx + 1]));\r\n            appendNormalToArray(this.stagedNormals, n);\r\n\r\n            uvIdx += 2;\r\n        }\r\n\r\n        // add indices ========================================\r\n        for (let i = 0; i < mesh.indices.length; i += 3) {\r\n            appendTri(this.stagedIndices, idxStart + mesh.indices[i], idxStart + mesh.indices[i + 1], idxStart + mesh.indices[i + 2]); \r\n        }\r\n    }\r\n\r\n    // adds a prism to the staged* arrays, with all points transformed\r\n    // by _transform_. with no transformation, the prism is\r\n    // oriented such that its base:\r\n    //   * lies on the XZ planes\r\n    //   * has its center at the origin\r\n    // the prism will extend in the +Y direction from the base.\r\n    addPrism(transform: mat4, sides: number, scaleBottom: number, scaleTop: number, scaleHeight: number) {\r\n        // set up =============================================\r\n        let idxStart = this.stagedPositions.length / 4;\r\n\r\n        // get the inverse transpose for normals\r\n        let invTr = mat3.create();\r\n        mat3.fromMat4(invTr, transform);\r\n        mat3.invert(invTr, invTr);\r\n        mat3.transpose(invTr, invTr);\r\n\r\n        // add base ===========================================\r\n        // add center\r\n        let p = vec4.fromValues(0, 0, 0, 1);\r\n        vec4.transformMat4(p, p, transform);\r\n        appendVec4ToArray(this.stagedPositions, p);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        let n = vec3.fromValues(0, -1, 0);\r\n        vec3.transformMat3(n, n, invTr);\r\n        vec3.normalize(n, n);\r\n        appendNormalToArray(this.stagedNormals, n);\r\n\r\n        // add radial vertices\r\n        let angle = TWO_PI / sides;\r\n        let rotMat4 = mat4.create();\r\n        mat4.fromRotation(rotMat4, angle, vec3.fromValues(0, 1, 0));\r\n\r\n        let localPos = vec4.fromValues(scaleBottom, 0, 0, 1);\r\n\r\n        for (let i = 0; i < sides; i++) {\r\n            // transform and append position\r\n            vec4.transformMat4(p, localPos, transform);\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n            // append normal (already transformed when computing center)\r\n            appendNormalToArray(this.stagedNormals, n);\r\n\r\n            // if this is not last iteration...\r\n            if (i < sides - 1) {\r\n                // rotate local position\r\n                vec4.transformMat4(localPos, localPos, rotMat4);\r\n\r\n                // append indices to make faces\r\n                appendTri(this.stagedIndices, idxStart, idxStart + 1 + i, idxStart + 2 + i);\r\n            }\r\n            else {\r\n                // append indices to make faces -- edge case\r\n                appendTri(this.stagedIndices, idxStart, idxStart + sides, idxStart + 1);\r\n            }\r\n        }\r\n\r\n        // add top ============================================\r\n        // refresh idxStart\r\n        idxStart = this.stagedPositions.length / 4;\r\n        // add center\r\n        p = vec4.fromValues(0, PRISM_HEIGHT * scaleHeight, 0, 1);\r\n        vec4.transformMat4(p, p, transform);\r\n        appendVec4ToArray(this.stagedPositions, p);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        n = vec3.fromValues(0, 1, 0);\r\n        vec3.transformMat3(n, n, invTr);\r\n        vec3.normalize(n, n);\r\n        appendNormalToArray(this.stagedNormals, n);\r\n\r\n        // add radial vertices\r\n\r\n        localPos = vec4.fromValues(scaleTop, PRISM_HEIGHT * scaleHeight, 0, 1);\r\n\r\n        for (let i = 0; i < sides; i++) {\r\n            // transform and append position\r\n            vec4.transformMat4(p, localPos, transform);\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n            // append normal (already transformed when computing center)\r\n            appendNormalToArray(this.stagedNormals, n);\r\n\r\n            // if this is not last iteration...\r\n            if (i < sides - 1) {\r\n                // rotate local position\r\n                vec4.transformMat4(localPos, localPos, rotMat4);\r\n\r\n                // append indices to make faces\r\n                appendTri(this.stagedIndices, idxStart, idxStart + 1 + i, idxStart + 2 + i);\r\n            }\r\n            else {\r\n                // append indices to make faces -- edge case\r\n                appendTri(this.stagedIndices, idxStart, idxStart + sides, idxStart + 1);\r\n            }\r\n        }\r\n\r\n        // add sides (rectangular faces) ======================\r\n        // refresh idxStart\r\n        idxStart = this.stagedPositions.length / 4;\r\n\r\n        let rotMat3 = mat3.create();\r\n        mat3.fromMat4(rotMat3, rotMat4);\r\n\r\n        // localPosBot will be computed from localPosTop by setting Y = 0\r\n        let localPosBot = vec4.fromValues(scaleBottom, 0, 0, 1);\r\n        let localPosTop = vec4.fromValues(scaleTop, PRISM_HEIGHT * scaleHeight, 0, 1);\r\n\r\n        // compute initial normal by rotating by half angle\r\n        let halfRotMat4 = mat4.create();\r\n        mat4.fromRotation(halfRotMat4, angle * 0.5, vec3.fromValues(0, 1, 0));\r\n        let localNorVec4 = vec4.fromValues(1, 0, 0, 0);\r\n        vec4.transformMat4(localNorVec4, localNorVec4, halfRotMat4);\r\n        let localNor = vec3.fromValues(localNorVec4[0], localNorVec4[1], localNorVec4[2]);\r\n        \r\n        for (let i = 0; i < sides; i++) {\r\n            // transform and append position -- top\r\n            vec4.transformMat4(p, localPosTop, transform);\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n            // transform and append position -- bottom\r\n            //vec4.set(localPosBot, localPosTop[0], 0, localPosTop[2], 1);\r\n            vec4.transformMat4(p, localPosBot, transform);\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n            // transform and append normal (need to append twice)\r\n            vec3.transformMat3(n, localNor, invTr);\r\n            vec3.normalize(n, n);\r\n            appendNormalToArray(this.stagedNormals, n);\r\n            appendNormalToArray(this.stagedNormals, n);\r\n\r\n            // if this is not last iteration...\r\n            if (i < sides - 1) {\r\n                // rotate local position\r\n                vec4.transformMat4(localPosTop, localPosTop, rotMat4);\r\n                vec4.transformMat4(localPosBot, localPosBot, rotMat4);\r\n\r\n                // rotate local normal\r\n                vec3.transformMat3(localNor, localNor, rotMat3);\r\n\r\n                // append indices to make faces\r\n                // adjusts start index to account for i (# of sides added so far)\r\n                let adjStart = idxStart + 2 * i;\r\n                appendTri(this.stagedIndices, adjStart, adjStart + 2, adjStart + 1);\r\n                appendTri(this.stagedIndices, adjStart + 1, adjStart + 2, adjStart + 3);\r\n            }\r\n            else {\r\n                // append indices to make faces -- edge case\r\n                let adjStart = idxStart + 2 * i;\r\n                appendTri(this.stagedIndices, adjStart, idxStart, adjStart + 1);\r\n                appendTri(this.stagedIndices, adjStart + 1, idxStart, idxStart + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // normals are more accurate, but has many more vertices (almost 2x)\r\n    addNormalCorrectPrism(transform: mat4, sides: number, scaleBottom: number, scaleTop: number, scaleHeight: number) {\r\n        // set up =============================================\r\n        let idxStart = this.stagedPositions.length / 4;\r\n\r\n        // get the inverse transpose for normals\r\n        let invTr = mat3.create();\r\n        mat3.fromMat4(invTr, transform);\r\n        mat3.invert(invTr, invTr);\r\n        mat3.transpose(invTr, invTr);\r\n\r\n        // add base ===========================================\r\n        // add center\r\n        let p = vec4.fromValues(0, 0, 0, 1);\r\n        vec4.transformMat4(p, p, transform);\r\n        appendVec4ToArray(this.stagedPositions, p);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        let n = vec3.fromValues(0, -1, 0);\r\n        vec3.transformMat3(n, n, invTr);\r\n        vec3.normalize(n, n);\r\n        appendNormalToArray(this.stagedNormals, n);\r\n\r\n        // add radial vertices\r\n        let angle = TWO_PI / sides;\r\n        let rotMat4 = mat4.create();\r\n        mat4.fromRotation(rotMat4, angle, vec3.fromValues(0, 1, 0));\r\n\r\n        let localPos = vec4.fromValues(scaleBottom, 0, 0, 1);\r\n\r\n        for (let i = 0; i < sides; i++) {\r\n            // transform and append position\r\n            vec4.transformMat4(p, localPos, transform);\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n            // append normal (already transformed when computing center)\r\n            appendNormalToArray(this.stagedNormals, n);\r\n\r\n            // if this is not last iteration...\r\n            if (i < sides - 1) {\r\n                // rotate local position\r\n                vec4.transformMat4(localPos, localPos, rotMat4);\r\n\r\n                // append indices to make faces\r\n                appendTri(this.stagedIndices, idxStart + 1 + i, idxStart, idxStart + 2 + i);\r\n            }\r\n            else {\r\n                // append indices to make faces -- edge case\r\n                appendTri(this.stagedIndices, idxStart + sides, idxStart, idxStart + 1);\r\n            }\r\n        }\r\n\r\n        // add top ============================================\r\n        // refresh idxStart\r\n        idxStart = this.stagedPositions.length / 4;\r\n        // add center\r\n        p = vec4.fromValues(0, PRISM_HEIGHT * scaleHeight, 0, 1);\r\n        vec4.transformMat4(p, p, transform);\r\n        appendVec4ToArray(this.stagedPositions, p);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        n = vec3.fromValues(0, 1, 0);\r\n        vec3.transformMat3(n, n, invTr);\r\n        vec3.normalize(n, n);\r\n        appendNormalToArray(this.stagedNormals, n);\r\n\r\n        // add radial vertices\r\n        localPos = vec4.fromValues(scaleTop, PRISM_HEIGHT * scaleHeight, 0, 1);\r\n\r\n        for (let i = 0; i < sides; i++) {\r\n            // transform and append position\r\n            vec4.transformMat4(p, localPos, transform);\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n            // append normal (already transformed when computing center)\r\n            appendNormalToArray(this.stagedNormals, n);\r\n\r\n            // if this is not last iteration...\r\n            if (i < sides - 1) {\r\n                // rotate local position\r\n                vec4.transformMat4(localPos, localPos, rotMat4);\r\n\r\n                // append indices to make faces\r\n                appendTri(this.stagedIndices, idxStart, idxStart + 1 + i, idxStart + 2 + i);\r\n            }\r\n            else {\r\n                // append indices to make faces -- edge case\r\n                appendTri(this.stagedIndices, idxStart, idxStart + sides, idxStart + 1);\r\n            }\r\n        }\r\n\r\n        // add sides (rectangular faces) ======================\r\n        // refresh idxStart\r\n        idxStart = this.stagedPositions.length / 4;\r\n\r\n        let rotMat3 = mat3.create();\r\n        mat3.fromMat4(rotMat3, rotMat4);\r\n\r\n        // localPosBot will be computed from localPosTop by setting Y = 0\r\n        let localPosBot = vec4.fromValues(scaleBottom, 0, 0, 1);\r\n        let localPosTop = vec4.fromValues(scaleTop, PRISM_HEIGHT * scaleHeight, 0, 1);\r\n\r\n        // compute initial normal by rotating by half angle\r\n        let halfRotMat4 = mat4.create();\r\n        mat4.fromRotation(halfRotMat4, angle * 0.5, vec3.fromValues(0, 1, 0));\r\n        let localNorVec4 = vec4.fromValues(1, 0, 0, 0);\r\n        vec4.transformMat4(localNorVec4, localNorVec4, halfRotMat4);\r\n        let localNor = vec3.fromValues(localNorVec4[0], localNorVec4[1], localNorVec4[2]);\r\n        // reflect about X\r\n        let prevLocalNor = vec3.fromValues(localNor[0], localNor[1], -localNor[2]);\r\n        let prevNor = vec3.create();\r\n        vec3.transformMat3(prevNor, prevLocalNor, invTr);\r\n        vec3.normalize(prevNor, prevNor);\r\n\r\n        for (let i = 0; i < sides; i++) {\r\n            // append top and bottom twice to account for different normals!\r\n            // first copies will have \"previous normal\", second will have \"current normal\"\r\n            // transform and append position -- top\r\n            vec4.transformMat4(p, localPosTop, transform);\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n            // transform and append position -- bottom\r\n            //vec4.set(localPosBot, localPosTop[0], 0, localPosTop[2], 1);\r\n            vec4.transformMat4(p, localPosBot, transform);\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n            appendVec4ToArray(this.stagedPositions, p);\r\n            appendVec4ToArray(this.stagedColors, this.currColor);\r\n            appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n            // transform and append normal (need to append twice)\r\n            vec3.transformMat3(n, localNor, invTr);\r\n            vec3.normalize(n, n);\r\n            appendNormalToArray(this.stagedNormals, prevNor);\r\n            appendNormalToArray(this.stagedNormals, n);\r\n            appendNormalToArray(this.stagedNormals, prevNor);\r\n            appendNormalToArray(this.stagedNormals, n);\r\n            vec3.copy(prevNor, n);\r\n\r\n            // if this is not last iteration...\r\n            if (i < sides - 1) {\r\n                // rotate local position\r\n                vec4.transformMat4(localPosTop, localPosTop, rotMat4);\r\n                vec4.transformMat4(localPosBot, localPosBot, rotMat4);\r\n\r\n                // rotate local normal\r\n                vec3.transformMat3(localNor, localNor, rotMat3);\r\n\r\n                // append indices to make faces\r\n                // adjusts start index to account for i (# of sides added so far)\r\n                let adjStart = idxStart + 4 * i;\r\n                appendTri(this.stagedIndices, adjStart + 1, adjStart + 3, adjStart + 4);\r\n                appendTri(this.stagedIndices, adjStart + 4, adjStart + 3, adjStart + 6);\r\n            }\r\n            else {\r\n                // append indices to make faces -- edge case\r\n                let adjStart = idxStart + 4 * i;\r\n                appendTri(this.stagedIndices, adjStart + 1, adjStart + 3, idxStart);\r\n                appendTri(this.stagedIndices, adjStart + 3, idxStart + 2, idxStart);\r\n            }\r\n        }\r\n    }\r\n\r\n    addPyramid(transform: mat4, scaleBottom: number, scaleHeight: number) {\r\n        // set up =============================================\r\n        let idxStart = this.stagedPositions.length / 4;\r\n\r\n        // get the inverse transpose for normals\r\n        let invTr = mat3.create();\r\n        mat3.fromMat4(invTr, transform);\r\n        mat3.invert(invTr, invTr);\r\n        mat3.transpose(invTr, invTr);\r\n\r\n        // add +X face\r\n        let a = vec4.fromValues(scaleBottom, 0, scaleBottom, 1);\r\n        vec4.transformMat4(a, a, transform);\r\n        appendVec4ToArray(this.stagedPositions, a);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        let b = vec4.fromValues(scaleBottom, 0, -scaleBottom, 1);\r\n        vec4.transformMat4(b, b, transform);\r\n        appendVec4ToArray(this.stagedPositions, b);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        let c = vec4.fromValues(0, scaleHeight, 0, 1);\r\n        vec4.transformMat4(c, c, transform);\r\n        appendVec4ToArray(this.stagedPositions, c);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        let ab = vec3.fromValues(a[0] - b[0], a[1] - b[1], a[2] - b[2]);\r\n        let cb = vec3.fromValues(c[0] - b[0], c[1] - b[1], c[2] - b[2]);\r\n        let n = vec3.create();\r\n        vec3.cross(n, ab, cb);\r\n        vec3.transformMat3(n, n, invTr);\r\n        vec3.normalize(n, n);\r\n        for (let i = 0; i < 3; i++) {\r\n            appendNormalToArray(this.stagedNormals, n);\r\n        }\r\n\r\n        // add -X face\r\n        a = vec4.fromValues(-scaleBottom, 0, -scaleBottom, 1);\r\n        vec4.transformMat4(a, a, transform);\r\n        appendVec4ToArray(this.stagedPositions, a);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        b = vec4.fromValues(-scaleBottom, 0, scaleBottom, 1);\r\n        vec4.transformMat4(b, b, transform);\r\n        appendVec4ToArray(this.stagedPositions, b);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        c = vec4.fromValues(0, scaleHeight, 0, 1);\r\n        vec4.transformMat4(c, c, transform);\r\n        appendVec4ToArray(this.stagedPositions, c);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        ab = vec3.fromValues(a[0] - b[0], a[1] - b[1], a[2] - b[2]);\r\n        cb = vec3.fromValues(c[0] - b[0], c[1] - b[1], c[2] - b[2]);\r\n        vec3.cross(n, ab, cb);\r\n        vec3.transformMat3(n, n, invTr);\r\n        vec3.normalize(n, n);\r\n        for (let i = 0; i < 3; i++) {\r\n            appendNormalToArray(this.stagedNormals, n);\r\n        }\r\n\r\n        // add +Z face\r\n        b = vec4.fromValues(-scaleBottom, 0, scaleBottom, 1);\r\n        vec4.transformMat4(b, b, transform);\r\n        appendVec4ToArray(this.stagedPositions, b);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        a = vec4.fromValues(scaleBottom, 0, scaleBottom, 1);\r\n        vec4.transformMat4(a, a, transform);\r\n        appendVec4ToArray(this.stagedPositions, a);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        c = vec4.fromValues(0, scaleHeight, 0, 1);\r\n        vec4.transformMat4(c, c, transform);\r\n        appendVec4ToArray(this.stagedPositions, c);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        ab = vec3.fromValues(a[0] - b[0], a[1] - b[1], a[2] - b[2]);\r\n        cb = vec3.fromValues(c[0] - b[0], c[1] - b[1], c[2] - b[2]);\r\n        vec3.cross(n, ab, cb);\r\n        vec3.transformMat3(n, n, invTr);\r\n        vec3.normalize(n, n);\r\n        for (let i = 0; i < 3; i++) {\r\n            appendNormalToArray(this.stagedNormals, n);\r\n        }\r\n\r\n        // add -Z face\r\n        b = vec4.fromValues(scaleBottom, 0, -scaleBottom, 1);\r\n        vec4.transformMat4(b, b, transform);\r\n        appendVec4ToArray(this.stagedPositions, b);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        a = vec4.fromValues(-scaleBottom, 0, -scaleBottom, 1);\r\n        vec4.transformMat4(a, a, transform);\r\n        appendVec4ToArray(this.stagedPositions, a);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        c = vec4.fromValues(0, scaleHeight, 0, 1);\r\n        vec4.transformMat4(c, c, transform);\r\n        appendVec4ToArray(this.stagedPositions, c);\r\n        appendVec4ToArray(this.stagedColors, this.currColor);\r\n        appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n\r\n        ab = vec3.fromValues(a[0] - b[0], a[1] - b[1], a[2] - b[2]);\r\n        cb = vec3.fromValues(c[0] - b[0], c[1] - b[1], c[2] - b[2]);\r\n        vec3.cross(n, ab, cb);\r\n        vec3.transformMat3(n, n, invTr);\r\n        vec3.normalize(n, n);\r\n        for (let i = 0; i < 3; i++) {\r\n            appendNormalToArray(this.stagedNormals, n);\r\n        }\r\n\r\n        // add indices\r\n        for (let i = 0; i < 12; i += 3) {\r\n            appendTri(this.stagedIndices, idxStart + i, idxStart + i + 1, idxStart + i + 2);\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    addPolysphere(transform: mat4, sides: number) {\r\n        // set up =============================================\r\n        let idxStart = this.stagedPositions.length / 4;\r\n\r\n        // get the inverse transpose for normals\r\n        let invTr = mat3.create();\r\n        mat3.fromMat4(invTr, transform);\r\n        mat3.invert(invTr, invTr);\r\n        mat3.transpose(invTr, invTr);\r\n\r\n        // add one \"slice\"\r\n        // subdivs has to be even\r\n        let subdivs = 16;\r\n        let yMin = 0.0;\r\n        let yRange = 0.2;\r\n        let ps: Array<vec4> = [];\r\n        let angle = 0.0;\r\n        for (let i = 0; i < subdivs; i++) {\r\n            let y = yMin + (((i % 2) == 0) ? 0 : 1) * yRange;\r\n            let xzScale = Math.sqrt(1.0 - y * y);\r\n            let p = vec4.fromValues(Math.cos(angle) * xzScale, y, Math.sin(angle) * xzScale, 1.0);\r\n            vec4.normalize(p, p);\r\n            vec4.scale(p, p, 12.0);\r\n            p[3] = 1.0;\r\n            ps.push(p);\r\n            angle += 2.0 * Math.PI / (subdivs + 1);\r\n        }\r\n        let n = vec3.create();\r\n        for (let i = 0; i < ps.length; i++) {\r\n            let a = vec4.clone(ps[(i + 0) % ps.length]);\r\n            let b = vec4.clone(ps[(i + 1) % ps.length]);\r\n            let c = vec4.clone(ps[(i + 2) % ps.length]);\r\n            vec4.transformMat4(a, a, transform);\r\n            vec4.transformMat4(b, b, transform);\r\n            vec4.transformMat4(c, c, transform);\r\n            appendVec4ToArray(this.stagedPositions, a);\r\n            appendVec4ToArray(this.stagedPositions, b);\r\n            appendVec4ToArray(this.stagedPositions, c);\r\n            for (let j = 0; j < 3; j++) {\r\n                appendVec4ToArray(this.stagedColors, this.currColor);\r\n                appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n            }\r\n            let ab = vec3.fromValues(a[0] - b[0], a[1] - b[1], a[2] - b[2]);\r\n            let cb = vec3.fromValues(c[0] - b[0], c[1] - b[1], c[2] - b[2]);\r\n            vec3.cross(n, ab, cb);\r\n            vec3.normalize(n, n);\r\n            for (let i = 0; i < 3; i++) {\r\n                appendNormalToArray(this.stagedNormals, n);\r\n            }\r\n            appendTri(this.stagedIndices, idxStart + (i * 3), idxStart + (i * 3) + 1, idxStart + (i * 3) + 2);\r\n        }\r\n        yMin = 0.2;\r\n        let oldPs = ps.slice();\r\n        ps = [];\r\n        angle = 0.0;\r\n        for (let i = 0; i < subdivs; i++) {\r\n            let y = yMin + (((i % 2) == 1) ? 0 : 1) * yRange;\r\n            let xzScale = Math.sqrt(1.0 - y * y);\r\n            let p = vec4.fromValues(Math.cos(angle) * xzScale, y, Math.sin(angle) * xzScale, 1.0);\r\n            vec4.normalize(p, p);\r\n            vec4.scale(p, p, 12.0);\r\n            p[3] = 1.0;\r\n            ps.push(p);\r\n            angle += 2.0 * Math.PI / (subdivs + 1);\r\n        }\r\n        idxStart = this.stagedPositions.length / 4;\r\n        for (let i = 0; i < ps.length; i++) {\r\n            let a = vec4.clone(ps[(i + 0) % ps.length]);\r\n            let b = vec4.clone(ps[(i + 1) % ps.length]);\r\n            let c = vec4.clone(ps[(i + 2) % ps.length]);\r\n            vec4.transformMat4(a, a, transform);\r\n            vec4.transformMat4(b, b, transform);\r\n            vec4.transformMat4(c, c, transform);\r\n            appendVec4ToArray(this.stagedPositions, a);\r\n            appendVec4ToArray(this.stagedPositions, b);\r\n            appendVec4ToArray(this.stagedPositions, c);\r\n            for (let j = 0; j < 3; j++) {\r\n                appendVec4ToArray(this.stagedColors, this.currColor);\r\n                appendVec2ToArray(this.stagedUVs, vec2.fromValues(-1, -1));\r\n            }\r\n            let ab = vec3.fromValues(a[0] - b[0], a[1] - b[1], a[2] - b[2]);\r\n            let cb = vec3.fromValues(c[0] - b[0], c[1] - b[1], c[2] - b[2]);\r\n            vec3.cross(n, ab, cb);\r\n            vec3.normalize(n, n);\r\n            for (let i = 0; i < 3; i++) {\r\n                appendNormalToArray(this.stagedNormals, n);\r\n            }\r\n            appendTri(this.stagedIndices, idxStart + (i * 3), idxStart + (i * 3) + 1, idxStart + (i * 3) + 2);\r\n        }\r\n    }\r\n    */\r\n\r\n    create() {\r\n        this.indices = new Uint32Array(this.stagedIndices);\r\n        this.positions = new Float32Array(this.stagedPositions);\r\n        this.normals = new Float32Array(this.stagedNormals);\r\n        this.colors = new Float32Array(this.stagedColors);\r\n        this.uvs = new Float32Array(this.stagedUVs);\r\n\r\n        this.generateIdx();\r\n        this.generatePos();\r\n        this.generateNor();\r\n        this.generateCol();\r\n        this.generateUV();\r\n\r\n        this.count = this.indices.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIdx);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufNor);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.normals, gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufCol);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufPos);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.STATIC_DRAW);\r\n\r\n        console.log(`Created Decoration`);\r\n    }\r\n};\r\n\r\nexport default Decoration;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/Decoration.ts","import {vec3, mat3, mat4, quat} from 'gl-matrix';\r\n\r\n// what's up?\r\nconst UP = vec3.fromValues(0, 1, 0);\r\n\r\nclass Turtle {\r\n    position: vec3;\r\n    orientation: vec3;\r\n    depth: number;\r\n    scaleBottom: number;\r\n    scaleTop: number;\r\n\r\n    constructor() {\r\n        this.position = vec3.create();\r\n        this.orientation = vec3.create();\r\n        vec3.copy(this.orientation, UP);\r\n        this.depth = 0;\r\n        this.scaleBottom = 12;\r\n        this.scaleTop = 12;\r\n    }\r\n\r\n    moveForward(distance: number) {\r\n        vec3.scaleAndAdd(this.position, this.position, this.orientation, distance);\r\n    }\r\n\r\n    getTransformationToTurtle(): mat4 {\r\n        let q = quat.create();\r\n        quat.rotationTo(q, UP, this.orientation); \r\n        let m = mat4.create();\r\n        mat4.fromRotationTranslation(m, q, this.position);\r\n        return m;\r\n    }\r\n\r\n    makeDeepCopy(): Turtle {\r\n        let copy = new Turtle();\r\n        vec3.copy(copy.position, this.position);\r\n        vec3.copy(copy.orientation, this.orientation);\r\n        copy.depth = this.depth;\r\n        copy.scaleBottom = this.scaleBottom;\r\n        copy.scaleTop = this.scaleTop;\r\n        return copy;\r\n    }\r\n\r\n    rotateX(rad: number) {\r\n        let rotMat4 = mat4.create();\r\n        mat4.fromXRotation(rotMat4, rad);\r\n        let rotMat3 = mat3.create();\r\n        mat3.fromMat4(rotMat3, rotMat4);\r\n        vec3.transformMat3(this.orientation, this.orientation, rotMat3);\r\n    }\r\n\r\n    rotateY(rad: number) {\r\n        let rotMat4 = mat4.create();\r\n        mat4.fromYRotation(rotMat4, rad);\r\n        let rotMat3 = mat3.create();\r\n        mat3.fromMat4(rotMat3, rotMat4);\r\n        vec3.transformMat3(this.orientation, this.orientation, rotMat3);\r\n    }\r\n\r\n    rotateZ(rad: number) {\r\n        let rotMat4 = mat4.create();\r\n        mat4.fromZRotation(rotMat4, rad);\r\n        let rotMat3 = mat3.create();\r\n        mat3.fromMat4(rotMat3, rotMat4);\r\n        vec3.transformMat3(this.orientation, this.orientation, rotMat3);\r\n    }\r\n\r\n};\r\n\r\nexport default Turtle;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/l-system/Turtle.ts","import {vec3, mat4} from 'gl-matrix';\r\n//import Turtle from 'Turtle';\r\n//import Plant from '../geometry/Plant';\r\nimport LSystem from 'LSystem';\r\n\r\nexport class ExpansionRule {\r\n    weight: number;\r\n    symbols: Array<LSymbol>;\r\n\r\n    constructor(weight: number, symbols: Array<LSymbol>) {\r\n        this.weight = weight;\r\n        this.symbols = symbols;\r\n    }\r\n}\r\n\r\nexport class LSymbol {\r\n    stringRepr: string;\r\n    action: (lsys: LSystem) => void;\r\n    expansionRules: Array<ExpansionRule>;\r\n    normalizedWeights: Array<number>;\r\n\r\n    constructor(stringRepr: string, action: (lsys: LSystem) => void) {\r\n        this.stringRepr = stringRepr;\r\n        this.action = action;\r\n        this.expansionRules = [];\r\n        this.normalizedWeights = [];\r\n    }\r\n\r\n    // rules should be an array of tuples\r\n    // each tuple is of the form (weight, symbol)\r\n    // the higher a given weight, the higher the chance the symbol will be chosen\r\n    setExpansionRules(rules: Array<ExpansionRule>) {\r\n        this.expansionRules = rules.slice(0);\r\n        this.updateWeights();\r\n    }\r\n\r\n    updateWeights() {\r\n        this.normalizedWeights = [];\r\n        if (this.expansionRules.length == 0) {\r\n            return;\r\n        }\r\n        if (this.expansionRules.length == 1) {\r\n            this.normalizedWeights[0] = 1.0;\r\n            return;\r\n        }\r\n\r\n        let totalSum = 0.0;\r\n        for (let i = 0; i < this.expansionRules.length; i++) {\r\n            totalSum += this.expansionRules[i].weight;\r\n        }\r\n        if (totalSum == 0.0) {\r\n            return;\r\n        }\r\n\r\n        let accWeight = 0.0;\r\n        for (let i = 0; i < this.expansionRules.length; i++) {\r\n            accWeight += this.expansionRules[i].weight / totalSum;\r\n            this.normalizedWeights[i] = accWeight;\r\n        }\r\n    }\r\n\r\n    canExpand(): boolean {\r\n        return (this.expansionRules.length > 0);\r\n    }\r\n\r\n    // p should be in [0, 1]\r\n    expand(p: number): Array<LSymbol> {\r\n        if (this.expansionRules.length == 0) {\r\n            return [this];\r\n        }\r\n        if (this.expansionRules.length == 1) {\r\n            return this.expansionRules[0].symbols;\r\n        }\r\n\r\n        let lastIdx = this.expansionRules.length - 1;\r\n        for (let i = 0; i < lastIdx; i++) {\r\n            if (p < this.normalizedWeights[i]) {\r\n                return this.expansionRules[i].symbols;\r\n            }\r\n        }\r\n        return this.expansionRules[lastIdx].symbols;\r\n    }\r\n\r\n};\r\n\r\n//export default ExpansionRule;\r\n//export default LSymbol;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/l-system/LSymbol.ts","// Singleton class\r\n// https://k94n.com/es6-modules-single-instance-pattern\r\n\r\nexport const LRANDOM_MATH_RANDOM = 1; // use Math.random()\r\nexport const LRANDOM_DETERMINISTIC = 2; // use deterministic noise\r\n\r\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\r\nfunction fract(x: number): number {\r\n    return x - Math.floor(x); \r\n}\r\n\r\n// this should be enough if x is an integer\r\n// i.e. not varying by small amounts\r\n// (otherwise we would see sine+sawtoot-like patterns, which is \"fixed\" with the noise() function)\r\nfunction rand(x: number) {\r\n    return fract(Math.sin(x) * 43758.5453123);\r\n}\r\n\r\nclass LRandom {\r\n    mode: number;\r\n    state: number;\r\n\r\n    // set mode to one of the LRANDOM_* values above\r\n    //constructor(mode: number, seed: number) {\r\n        //this.mode = mode;\r\n        //this.state = seed;\r\n    //}\r\n    constructor() {\r\n        this.mode = LRANDOM_MATH_RANDOM;\r\n        this.state = 0;\r\n    }\r\n\r\n    setSeed(seed: number) {\r\n        this.state = seed;\r\n    }\r\n\r\n    setMode(mode: number) {\r\n        this.mode = mode;\r\n    }\r\n\r\n    getNext() {\r\n        if (this.mode == LRANDOM_MATH_RANDOM) {\r\n            return Math.random();\r\n        }\r\n        else if (this.mode == LRANDOM_DETERMINISTIC) {\r\n            return rand(this.state++);\r\n        }\r\n        else {\r\n            return -1.0;\r\n        }\r\n    }\r\n\r\n};\r\n\r\n// this makes it a singleton\r\nexport let lRandom = new LRandom();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/l-system/LRandom.ts","import {gl} from '../../globals';\r\nimport {mat4} from 'gl-matrix';\r\n\r\nabstract class Drawable {\r\n  isActive: boolean = true;\r\n\r\n  count: number = 0;\r\n\r\n  bufIdx: WebGLBuffer;\r\n  bufPos: WebGLBuffer;\r\n  bufNor: WebGLBuffer;\r\n  bufCol: WebGLBuffer;\r\n  bufUV: WebGLBuffer;\r\n\r\n  idxBound: boolean = false;\r\n  posBound: boolean = false;\r\n  norBound: boolean = false;\r\n  colBound: boolean = false;\r\n  uvBound: boolean = false;\r\n\r\n  modelMatrix: mat4 = mat4.create();\r\n\r\n  abstract create() : void;\r\n\r\n  destroy() {\r\n    gl.deleteBuffer(this.bufIdx);\r\n    gl.deleteBuffer(this.bufPos);\r\n    gl.deleteBuffer(this.bufNor);\r\n    gl.deleteBuffer(this.bufCol);\r\n    gl.deleteBuffer(this.bufUV);\r\n  }\r\n\r\n  generateIdx() {\r\n    this.idxBound = true;\r\n    this.bufIdx = gl.createBuffer();\r\n  }\r\n\r\n  generatePos() {\r\n    this.posBound = true;\r\n    this.bufPos = gl.createBuffer();\r\n  }\r\n\r\n  generateNor() {\r\n    this.norBound = true;\r\n    this.bufNor = gl.createBuffer();\r\n  }\r\n\r\n  generateCol() {\r\n    this.colBound = true;\r\n    this.bufCol = gl.createBuffer();\r\n  }\r\n\r\n  generateUV() {\r\n    this.uvBound = true;\r\n    this.bufUV = gl.createBuffer();\r\n  }\r\n\r\n  bindIdx(): boolean {\r\n    if (this.idxBound) {\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIdx);\r\n    }\r\n    return this.idxBound;\r\n  }\r\n\r\n  bindPos(): boolean {\r\n    if (this.posBound) {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.bufPos);\r\n    }\r\n    return this.posBound;\r\n  }\r\n\r\n  bindNor(): boolean {\r\n    if (this.norBound) {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.bufNor);\r\n    }\r\n    return this.norBound;\r\n  }\r\n\r\n  bindCol() : boolean {\r\n    if (this.colBound) {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.bufCol);\r\n    }\r\n    return this.colBound;\r\n  }\r\n\r\n  bindUV() : boolean {\r\n    if (this.uvBound) {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\r\n    }\r\n    return this.uvBound;\r\n  }\r\n\r\n  elemCount(): number {\r\n    return this.count;\r\n  }\r\n\r\n  drawMode(): GLenum {\r\n    return gl.TRIANGLES;\r\n  }\r\n};\r\n\r\nexport default Drawable;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/rendering/gl/Drawable.ts","import Drawable from '../rendering/gl/Drawable';\r\nimport TerrainPlane from '../geometry/TerrainPlane';\r\nimport Decoration from '../geometry/Decoration';\r\nimport BasicTree from './BasicTree';\r\nimport Snowman from './Snowman';\r\nimport Ghost from './Ghost';\r\nimport Collider from './Collider';\r\nimport SquareCollider from './SquareCollider';\r\nimport {clamp, mod, modfVec2, baryInterp, normalizeRGB, perlinGain} from '../Utils';\r\nimport {vec2, vec3, mat4, quat} from 'gl-matrix';\r\n\r\nexport enum Level {\r\n    DESERT = 1,\r\n    SNOW,\r\n    SPOOKY,\r\n}\r\n\r\nconst TERRAIN_COLOR = normalizeRGB(201, 142, 14);\r\nconst TREE_COLORS = [\r\n    normalizeRGB(4, 221, 15),\r\n    normalizeRGB(4, 221, 15),\r\n    normalizeRGB(4, 201, 15),\r\n    normalizeRGB(4, 201, 15),\r\n    normalizeRGB(155, 149, 0),\r\n    normalizeRGB(155, 149, 0),\r\n    normalizeRGB(0, 155, 90),\r\n];\r\nconst PYRAMID_COLOR = normalizeRGB(255, 140, 0);\r\n\r\nconst SNOW_COLOR = normalizeRGB(200, 200, 255);\r\n\r\nconst SPOOKY_COLOR = normalizeRGB(3, 10, 3);\r\n\r\nconst NUM_GHOSTS = 3;\r\n\r\nclass Terrain {\r\n    drawables: Array<Drawable>;\r\n    terrainPlanes: Array<TerrainPlane>;\r\n    origin: vec3; // bottom-left corner\r\n    tileDim: number; // dimension (height and width) of each tile (for planes)\r\n    tileNum: number; // how many tiles exist on each axis (for planes)\r\n    planeDim: number; // total dimension of each plane (height and width)\r\n    planeNumX: number;\r\n    planeNumZ: number;\r\n    totalDimX: number;\r\n    totalDimZ: number;\r\n\r\n    ghosts: Array<Ghost>;\r\n\r\n    level: Level;\r\n    shouldExit: boolean;\r\n\r\n    constructor(origin: vec3, tileDim: number, tileNum: number, planeNumX: number, planeNumZ: number, level: Level) {\r\n        this.origin = vec3.clone(origin);\r\n        this.tileDim = tileDim;\r\n        this.tileNum = tileNum;\r\n        this.planeDim = tileDim * tileNum;\r\n        this.planeNumX = planeNumX;\r\n        this.planeNumZ = planeNumZ;\r\n        this.totalDimX = this.planeDim * planeNumX;\r\n        this.totalDimZ = this.planeDim * planeNumZ;\r\n\r\n        this.terrainPlanes = [];\r\n        this.drawables = [];\r\n        this.ghosts = [];\r\n\r\n        this.level = level;\r\n        this.shouldExit = false;\r\n\r\n        switch (this.level) {\r\n            case Level.DESERT:\r\n                this.buildLevel();\r\n                break;\r\n            case Level.SNOW:\r\n                this.buildLevel2();\r\n                break;\r\n            case Level.SPOOKY:\r\n                this.buildLevel3();\r\n                break;\r\n        }\r\n    }\r\n\r\n    buildLevel3() {\r\n        let planeOrigin = vec3.create();\r\n        let planeOffset = vec3.create();\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            for (let z = 0; z < this.planeNumZ; z++) {\r\n                vec3.set(planeOffset, x, 0, z);\r\n                vec3.scaleAndAdd(planeOrigin, this.origin, planeOffset, this.planeDim);\r\n                // constructor will generate height fields\r\n                let heightModifier = function (height: number): number {\r\n                    return Math.pow(height, 0.25) * 5.0;\r\n                }\r\n                let tp = new TerrainPlane(planeOrigin, this.tileDim, this.tileNum, 0.2, heightModifier);\r\n                tp.setColor(SPOOKY_COLOR);\r\n                //tp.create();\r\n                // planes inactive at first; made active when updated\r\n                tp.isActive = false;\r\n                this.terrainPlanes.push(tp);\r\n            }\r\n        }\r\n        // \"stitch\" height fields at borders together\r\n        // X border: 0, planeNumX - 1\r\n        for (let z = 0; z < this.planeNumZ; z++) {\r\n            let tpA = this.terrainPlanes[this.getAbsIdx(0, z)];\r\n            let tpB = this.terrainPlanes[this.getAbsIdx(this.planeNumX - 1, z)];\r\n            // average heights\r\n            for (let j = 0; j < this.tileNum + 1; j++) {\r\n                let avgHeight = (tpB.heightField[this.tileNum][j] + tpA.heightField[0][j]) * 0.5;\r\n                tpB.heightField[this.tileNum][j] = avgHeight;\r\n                tpA.heightField[0][j] = avgHeight;\r\n            }\r\n        }\r\n        // Z border: 0, planeNumZ - 1\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            let tpA = this.terrainPlanes[this.getAbsIdx(x, 0)];\r\n            let tpB = this.terrainPlanes[this.getAbsIdx(x, this.planeNumZ - 1)];\r\n            // average heights\r\n            for (let j = 0; j < this.tileNum + 1; j++) {\r\n                let avgHeight = (tpB.heightField[j][this.tileNum] + tpA.heightField[j][0]) * 0.5;\r\n                tpB.heightField[j][this.tileNum] = avgHeight;\r\n                tpA.heightField[j][0] = avgHeight;\r\n            }\r\n        }\r\n\r\n        // actually create planes' VBOs, now that stitching is done\r\n        // also copy over to drawables\r\n        for (let i = 0; i < this.terrainPlanes.length; i++) {\r\n            this.terrainPlanes[i].create();\r\n            this.drawables.push(this.terrainPlanes[i]);\r\n        }\r\n\r\n        function addTrees(xClone: number, zClone: number, tp: TerrainPlane) {\r\n            let numClusters = Math.floor(Math.random() * 3.0 + 1.01);\r\n            for (let cluster = 0; cluster < numClusters; cluster++) {\r\n                vec3.scaleAndAdd(planeOrigin, this.origin, planeOffset, this.planeDim);\r\n                let baseInPlane = vec3.fromValues((Math.random() * 0.65 + 0.15) * this.planeDim, 0, (Math.random() * 0.65 + 0.15) * this.planeDim);\r\n                planeOrigin[0] += baseInPlane[0];\r\n                planeOrigin[2] += baseInPlane[2];\r\n                let treesInCluster = Math.floor(Math.random() * 4.0 + 1.01);\r\n                let treeOrigin = vec3.create();\r\n                let angle = Math.random() * Math.PI;\r\n                let angleIncrement = 2.0 * Math.PI / treesInCluster;\r\n                let posInPlane = vec3.create();\r\n                for (let i = 0; i < treesInCluster; i++) {\r\n                    decorations.useColor(SNOW_COLOR);\r\n                    angle += angleIncrement;\r\n                    vec3.set(treeOrigin, Math.cos(angle), 0, Math.sin(angle));\r\n                    vec3.scaleAndAdd(posInPlane, baseInPlane, treeOrigin, 1.6 * this.tileDim);\r\n                    vec3.scaleAndAdd(treeOrigin, planeOrigin, treeOrigin, 1.6 * this.tileDim);\r\n                    // find tile information\r\n                    let posTileIdx = vec2.create();\r\n                    let posInTile = modfVec2(vec2.fromValues(posInPlane[0], posInPlane[2]), this.tileDim, posTileIdx);\r\n                    // find and use height\r\n                    let height = this.getHeight(posInTile, posTileIdx, tp);\r\n                    treeOrigin[1] = this.origin[1] + height - 1.0;\r\n                    //let tree = new BasicTree(decorations);\r\n                    let tree = new Snowman(decorations, Math.floor(Math.random() * 2048), false);\r\n                    tree.initAlphabet();\r\n                    tree.resetTurtleStack(treeOrigin);\r\n                    tree.expandString();\r\n                    tree.expandString();\r\n                    tree.executeString();\r\n\r\n                    // add collider\r\n                    let collider = new Collider(vec2.fromValues(treeOrigin[0], treeOrigin[2]), 1.0);\r\n                    let xMin = Math.max(0, posTileIdx[0] - 1);\r\n                    let xMax = Math.min(this.tileNum - 1, posTileIdx[0] + 1);\r\n                    let zMin = Math.max(0, posTileIdx[1] - 1);\r\n                    let zMax = Math.min(this.tileNum - 1, posTileIdx[1] + 1);\r\n                    for (let tileX = xMin; tileX <= xMax; tileX++) {\r\n                        for (let tileZ = zMin; tileZ <= zMax; tileZ++) {\r\n                            // TODO: would be nice to check more precisely if\r\n                            // collider should go in this tile... but this\r\n                            // should help filter it a bit anyway\r\n                            tp.colliders[tileX][tileZ].push(collider);\r\n                        }\r\n                    }\r\n                    //this.colliders.push(new Collider(vec2.fromValues(treeOrigin[0], treeOrigin[2]), 1.0));\r\n\r\n                    // add clones to maintain continuity when looping\r\n                    if (xClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[0] += xClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                    if (zClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[2] += zClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                    if (xClone != 0 && zClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[0] += xClone;\r\n                        cloneOrigin[2] += zClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // add some decorations\r\n        let decorations = new Decoration();\r\n        let decorationMat = mat4.create();\r\n\r\n        // pick a plane in which to place the pyramid\r\n        let pyramidX = 2;\r\n        let pyramidZ = Math.floor(Math.random() * this.planeNumZ * 0.999);\r\n        console.log([\"pyramid: \", pyramidX, pyramidZ]);\r\n\r\n        // add decorations on each terrain plane\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            let xClone = this.totalDimX * ((x == 0) ? 1 : (x == this.planeNumX - 1) ? -1 : 0);\r\n            for (let z = 0; z < this.planeNumZ; z++) {\r\n                let zClone = this.totalDimZ * ((z == 0) ? 1 : (z == this.planeNumZ - 1) ? -1 : 0);\r\n                // find terrain plane so we can add colliders\r\n                let tp = this.terrainPlanes[this.getAbsIdx(x, z)];\r\n                // compute position of decoration\r\n                vec3.set(planeOffset, x, 0, z);\r\n                addTrees.call(this, xClone, zClone, tp);\r\n            }\r\n        }\r\n\r\n        decorations.create();\r\n        this.drawables.push(decorations);\r\n\r\n        for (let i = 0; i < NUM_GHOSTS; i++) {\r\n            let ghostDecorations = new Decoration();\r\n\r\n            let ghost = new Ghost(ghostDecorations, Math.floor(Math.random() * 512));\r\n            ghost.initAlphabet();\r\n            ghost.resetTurtleStack(vec3.fromValues(0, 1, 0));\r\n            ghost.expandString();\r\n            ghost.expandString();\r\n            ghost.executeString();\r\n\r\n            let xzAngle = Math.random() * 2.0 * Math.PI;\r\n            vec3.copy(ghost.playerOffset, vec3.fromValues(Math.cos(xzAngle), 0, Math.sin(xzAngle)));\r\n            vec3.scale(ghost.playerOffset, ghost.playerOffset, 50.0 + Math.random() * 10.0);\r\n\r\n            ghostDecorations.create();\r\n            this.drawables.push(ghostDecorations);\r\n\r\n            this.ghosts.push(ghost);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    buildLevel2() {\r\n        let planeOrigin = vec3.create();\r\n        let planeOffset = vec3.create();\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            for (let z = 0; z < this.planeNumZ; z++) {\r\n                vec3.set(planeOffset, x, 0, z);\r\n                vec3.scaleAndAdd(planeOrigin, this.origin, planeOffset, this.planeDim);\r\n                // constructor will generate height fields\r\n                let heightModifier = function (height: number): number {\r\n                    return perlinGain(clamp(height + 0.2, 0.0, 1.0), 0.12) * 5.0;\r\n                }\r\n                let tp = new TerrainPlane(planeOrigin, this.tileDim, this.tileNum, 0.1, heightModifier);\r\n                tp.setColor(SNOW_COLOR);\r\n                //tp.create();\r\n                // planes inactive at first; made active when updated\r\n                tp.isActive = false;\r\n                this.terrainPlanes.push(tp);\r\n            }\r\n        }\r\n        // \"stitch\" height fields at borders together\r\n        // X border: 0, planeNumX - 1\r\n        for (let z = 0; z < this.planeNumZ; z++) {\r\n            let tpA = this.terrainPlanes[this.getAbsIdx(0, z)];\r\n            let tpB = this.terrainPlanes[this.getAbsIdx(this.planeNumX - 1, z)];\r\n            // average heights\r\n            for (let j = 0; j < this.tileNum + 1; j++) {\r\n                let avgHeight = (tpB.heightField[this.tileNum][j] + tpA.heightField[0][j]) * 0.5;\r\n                tpB.heightField[this.tileNum][j] = avgHeight;\r\n                tpA.heightField[0][j] = avgHeight;\r\n            }\r\n        }\r\n        // Z border: 0, planeNumZ - 1\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            let tpA = this.terrainPlanes[this.getAbsIdx(x, 0)];\r\n            let tpB = this.terrainPlanes[this.getAbsIdx(x, this.planeNumZ - 1)];\r\n            // average heights\r\n            for (let j = 0; j < this.tileNum + 1; j++) {\r\n                let avgHeight = (tpB.heightField[j][this.tileNum] + tpA.heightField[j][0]) * 0.5;\r\n                tpB.heightField[j][this.tileNum] = avgHeight;\r\n                tpA.heightField[j][0] = avgHeight;\r\n            }\r\n        }\r\n\r\n        // actually create planes' VBOs, now that stitching is done\r\n        // also copy over to drawables\r\n        for (let i = 0; i < this.terrainPlanes.length; i++) {\r\n            this.terrainPlanes[i].create();\r\n            this.drawables.push(this.terrainPlanes[i]);\r\n        }\r\n\r\n        function addTrees(xClone: number, zClone: number, tp: TerrainPlane) {\r\n            let numClusters = Math.floor(Math.random() * 3.0 + 1.01);\r\n            for (let cluster = 0; cluster < numClusters; cluster++) {\r\n                vec3.scaleAndAdd(planeOrigin, this.origin, planeOffset, this.planeDim);\r\n                let baseInPlane = vec3.fromValues((Math.random() * 0.65 + 0.15) * this.planeDim, 0, (Math.random() * 0.65 + 0.15) * this.planeDim);\r\n                planeOrigin[0] += baseInPlane[0];\r\n                planeOrigin[2] += baseInPlane[2];\r\n                let treesInCluster = Math.floor(Math.random() * 4.0 + 1.01);\r\n                let treeOrigin = vec3.create();\r\n                let angle = Math.random() * Math.PI;\r\n                let angleIncrement = 2.0 * Math.PI / treesInCluster;\r\n                let posInPlane = vec3.create();\r\n                for (let i = 0; i < treesInCluster; i++) {\r\n                    decorations.useColor(SNOW_COLOR);\r\n                    angle += angleIncrement;\r\n                    vec3.set(treeOrigin, Math.cos(angle), 0, Math.sin(angle));\r\n                    vec3.scaleAndAdd(posInPlane, baseInPlane, treeOrigin, 1.6 * this.tileDim);\r\n                    vec3.scaleAndAdd(treeOrigin, planeOrigin, treeOrigin, 1.6 * this.tileDim);\r\n                    // find tile information\r\n                    let posTileIdx = vec2.create();\r\n                    let posInTile = modfVec2(vec2.fromValues(posInPlane[0], posInPlane[2]), this.tileDim, posTileIdx);\r\n                    // find and use height\r\n                    let height = this.getHeight(posInTile, posTileIdx, tp);\r\n                    treeOrigin[1] = this.origin[1] + height - 1.0;\r\n                    //let tree = new BasicTree(decorations);\r\n                    let tree = new Snowman(decorations, Math.floor(Math.random() * 2048), false);\r\n                    tree.initAlphabet();\r\n                    tree.resetTurtleStack(treeOrigin);\r\n                    tree.expandString();\r\n                    tree.expandString();\r\n                    tree.executeString();\r\n\r\n                    // add collider\r\n                    let collider = new Collider(vec2.fromValues(treeOrigin[0], treeOrigin[2]), 1.0);\r\n                    let xMin = Math.max(0, posTileIdx[0] - 1);\r\n                    let xMax = Math.min(this.tileNum - 1, posTileIdx[0] + 1);\r\n                    let zMin = Math.max(0, posTileIdx[1] - 1);\r\n                    let zMax = Math.min(this.tileNum - 1, posTileIdx[1] + 1);\r\n                    for (let tileX = xMin; tileX <= xMax; tileX++) {\r\n                        for (let tileZ = zMin; tileZ <= zMax; tileZ++) {\r\n                            // TODO: would be nice to check more precisely if\r\n                            // collider should go in this tile... but this\r\n                            // should help filter it a bit anyway\r\n                            tp.colliders[tileX][tileZ].push(collider);\r\n                        }\r\n                    }\r\n                    //this.colliders.push(new Collider(vec2.fromValues(treeOrigin[0], treeOrigin[2]), 1.0));\r\n\r\n                    // add clones to maintain continuity when looping\r\n                    if (xClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[0] += xClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                    if (zClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[2] += zClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                    if (xClone != 0 && zClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[0] += xClone;\r\n                        cloneOrigin[2] += zClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function addPyramid(xClone: number, zClone: number, tp: TerrainPlane) {\r\n            // add just pyramid\r\n            vec3.scaleAndAdd(planeOrigin, this.origin, planeOffset, this.planeDim);\r\n            let baseInPlane = vec3.fromValues((Math.random() * 0.15 + 0.45) * this.planeDim, 0, (Math.random() * 0.15 + 0.45) * this.planeDim);\r\n            planeOrigin[0] += baseInPlane[0];\r\n            planeOrigin[2] += baseInPlane[2];\r\n\r\n            let tree = new Snowman(decorations, Math.floor(Math.random() * 2048), true);\r\n            tree.initAlphabet();\r\n            tree.resetTurtleStack(planeOrigin);\r\n            tree.expandString();\r\n            tree.expandString();\r\n            tree.executeString();\r\n            // TODO: add pyramid collider\r\n            tp.bigColliders.push(new Collider(vec2.fromValues(planeOrigin[0], planeOrigin[2]), 15));\r\n            // add clones to maintain continuity when looping\r\n            if (xClone != 0) {\r\n                let cloneOrigin = vec3.clone(planeOrigin);\r\n                cloneOrigin[0] += xClone;\r\n                tree.resetTurtleStack(cloneOrigin);\r\n                tree.executeString();\r\n            }\r\n            if (zClone != 0) {\r\n                let cloneOrigin = vec3.clone(planeOrigin);\r\n                cloneOrigin[2] += zClone;\r\n                tree.resetTurtleStack(cloneOrigin);\r\n                tree.executeString();\r\n            }\r\n            if (xClone != 0 && zClone != 0) {\r\n                let cloneOrigin = vec3.clone(planeOrigin);\r\n                cloneOrigin[0] += xClone;\r\n                cloneOrigin[2] += zClone;\r\n                tree.resetTurtleStack(cloneOrigin);\r\n                tree.executeString();\r\n            }\r\n        }\r\n\r\n        // add some decorations\r\n        let decorations = new Decoration();\r\n        let decorationMat = mat4.create();\r\n\r\n        // pick a plane in which to place the pyramid\r\n        let pyramidX = 2;\r\n        let pyramidZ = Math.floor(Math.random() * this.planeNumZ * 0.999);\r\n        console.log([\"pyramid: \", pyramidX, pyramidZ]);\r\n\r\n        // add decorations on each terrain plane\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            let xClone = this.totalDimX * ((x == 0) ? 1 : (x == this.planeNumX - 1) ? -1 : 0);\r\n            for (let z = 0; z < this.planeNumZ; z++) {\r\n                let zClone = this.totalDimZ * ((z == 0) ? 1 : (z == this.planeNumZ - 1) ? -1 : 0);\r\n                // find terrain plane so we can add colliders\r\n                let tp = this.terrainPlanes[this.getAbsIdx(x, z)];\r\n                // compute position of decoration\r\n                vec3.set(planeOffset, x, 0, z);\r\n                if (x == pyramidX && z == pyramidZ) {\r\n                    addPyramid.call(this, xClone, zClone, tp);\r\n                }\r\n                else {\r\n                    addTrees.call(this, xClone, zClone, tp);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        decorations.create();\r\n        this.drawables.push(decorations);\r\n    }\r\n\r\n    buildLevel() {\r\n        let planeOrigin = vec3.create();\r\n        let planeOffset = vec3.create();\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            for (let z = 0; z < this.planeNumZ; z++) {\r\n                vec3.set(planeOffset, x, 0, z);\r\n                vec3.scaleAndAdd(planeOrigin, this.origin, planeOffset, this.planeDim);\r\n                // constructor will generate height fields\r\n                let heightModifier = function (height: number): number {\r\n                    return height * 5.0;\r\n                }\r\n                let tp = new TerrainPlane(planeOrigin, this.tileDim, this.tileNum, 1.0, heightModifier);\r\n                tp.setColor(TERRAIN_COLOR);\r\n                //tp.create();\r\n                // planes inactive at first; made active when updated\r\n                tp.isActive = false;\r\n                this.terrainPlanes.push(tp);\r\n            }\r\n        }\r\n        // \"stitch\" height fields at borders together\r\n        // X border: 0, planeNumX - 1\r\n        for (let z = 0; z < this.planeNumZ; z++) {\r\n            let tpA = this.terrainPlanes[this.getAbsIdx(0, z)];\r\n            let tpB = this.terrainPlanes[this.getAbsIdx(this.planeNumX - 1, z)];\r\n            // just copy one subset of height field to the other\r\n            for (let j = 0; j < this.tileNum + 1; j++) {\r\n                tpB.heightField[this.tileNum][j] = tpA.heightField[0][j];\r\n            }\r\n        }\r\n        // Z border: 0, planeNumZ - 1\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            let tpA = this.terrainPlanes[this.getAbsIdx(x, 0)];\r\n            let tpB = this.terrainPlanes[this.getAbsIdx(x, this.planeNumZ - 1)];\r\n            // just copy one subset of height field to the other\r\n            // could try something else, like averaging, but this seems to work\r\n            for (let j = 0; j < this.tileNum + 1; j++) {\r\n                tpB.heightField[j][this.tileNum] = tpA.heightField[j][0];\r\n            }\r\n        }\r\n\r\n        // actually create planes' VBOs, now that stitching is done\r\n        // also copy over to drawables\r\n        for (let i = 0; i < this.terrainPlanes.length; i++) {\r\n            this.terrainPlanes[i].create();\r\n            this.drawables.push(this.terrainPlanes[i]);\r\n        }\r\n\r\n        function addTrees(xClone: number, zClone: number, tp: TerrainPlane) {\r\n            let numClusters = Math.floor(Math.random() * 3.0 + 1.01);\r\n            for (let cluster = 0; cluster < numClusters; cluster++) {\r\n                vec3.scaleAndAdd(planeOrigin, this.origin, planeOffset, this.planeDim);\r\n                let baseInPlane = vec3.fromValues((Math.random() * 0.65 + 0.15) * this.planeDim, 0, (Math.random() * 0.65 + 0.15) * this.planeDim);\r\n                planeOrigin[0] += baseInPlane[0];\r\n                planeOrigin[2] += baseInPlane[2];\r\n                let treesInCluster = Math.floor(Math.random() * 4.0 + 1.01);\r\n                let treeOrigin = vec3.create();\r\n                let angle = Math.random() * Math.PI;\r\n                let angleIncrement = 2.0 * Math.PI / treesInCluster;\r\n                let posInPlane = vec3.create();\r\n                for (let i = 0; i < treesInCluster; i++) {\r\n                    decorations.useColor(TREE_COLORS[Math.floor(Math.random() * TREE_COLORS.length * 0.999)]);\r\n                    angle += angleIncrement;\r\n                    vec3.set(treeOrigin, Math.cos(angle), 0, Math.sin(angle));\r\n                    vec3.scaleAndAdd(posInPlane, baseInPlane, treeOrigin, 1.6 * this.tileDim);\r\n                    vec3.scaleAndAdd(treeOrigin, planeOrigin, treeOrigin, 1.6 * this.tileDim);\r\n                    let tree = new BasicTree(decorations);\r\n                    tree.initAlphabet();\r\n                    tree.resetTurtleStack(treeOrigin);\r\n                    tree.expandString();\r\n                    tree.expandString();\r\n                    tree.executeString();\r\n\r\n                    // add collider\r\n                    let collider = new Collider(vec2.fromValues(treeOrigin[0], treeOrigin[2]), 1.0);\r\n                    let posTileIdx = vec2.fromValues(Math.floor(posInPlane[0] / this.tileDim), Math.floor(posInPlane[2] / this.tileDim));\r\n                    let xMin = Math.max(0, posTileIdx[0] - 1);\r\n                    let xMax = Math.min(this.tileNum - 1, posTileIdx[0] + 1);\r\n                    let zMin = Math.max(0, posTileIdx[1] - 1);\r\n                    let zMax = Math.min(this.tileNum - 1, posTileIdx[1] + 1);\r\n                    for (let tileX = xMin; tileX <= xMax; tileX++) {\r\n                        for (let tileZ = zMin; tileZ <= zMax; tileZ++) {\r\n                            // TODO: would be nice to check more precisely if\r\n                            // collider should go in this tile... but this\r\n                            // should help filter it a bit anyway\r\n                            tp.colliders[tileX][tileZ].push(collider);\r\n                        }\r\n                    }\r\n                    //this.colliders.push(new Collider(vec2.fromValues(treeOrigin[0], treeOrigin[2]), 1.0));\r\n\r\n                    // add clones to maintain continuity when looping\r\n                    if (xClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[0] += xClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                    if (zClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[2] += zClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                    if (xClone != 0 && zClone != 0) {\r\n                        let cloneOrigin = vec3.clone(treeOrigin);\r\n                        cloneOrigin[0] += xClone;\r\n                        cloneOrigin[2] += zClone;\r\n                        tree.resetTurtleStack(cloneOrigin);\r\n                        tree.executeString();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO\r\n        function addPyramid(xClone: number, zClone: number, tp: TerrainPlane) {\r\n            decorations.useColor(PYRAMID_COLOR);\r\n            // add just pyramid\r\n            vec3.scaleAndAdd(planeOrigin, this.origin, planeOffset, this.planeDim);\r\n            let baseInPlane = vec3.fromValues((Math.random() * 0.15 + 0.45) * this.planeDim, 0, (Math.random() * 0.15 + 0.45) * this.planeDim);\r\n            planeOrigin[0] += baseInPlane[0];\r\n            planeOrigin[2] += baseInPlane[2];\r\n            let pyramidMat = mat4.create();\r\n            mat4.fromTranslation(pyramidMat, planeOrigin);\r\n\r\n            decorations.addPyramid(pyramidMat, 20, 30);\r\n            // TODO: add pyramid collider\r\n            tp.bigColliders.push(new SquareCollider(vec2.fromValues(planeOrigin[0], planeOrigin[2]), 20));\r\n            // add clones to maintain continuity when looping\r\n            if (xClone != 0) {\r\n                let cloneOrigin = vec3.clone(planeOrigin);\r\n                cloneOrigin[0] += xClone;\r\n                mat4.fromTranslation(pyramidMat, cloneOrigin);\r\n                decorations.addPyramid(pyramidMat, 20, 30);\r\n            }\r\n            if (zClone != 0) {\r\n                let cloneOrigin = vec3.clone(planeOrigin);\r\n                cloneOrigin[2] += zClone;\r\n                mat4.fromTranslation(pyramidMat, cloneOrigin);\r\n                decorations.addPyramid(pyramidMat, 20, 30);\r\n            }\r\n            if (xClone != 0 && zClone != 0) {\r\n                let cloneOrigin = vec3.clone(planeOrigin);\r\n                cloneOrigin[0] += xClone;\r\n                cloneOrigin[2] += zClone;\r\n                mat4.fromTranslation(pyramidMat, cloneOrigin);\r\n                decorations.addPyramid(pyramidMat, 20, 30);\r\n            }\r\n        }\r\n\r\n        // add some decorations\r\n        let decorations = new Decoration();\r\n        let decorationMat = mat4.create();\r\n\r\n        // pick a plane in which to place the pyramid\r\n        let pyramidX = 2;\r\n        let pyramidZ = Math.floor(Math.random() * this.planeNumZ * 0.999);\r\n        console.log([\"pyramid: \", pyramidX, pyramidZ]);\r\n\r\n        // add decorations on each terrain plane\r\n        for (let x = 0; x < this.planeNumX; x++) {\r\n            let xClone = this.totalDimX * ((x == 0) ? 1 : (x == this.planeNumX - 1) ? -1 : 0);\r\n            for (let z = 0; z < this.planeNumZ; z++) {\r\n                let zClone = this.totalDimZ * ((z == 0) ? 1 : (z == this.planeNumZ - 1) ? -1 : 0);\r\n                // find terrain plane so we can add colliders\r\n                let tp = this.terrainPlanes[this.getAbsIdx(x, z)];\r\n                // compute position of decoration\r\n                vec3.set(planeOffset, x, 0, z);\r\n                if (x == pyramidX && z == pyramidZ) {\r\n                    addPyramid.call(this, xClone, zClone, tp);\r\n                }\r\n                else {\r\n                    addTrees.call(this, xClone, zClone, tp);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        decorations.create();\r\n        this.drawables.push(decorations);\r\n    }\r\n\r\n    getAbsIdx(x: number, z: number): number {\r\n        return x * this.planeNumZ + z;\r\n    }\r\n\r\n    getLoopedPosition(pos: vec3) {\r\n        return vec2.fromValues(mod(pos[0], this.totalDimX), mod(pos[2], this.totalDimZ));\r\n    }\r\n\r\n    getLoopedPositionVec2(pos: vec2) {\r\n        return vec2.fromValues(mod(pos[0], this.totalDimX), mod(pos[1], this.totalDimZ));\r\n    }\r\n\r\n    getHeight(posInTile: vec2, posTileIdx: vec2, tp: TerrainPlane): number {\r\n        // do barycentric interpolation to find height\r\n        let a = vec2.fromValues(0, 0);\r\n        let b: vec2;\r\n        let c = vec2.fromValues(this.tileDim, this.tileDim);\r\n        let heights: vec3;\r\n        // which triangle are we in? 012 or 023? (see TerrainPlane)\r\n        if (posInTile[0] > posInTile[1]) {\r\n            // triangle is 012\r\n            b = vec2.fromValues(this.tileDim, 0);\r\n            heights = vec3.fromValues(\r\n                tp.heightField[posTileIdx[0]][posTileIdx[1]],\r\n                tp.heightField[posTileIdx[0] + 1][posTileIdx[1]],\r\n                tp.heightField[posTileIdx[0] + 1][posTileIdx[1] + 1]\r\n            );\r\n        }\r\n        else {\r\n            // triangle is 023\r\n            b = vec2.fromValues(0, this.tileDim);\r\n            heights = vec3.fromValues(\r\n                tp.heightField[posTileIdx[0]][posTileIdx[1]],\r\n                tp.heightField[posTileIdx[0]][posTileIdx[1] + 1],\r\n                tp.heightField[posTileIdx[0] + 1][posTileIdx[1] + 1]\r\n            );\r\n        }\r\n        let weights = baryInterp(a, b, c, posInTile);\r\n        return vec3.dot(weights, heights);\r\n    }\r\n\r\n    getHeightFromRawPos(pos: vec3): number {\r\n        let posVec2 = vec2.fromValues(pos[0], pos[2]);\r\n        // position after \"looping\" around terrain\r\n        let posLooped = this.getLoopedPositionVec2(posVec2);\r\n        // XZ \"indices\" of plane where player is\r\n        let posPlaneIdx = vec2.create();\r\n        let posInPlane = modfVec2(posLooped, this.planeDim, posPlaneIdx);\r\n        // XZ \"indices\" of tile within plane\r\n        let posTileIdx = vec2.create();\r\n        let posInTile = modfVec2(posInPlane, this.tileDim, posTileIdx);\r\n        // get plane\r\n        let tp = this.terrainPlanes[this.getAbsIdx(posPlaneIdx[0], posPlaneIdx[1])];\r\n        return this.getHeight(posInTile, posTileIdx, tp);\r\n    }\r\n\r\n    // takes in Player's \"target\" position (where they would move\r\n    // if terrain was flat) and returns target position shifted to\r\n    // height coherent with terrain\r\n    collide(target: vec3, startPos: vec3, targetSpeed: number): vec3 {\r\n        // janky collision\r\n        // doesn't work for things too close to edge of loop rectangle\r\n        let posAfterCollision: vec2;\r\n        let targetVec2 = vec2.fromValues(target[0], target[2]);\r\n        // position after \"looping\" around terrain\r\n        let posLooped = this.getLoopedPositionVec2(targetVec2);\r\n        // XZ \"indices\" of plane where player is\r\n        let posPlaneIdx = vec2.create();\r\n        let posInPlane = modfVec2(posLooped, this.planeDim, posPlaneIdx);\r\n        // XZ \"indices\" of tile within plane\r\n        let posTileIdx = vec2.create();\r\n        let posInTile = modfVec2(posInPlane, this.tileDim, posTileIdx);\r\n        // get plane\r\n        let tp = this.terrainPlanes[this.getAbsIdx(posPlaneIdx[0], posPlaneIdx[1])];\r\n        let collided = false;\r\n        let colliders = tp.colliders[posTileIdx[0]][posTileIdx[1]];\r\n        for (let i = 0; i < colliders.length; i++) {\r\n            let collision = colliders[i].collide(targetVec2, 0.5);\r\n            if (collision == null) {\r\n                continue;\r\n            }\r\n            //console.log(\"coll\");\r\n            collided = true;\r\n            posAfterCollision = collision;\r\n            //posLooped = this.getLoopedPosition(startPos);\r\n        }\r\n        colliders = tp.bigColliders;\r\n        for (let i = 0; i < colliders.length; i++) {\r\n            let collision = colliders[i].collide(targetVec2, 0.5);\r\n            if (collision == null) {\r\n                continue;\r\n            }\r\n            collided = true;\r\n            posAfterCollision = collision;\r\n        }\r\n        if (!collided) {\r\n            posAfterCollision = targetVec2;\r\n        }\r\n        else {\r\n            // update with collided position\r\n            // position after \"looping\" around terrain\r\n            posLooped = this.getLoopedPositionVec2(posAfterCollision);\r\n            // XZ \"indices\" of plane where player is\r\n            posInPlane = modfVec2(posLooped, this.planeDim, posPlaneIdx);\r\n            // XZ \"indices\" of tile within plane\r\n            posInTile = modfVec2(posInPlane, this.tileDim, posTileIdx);\r\n            // get plane\r\n            tp = this.terrainPlanes[this.getAbsIdx(posPlaneIdx[0], posPlaneIdx[1])];\r\n        }\r\n        //console.log(posPlaneIdx);\r\n        let height = this.getHeight(posInTile, posTileIdx, tp);\r\n        let newTarget = vec3.fromValues(posAfterCollision[0], this.origin[1] + height, posAfterCollision[1]);\r\n        // find direction towards terrain-aware target, adjust its length\r\n        // NOTE: this may not work if tiles are too small relative to step size\r\n        let movDir = vec3.create();\r\n        let startPosLoopedVec2 = this.getLoopedPosition(startPos);\r\n        let startPosLooped = vec3.fromValues(startPosLoopedVec2[0], startPos[1], startPosLoopedVec2[1]);\r\n        vec3.subtract(movDir, newTarget, startPos);\r\n        // skip speed adjustment if unnecessary\r\n        if (collided && vec3.length(movDir) <= targetSpeed) {\r\n            // tell ghost about player movement\r\n            for (let g = 0; g < this.ghosts.length; g++) {\r\n                let ghost = this.ghosts[g];\r\n                vec3.scaleAndAdd(ghost.playerOffset, ghost.playerOffset, movDir, -1);\r\n            }\r\n            return newTarget;\r\n        }\r\n        vec3.normalize(movDir, movDir);\r\n        vec3.scaleAndAdd(newTarget, startPos, movDir, targetSpeed);\r\n        // tell ghost about player movement\r\n        for (let g = 0; g < this.ghosts.length; g++) {\r\n            let ghost = this.ghosts[g];\r\n            vec3.scaleAndAdd(ghost.playerOffset, ghost.playerOffset, movDir, -targetSpeed);\r\n        }\r\n        return newTarget;\r\n    }\r\n\r\n    // makes planes active or not depending on player's position\r\n    updatePlanes(playerPos: vec3, deltaTime: number) {\r\n        // position after \"looping\" around terrain\r\n        // already looped in collide()\r\n        //let posLooped = vec2.fromValues(mod(playerPos[0], this.totalDimX), mod(playerPos[2], this.totalDimZ));\r\n        //vec3.set(playerPos, posLooped[0], playerPos[1], posLooped[1]);\r\n        let posLooped = vec2.fromValues(playerPos[0], playerPos[2]);\r\n        // XZ \"indices\" of plane where player is\r\n        let posPlane = vec2.fromValues(Math.floor(posLooped[0] / this.planeDim), Math.floor(posLooped[1] / this.planeDim));\r\n        // set all to inactive\r\n        // TODO: could optimize to only update ones that need to be updated\r\n        for (let i = 0; i < this.terrainPlanes.length; i++) {\r\n            this.terrainPlanes[i].isActive = false;\r\n        }\r\n        // make 3x3 grid around player active, deactivate other planes\r\n        for (let x = -1; x <= 1; x++) {\r\n            let xIdx = posPlane[0] + x;\r\n            // index may not be valid for array, so correct if needed\r\n            let xUnderflow = xIdx < 0;\r\n            let xOverflow = xIdx >= this.planeNumX;\r\n            if (xUnderflow) {\r\n                xIdx += this.planeNumX;\r\n            }\r\n            else if (xOverflow) {\r\n                xIdx -= this.planeNumX;\r\n            }\r\n            for (let z = -1; z <= 1; z++) {\r\n                let zIdx = posPlane[1] + z;\r\n                // index may not be valid for array, so correct if needed\r\n                let zUnderflow = zIdx < 0;\r\n                let zOverflow = zIdx >= this.planeNumZ;\r\n                if (zUnderflow) {\r\n                    zIdx += this.planeNumZ;\r\n                }\r\n                else if (zOverflow) {\r\n                    zIdx -= this.planeNumZ;\r\n                }\r\n\r\n                // now have good indices\r\n                this.terrainPlanes[this.getAbsIdx(xIdx, zIdx)].isActive = true;\r\n                let xTranslate =\r\n                    xUnderflow ? -this.totalDimX :\r\n                    xOverflow ? this.totalDimX : 0;\r\n                let zTranslate =\r\n                    zUnderflow ? -this.totalDimZ :\r\n                    zOverflow ? this.totalDimZ : 0;\r\n                mat4.fromTranslation(this.terrainPlanes[xIdx * this.planeNumZ + zIdx].modelMatrix, vec3.fromValues(xTranslate, 0, zTranslate));\r\n            }\r\n        }\r\n        // check for ghost collision\r\n        let avoidDirs: Array<vec3> = new Array<vec3>(this.ghosts.length); // directions used for ghosts to avoid each other\r\n        for (let g = 0; g < this.ghosts.length; g++) {\r\n            avoidDirs[g] = vec3.fromValues(0, 0, 0);\r\n        }\r\n        for (let g = 0; g < this.ghosts.length; g++) {\r\n            let ghost = this.ghosts[g];\r\n            // O(n^2)... O(nn)oo...\r\n            for (let otherG = g + 1; otherG < this.ghosts.length; otherG++) {\r\n                let otherGhost = this.ghosts[otherG];\r\n                let avoidDir = vec3.create();\r\n                vec3.subtract(avoidDir, ghost.playerOffset, otherGhost.playerOffset);\r\n                let lenSqr = vec3.dot(avoidDir, avoidDir);\r\n                vec3.normalize(avoidDir, avoidDir);\r\n                // compute dot product to see how close to parallel they are\r\n                let normPlayerOffset = vec3.clone(ghost.playerOffset);\r\n                vec3.normalize(normPlayerOffset, normPlayerOffset);\r\n                let dot = vec3.dot(avoidDir, normPlayerOffset);\r\n                // if very parallel, decrease effect\r\n                // if very far, decrease effect\r\n                let scale = (1.0 - Math.abs(dot)) / lenSqr;\r\n                vec3.scaleAndAdd(avoidDirs[g], avoidDirs[g], avoidDir, scale);\r\n                vec3.scaleAndAdd(avoidDirs[otherG], avoidDirs[otherG], avoidDir, -scale);\r\n            }\r\n            // move ghost towards player\r\n            let toPlayer = vec3.clone(ghost.playerOffset);\r\n            vec3.normalize(toPlayer, toPlayer);\r\n            vec3.scaleAndAdd(ghost.playerOffset, ghost.playerOffset, toPlayer, -deltaTime * 4.0);\r\n            // move ghost away from other ghosts\r\n            vec3.add(ghost.playerOffset, ghost.playerOffset, avoidDirs[g]);\r\n            // find actual ghost position\r\n            let ghostPos = vec3.create();\r\n            vec3.add(ghostPos, playerPos, ghost.playerOffset);\r\n            // make ghost bob\r\n            ghostPos[1] += 0.5 + 0.5 * Math.cos(ghost.bobValue * ghost.bobFrequency);\r\n            ghost.bobValue += deltaTime;\r\n            // make ghost face player\r\n            vec3.scale(toPlayer, toPlayer, -1);\r\n            toPlayer[1] = 0;\r\n            vec3.normalize(toPlayer, toPlayer);\r\n            let q = quat.create();\r\n            quat.rotationTo(q, vec3.fromValues(0, 0, 1), toPlayer);\r\n            let ghostMat = mat4.create();\r\n            mat4.fromRotationTranslation(ghostMat, q, ghostPos);\r\n            //mat4.translate(ghostMat, ghostMat, ghostPos);\r\n            ghost.setModelMatrix(ghostMat);\r\n            // treat collision with ghost as reason to exit\r\n            if (vec3.length(ghost.playerOffset) < 1.6) {\r\n                this.shouldExit = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // move ghosts away from player\r\n    resetGhosts() {\r\n        for (let i = 0; i < this.ghosts.length; i++) {\r\n            let ghost = this.ghosts[i];\r\n            let xzAngle = Math.random() * 2.0 * Math.PI;\r\n            vec3.copy(ghost.playerOffset, vec3.fromValues(Math.cos(xzAngle), 0, Math.sin(xzAngle)));\r\n            vec3.scale(ghost.playerOffset, ghost.playerOffset, 50.0 + Math.random() * 10.0);\r\n        }\r\n    }\r\n\r\n    // returns whether ray hits a \"big collider\"\r\n    raymarchBigColliders(origin: vec3, direction: vec3): boolean {\r\n        let originVec2 = vec2.fromValues(origin[0], origin[2]);\r\n        // position after \"looping\" around terrain\r\n        let posLooped = this.getLoopedPositionVec2(originVec2);\r\n        // XZ \"indices\" of plane where player is\r\n        let posPlaneIdx = vec2.create();\r\n        let posInPlane = modfVec2(posLooped, this.planeDim, posPlaneIdx);\r\n        // XZ \"indices\" of tile within plane\r\n        let posTileIdx = vec2.create();\r\n        let posInTile = modfVec2(posInPlane, this.tileDim, posTileIdx);\r\n        // get plane\r\n        let tp = this.terrainPlanes[this.getAbsIdx(posPlaneIdx[0], posPlaneIdx[1])];\r\n        for (let bc = 0; bc < tp.bigColliders.length; bc++) {\r\n            let collider = tp.bigColliders[bc];\r\n            let t = 0.0;\r\n            let p = vec3.create();\r\n            for (let i = 0; i < 5; i++) {\r\n                vec3.scaleAndAdd(p, origin, direction, t);\r\n                if (collider.collide(vec2.fromValues(p[0], p[2]), 0.1) !== null) {\r\n                    this.shouldExit = true;\r\n                    return true;\r\n                }\r\n                t += this.tileDim * 0.3;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n};\r\n\r\nexport default Terrain;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/Terrain.ts","import {vec3, vec4, mat4, quat} from 'gl-matrix';\r\nimport Turtle from './Turtle';\r\nimport {LSymbol, ExpansionRule} from './LSymbol';\r\nimport Decoration from '../geometry/Decoration';\r\nimport {BRANCH_COLOR} from '../geometry/Decoration';\r\nimport LString from './LString';\r\nimport {lRandom} from './LRandom';\r\n\r\nclass LSystem {\r\n    alphabet: Array<LSymbol>;\r\n    turtleStack: Array<Turtle>;\r\n    decoration: Decoration;\r\n    axiom: Array<LSymbol>;\r\n    lstring: LString;\r\n    prismSides: number;\r\n\r\n    constructor() {\r\n        //this.alphabet = [];\r\n        this.turtleStack = [new Turtle()];\r\n        this.decoration = new Decoration();\r\n        this.axiom = [];\r\n        this.lstring = new LString([]);\r\n        this.initAlphabet();\r\n        this.prismSides = 8;\r\n    }\r\n\r\n    setAxiom(axiomArray: Array<LSymbol>) {\r\n        this.axiom = axiomArray.slice();\r\n        this.lstring.fromArray(axiomArray);\r\n    }\r\n\r\n    getTopTurtle(): Turtle {\r\n        return this.turtleStack[this.turtleStack.length - 1];\r\n    }\r\n\r\n    useColor(color: vec4) {\r\n        this.decoration.useColor(color);\r\n    }\r\n\r\n    addPrismAtTurtle(turtle: Turtle) {\r\n        if (!this.decoration.isSafeToGrow()) {\r\n            return;\r\n        }\r\n        let trans = turtle.getTransformationToTurtle();\r\n        this.decoration.addPrism(trans, this.prismSides, turtle.scaleBottom, turtle.scaleTop, 1);\r\n        turtle.scaleBottom = turtle.scaleTop;\r\n        turtle.scaleTop *= 0.99;\r\n    }\r\n\r\n    addScaledPrismAtTurtle(turtle: Turtle, scaleHeight: number) {\r\n        if (!this.decoration.isSafeToGrow()) {\r\n            return;\r\n        }\r\n        let trans = turtle.getTransformationToTurtle();\r\n        this.decoration.addNormalCorrectPrism(trans, this.prismSides, turtle.scaleBottom, turtle.scaleTop, scaleHeight);\r\n        turtle.scaleBottom = turtle.scaleTop;\r\n        turtle.scaleTop *= 0.8;\r\n    }\r\n\r\n    // does not shrink thickness\r\n    addScaledPrismAtTurtleNoShrink(turtle: Turtle, scaleHeight: number) {\r\n        if (!this.decoration.isSafeToGrow()) {\r\n            return;\r\n        }\r\n        let trans = turtle.getTransformationToTurtle();\r\n        this.decoration.addNormalCorrectPrism(trans, this.prismSides, turtle.scaleBottom, turtle.scaleTop, scaleHeight);\r\n    }\r\n\r\n    addMeshAtTurtle(turtle: Turtle, scale: vec3, mesh: any) {\r\n        if (!this.decoration.isSafeToGrow()) {\r\n            return;\r\n        }\r\n        let trans = turtle.getTransformationToTurtle();\r\n        mat4.scale(trans, trans, scale);\r\n        this.decoration.addMesh(mesh, trans);\r\n    }\r\n\r\n    addMeshAtTurtleRotation(turtle: Turtle, scale: vec3, rot: mat4, mesh: any) {\r\n        if (!this.decoration.isSafeToGrow()) {\r\n            return;\r\n        }\r\n        let trans = turtle.getTransformationToTurtle();\r\n        mat4.multiply(trans, trans, rot);\r\n        mat4.scale(trans, trans, scale);\r\n        this.decoration.addMesh(mesh, trans);\r\n    }\r\n\r\n    initAlphabet() {\r\n        let A = new LSymbol(\"A\", function (lsys: LSystem) { });\r\n        let B = new LSymbol(\"B\", function (lsys: LSystem) { });\r\n        let C = new LSymbol(\"C\", function (lsys: LSystem) { });\r\n        this.alphabet = [];\r\n        this.alphabet.push(A);\r\n        this.alphabet.push(B);\r\n        this.alphabet.push(C);\r\n        A.setExpansionRules([new ExpansionRule(1, [B, B, A]), new ExpansionRule(1, [A])]);\r\n        B.setExpansionRules([new ExpansionRule(1, [C, B])]);\r\n    }\r\n\r\n    // expand once\r\n    expandString() {\r\n        this.lstring.expand();\r\n    }\r\n\r\n    executeString() {\r\n        this.lstring.execute(this);\r\n    }\r\n\r\n    resetTurtleStack(pos: vec3) {\r\n        let t = new Turtle();\r\n        vec3.copy(t.position, pos);\r\n        this.turtleStack = [t];\r\n    }\r\n\r\n    // resets expansions and decoration VBOs\r\n    resetSystem() {\r\n        this.lstring.fromArray(this.axiom);\r\n        this.resetDecoration();\r\n    }\r\n\r\n    resetDecoration() {\r\n        //this.decoration.destroy();\r\n        this.decoration.clearBuffers();\r\n        this.decoration.wasSafe = true;\r\n        this.decoration.useColor(BRANCH_COLOR);\r\n        this.turtleStack = [new Turtle()];\r\n    }\r\n\r\n    createDecoration() {\r\n        this.executeString();\r\n        this.decoration.create();\r\n    }\r\n};\r\n\r\nexport default LSystem;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/l-system/LSystem.ts","import {vec2, vec4, mat3, mat4} from 'gl-matrix';\r\nimport Drawable from './Drawable';\r\nimport Texture from './Texture';\r\nimport {gl} from '../../globals';\r\n\r\nvar activeProgram: WebGLProgram = null;\r\n\r\nexport class Shader {\r\n  shader: WebGLShader;\r\n\r\n  constructor(type: number, source: string) {\r\n    this.shader = gl.createShader(type);\r\n    gl.shaderSource(this.shader, source);\r\n    gl.compileShader(this.shader);\r\n\r\n    if (!gl.getShaderParameter(this.shader, gl.COMPILE_STATUS)) {\r\n      throw gl.getShaderInfoLog(this.shader);\r\n    }\r\n  }\r\n};\r\n\r\nclass ShaderProgram {\r\n  prog: WebGLProgram;\r\n\r\n  attrPos: number;\r\n  attrNor: number;\r\n  attrCol: number;\r\n  attrUV: number;\r\n\r\n  unifModel: WebGLUniformLocation;\r\n  unifModelInvTr: WebGLUniformLocation;\r\n  unifViewProj: WebGLUniformLocation;\r\n  unifView: WebGLUniformLocation;\r\n  unifProj: WebGLUniformLocation;\r\n  unifColor: WebGLUniformLocation;\r\n  unifTime: WebGLUniformLocation;\r\n  unifAspectRatio: WebGLUniformLocation;\r\n  unifDims: WebGLUniformLocation;\r\n  unifCoherence: WebGLUniformLocation;\r\n  unifBrushSize: WebGLUniformLocation;\r\n  unifBrushNoise: WebGLUniformLocation;\r\n    \r\n  unifFadeInTime: WebGLUniformLocation;\r\n  unifFadeOutTime: WebGLUniformLocation;\r\n\r\n  unifTexUnits: Map<string, WebGLUniformLocation>;\r\n\r\n  constructor(shaders: Array<Shader>) {\r\n    this.prog = gl.createProgram();\r\n\r\n    for (let shader of shaders) {\r\n      gl.attachShader(this.prog, shader.shader);\r\n    }\r\n    gl.linkProgram(this.prog);\r\n    if (!gl.getProgramParameter(this.prog, gl.LINK_STATUS)) {\r\n      throw gl.getProgramInfoLog(this.prog);\r\n    }\r\n\r\n    this.attrPos = gl.getAttribLocation(this.prog, \"vs_Pos\");\r\n    this.attrNor = gl.getAttribLocation(this.prog, \"vs_Nor\");\r\n    this.attrCol = gl.getAttribLocation(this.prog, \"vs_Col\");\r\n    this.attrUV = gl.getAttribLocation(this.prog, \"vs_UV\")\r\n    this.unifModel = gl.getUniformLocation(this.prog, \"u_Model\");\r\n    this.unifModelInvTr = gl.getUniformLocation(this.prog, \"u_ModelInvTr\");\r\n    this.unifViewProj = gl.getUniformLocation(this.prog, \"u_ViewProj\");\r\n    this.unifView = gl.getUniformLocation(this.prog, \"u_View\");\r\n    this.unifProj = gl.getUniformLocation(this.prog, \"u_Proj\");\r\n    this.unifColor = gl.getUniformLocation(this.prog, \"u_Color\");\r\n    this.unifTime = gl.getUniformLocation(this.prog, \"u_Time\");\r\n    this.unifAspectRatio = gl.getUniformLocation(this.prog, \"u_AspectRatio\");\r\n    this.unifDims = gl.getUniformLocation(this.prog, \"u_Dims\");\r\n    this.unifCoherence = gl.getUniformLocation(this.prog, \"u_Coherence\");\r\n    this.unifBrushSize = gl.getUniformLocation(this.prog, \"u_BrushSize\");\r\n    this.unifBrushNoise = gl.getUniformLocation(this.prog, \"u_BrushNoise\");\r\n    this.unifFadeInTime = gl.getUniformLocation(this.prog, \"u_FadeInTime\");\r\n    this.unifFadeOutTime = gl.getUniformLocation(this.prog, \"u_FadeOutTime\");\r\n\r\n    this.unifTexUnits = new Map<string, WebGLUniformLocation>();\r\n  }\r\n\r\n  setupTexUnits(handleNames: Array<string>) {\r\n    for (let handle of handleNames) {\r\n      var location = gl.getUniformLocation(this.prog, handle);\r\n      if (location !== -1) {\r\n        this.unifTexUnits.set(handle, location);\r\n      } else {\r\n        console.log(\"Could not find handle for texture named: \\'\" + handle + \"\\'!\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // Bind the given Texture to the given texture unit\r\n  bindTexToUnit(handleName: string, tex: Texture, unit: number) {\r\n    this.use();\r\n    var location = this.unifTexUnits.get(handleName);\r\n    if (location !== undefined) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      tex.bindTex();\r\n      gl.uniform1i(location, unit);\r\n    } else {\r\n      console.log(\"Texture with handle name: \\'\" + handleName + \"\\' was not found\");\r\n    }\r\n  }\r\n\r\n  use() {\r\n    if (activeProgram !== this.prog) {\r\n      gl.useProgram(this.prog);\r\n      activeProgram = this.prog;\r\n    }\r\n  }\r\n\r\n  setModelMatrix(model: mat4) {\r\n    this.use();\r\n    if (this.unifModel !== -1) {\r\n      gl.uniformMatrix4fv(this.unifModel, false, model);\r\n    }\r\n\r\n    if (this.unifModelInvTr !== -1) {\r\n      let modelMat3: mat3 = mat3.create();\r\n      mat3.fromMat4(modelMat3, model);\r\n      mat3.transpose(modelMat3, modelMat3);\r\n      mat3.invert(modelMat3, modelMat3);\r\n      gl.uniformMatrix3fv(this.unifModelInvTr, false, modelMat3);\r\n    }\r\n  }\r\n\r\n  setViewProjMatrix(vp: mat4) {\r\n    this.use();\r\n    if (this.unifViewProj !== -1) {\r\n      gl.uniformMatrix4fv(this.unifViewProj, false, vp);\r\n    }\r\n  }\r\n\r\n  setViewMatrix(vp: mat4) {\r\n    this.use();\r\n    if (this.unifView !== -1) {\r\n      gl.uniformMatrix4fv(this.unifView, false, vp);\r\n    }\r\n  }\r\n\r\n  setProjMatrix(vp: mat4) {\r\n    this.use();\r\n    if (this.unifProj !== -1) {\r\n      gl.uniformMatrix4fv(this.unifProj, false, vp);\r\n    }\r\n  }\r\n\r\n  setGeometryColor(color: vec4) {\r\n    this.use();\r\n    if (this.unifColor !== -1) {\r\n      gl.uniform4fv(this.unifColor, color);\r\n    }\r\n  }\r\n\r\n  setTime(t: number) {\r\n    this.use();\r\n    if (this.unifTime !== -1) {\r\n      gl.uniform1f(this.unifTime, t);\r\n    }\r\n  }\r\n\r\n  setDims(dims: vec2) {\r\n    this.use();\r\n    if (this.unifDims !== -1) {\r\n      gl.uniform2fv(this.unifDims, dims);\r\n    }\r\n  }\r\n\r\n  setAspectRatio(aspectRatio: number) {\r\n    this.use();\r\n    if (this.unifAspectRatio !== -1) {\r\n      gl.uniform1f(this.unifAspectRatio, aspectRatio);\r\n    }\r\n  }\r\n\r\n  setCoherence(coherence: number) {\r\n    this.use();\r\n    if (this.unifCoherence !== -1) {\r\n      gl.uniform1f(this.unifCoherence, coherence);\r\n    }\r\n  }\r\n\r\n  setBrushSize(brushSize: number) {\r\n    this.use();\r\n    if (this.unifBrushSize !== -1) {\r\n      gl.uniform1f(this.unifBrushSize, brushSize);\r\n    }\r\n  }\r\n\r\n  setBrushNoise(brushNoise: number) {\r\n    this.use();\r\n    if (this.unifBrushNoise !== -1) {\r\n      gl.uniform1f(this.unifBrushNoise, brushNoise);\r\n    }\r\n  }\r\n\r\n  setFadeInTime(fadeInTime: number) {\r\n    this.use();\r\n    if (this.unifFadeInTime !== -1) {\r\n      gl.uniform1f(this.unifFadeInTime, fadeInTime);\r\n    }\r\n  }\r\n\r\n  setFadeOutTime(fadeOutTime: number) {\r\n    this.use();\r\n    if (this.unifFadeOutTime !== -1) {\r\n      gl.uniform1f(this.unifFadeOutTime, fadeOutTime);\r\n    }\r\n  }\r\n\r\n  draw(d: Drawable) {\r\n    this.use();\r\n\r\n    if (this.attrPos != -1 && d.bindPos()) {\r\n      gl.enableVertexAttribArray(this.attrPos);\r\n      gl.vertexAttribPointer(this.attrPos, 4, gl.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    if (this.attrNor != -1 && d.bindNor()) {\r\n      gl.enableVertexAttribArray(this.attrNor);\r\n      gl.vertexAttribPointer(this.attrNor, 4, gl.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    if (this.attrCol != -1 && d.bindCol()) {\r\n      gl.enableVertexAttribArray(this.attrCol);\r\n      gl.vertexAttribPointer(this.attrCol, 4, gl.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    if (this.attrUV != -1 && d.bindUV()) {\r\n      gl.enableVertexAttribArray(this.attrUV);\r\n      gl.vertexAttribPointer(this.attrUV, 2, gl.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    d.bindIdx();\r\n    gl.drawElements(d.drawMode(), d.elemCount(), gl.UNSIGNED_INT, 0);\r\n\r\n    if (this.attrPos != -1) gl.disableVertexAttribArray(this.attrPos);\r\n    if (this.attrNor != -1) gl.disableVertexAttribArray(this.attrNor);\r\n    if (this.attrCol != -1) gl.disableVertexAttribArray(this.attrCol);\r\n    if (this.attrUV != -1) gl.disableVertexAttribArray(this.attrUV);\r\n  }\r\n};\r\n\r\nexport default ShaderProgram;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/rendering/gl/ShaderProgram.ts","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  let out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    let a01 = a[1], a02 = a[2], a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2];\r\n  let a10 = a[3], a11 = a[4], a12 = a[5];\r\n  let a20 = a[6], a21 = a[7], a22 = a[8];\r\n\r\n  let b01 = a22 * a11 - a12 * a21;\r\n  let b11 = -a22 * a10 + a12 * a20;\r\n  let b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2];\r\n  let a10 = a[3], a11 = a[4], a12 = a[5];\r\n  let a20 = a[6], a21 = a[7], a22 = a[8];\r\n\r\n  out[0] = (a11 * a22 - a12 * a21);\r\n  out[1] = (a02 * a21 - a01 * a22);\r\n  out[2] = (a01 * a12 - a02 * a11);\r\n  out[3] = (a12 * a20 - a10 * a22);\r\n  out[4] = (a00 * a22 - a02 * a20);\r\n  out[5] = (a02 * a10 - a00 * a12);\r\n  out[6] = (a10 * a21 - a11 * a20);\r\n  out[7] = (a01 * a20 - a00 * a21);\r\n  out[8] = (a00 * a11 - a01 * a10);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2];\r\n  let a10 = a[3], a11 = a[4], a12 = a[5];\r\n  let a20 = a[6], a21 = a[7], a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2];\r\n  let a10 = a[3], a11 = a[4], a12 = a[5];\r\n  let a20 = a[6], a21 = a[7], a22 = a[8];\r\n\r\n  let b00 = b[0], b01 = b[1], b02 = b[2];\r\n  let b10 = b[3], b11 = b[4], b12 = b[5];\r\n  let b20 = b[6], b21 = b[7], b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2],\r\n    a10 = a[3], a11 = a[4], a12 = a[5],\r\n    a20 = a[6], a21 = a[7], a22 = a[8],\r\n    x = v[0], y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2],\r\n    a10 = a[3], a11 = a[4], a12 = a[5],\r\n    a20 = a[6], a21 = a[7], a22 = a[8],\r\n\r\n    s = Math.sin(rad),\r\n    c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  let x = v[0], y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  let s = Math.sin(rad), c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let yx = y * x2;\r\n  let yy = y * y2;\r\n  let zx = z * x2;\r\n  let zy = z * y2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n    out[0] = 2 / width;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = -2 / height;\r\n    out[5] = 0;\r\n    out[6] = -1;\r\n    out[7] = 1;\r\n    out[8] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\r\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\r\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  out[4] = a[4] + (b[4] * scale);\r\n  out[5] = a[5] + (b[5] * scale);\r\n  out[6] = a[6] + (b[6] * scale);\r\n  out[7] = a[7] + (b[7] * scale);\r\n  out[8] = a[8] + (b[8] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\r\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\r\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\r\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\r\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\r\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat3.js\n// module id = 12\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  return Math.sqrt(x*x + y*y + z*z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  let out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  return Math.sqrt(x*x + y*y + z*z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  return x*x + y*y + z*z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  return x*x + y*y + z*z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let len = x*x + y*y + z*z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  let ax = a[0], ay = a[1], az = a[2];\r\n  let bx = b[0], by = b[1], bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  let ax = a[0];\r\n  let ay = a[1];\r\n  let az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  let factorTimes2 = t * t;\r\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  let factor2 = factorTimes2 * (t - 2) + t;\r\n  let factor3 = factorTimes2 * (t - 1);\r\n  let factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  let inverseFactor = 1 - t;\r\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  let factorTimes2 = t * t;\r\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  let factor2 = 3 * t * inverseFactorTimesTwo;\r\n  let factor3 = 3 * factorTimes2 * inverseFactor;\r\n  let factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\r\n  let zScale = Math.sqrt(1.0-z*z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  let x = a[0], y = a[1], z = a[2];\r\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  let x = a[0], y = a[1], z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\r\n\r\n  let x = a[0], y = a[1], z = a[2];\r\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  let ix = qw * x + qy * z - qz * y;\r\n  let iy = qw * y + qz * x - qx * z;\r\n  let iz = qw * z + qx * y - qy * x;\r\n  let iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c){\r\n  let p = [], r=[];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\r\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c){\r\n  let p = [], r=[];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c){\r\n  let p = [], r=[];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\r\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  let tempA = fromValues(a[0], a[1], a[2]);\r\n  let tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  let cosine = dot(tempA, tempB);\r\n\r\n  if(cosine > 1.0) {\r\n    return 0;\r\n  }\r\n  else if(cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport const div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport const dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport const sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport const len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport const sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport const forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if(!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if(!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if(count) {\r\n      l = Math.min((count * stride) + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for(i = offset; i < l; i += stride) {\r\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec3.js\n// module id = 13\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  let w = b[3] - a[3];\r\n  return Math.sqrt(x*x + y*y + z*z + w*w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  let w = b[3] - a[3];\r\n  return x*x + y*y + z*z + w*w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  return Math.sqrt(x*x + y*y + z*z + w*w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  return x*x + y*y + z*z + w*w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  let len = x*x + y*y + z*z + w*w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  let ax = a[0];\r\n  let ay = a[1];\r\n  let az = a[2];\r\n  let aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, vectorScale) {\r\n  vectorScale = vectorScale || 1.0;\r\n\r\n  //TODO: This is a pretty awful way of doing this. Find something better.\r\n  out[0] = glMatrix.RANDOM();\r\n  out[1] = glMatrix.RANDOM();\r\n  out[2] = glMatrix.RANDOM();\r\n  out[3] = glMatrix.RANDOM();\r\n  normalize(out, out);\r\n  scale(out, out, vectorScale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  let x = a[0], y = a[1], z = a[2], w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  let x = a[0], y = a[1], z = a[2];\r\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  let ix = qw * x + qy * z - qz * y;\r\n  let iy = qw * y + qz * x - qx * z;\r\n  let iz = qw * z + qx * y - qy * x;\r\n  let iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport const div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport const dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport const sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport const len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport const sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport const forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if(!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if(!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if(count) {\r\n      l = Math.min((count * stride) + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for(i = offset; i < l; i += stride) {\r\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec4.js\n// module id = 14\n// module chunks = 0","import {vec3, vec4} from 'gl-matrix';\r\nimport Drawable from '../rendering/gl/Drawable';\r\nimport {gl} from '../globals';\r\n\r\nclass Square extends Drawable {\r\n  indices: Uint32Array;\r\n  positions: Float32Array;\r\n  normals: Float32Array;\r\n  colors: Float32Array;\r\n  uvs: Float32Array;\r\n  center: vec4;\r\n\r\n  constructor(center: vec3) {\r\n    super(); // Call the constructor of the super class. This is required.\r\n    this.center = vec4.fromValues(center[0], center[1], center[2], 1);\r\n  }\r\n\r\n  create() {\r\n\r\n  this.indices = new Uint32Array([0, 1, 2,\r\n                                  0, 2, 3]);\r\n  this.normals = new Float32Array([0, 0, 1, 0,\r\n                                   0, 0, 1, 0,\r\n                                   0, 0, 1, 0,\r\n                                   0, 0, 1, 0]);\r\n  this.positions = new Float32Array([-1, -1, 0, 1,\r\n                                     1, -1, 0, 1,\r\n                                     1, 1, 0, 1,\r\n                                     -1, 1, 0, 1]);\r\n  this.colors = new Float32Array([\r\n    1.0, 0.5, 0.5, 1.0,\r\n    1.0, 0.5, 0.5, 1.0,\r\n    1.0, 0.5, 0.5, 1.0,\r\n    1.0, 0.5, 0.5, 1.0\r\n    ]);\r\n  this.uvs = new Float32Array([0, 0,\r\n                               1, 0, \r\n                               1, 1,\r\n                               0, 1]);\r\n    this.generateIdx();\r\n    this.generatePos();\r\n    this.generateNor();\r\n    this.generateUV();\r\n    this.generateCol();\r\n\r\n    this.count = this.indices.length;\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIdx);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufNor);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.normals, gl.STATIC_DRAW);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufPos);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.STATIC_DRAW);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufCol);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.STATIC_DRAW);\r\n\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.STATIC_DRAW);\r\n\r\n    console.log(`Created square`);\r\n  }\r\n};\r\n\r\nexport default Square;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/Square.ts","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"OBJ\",[],t):\"object\"==typeof exports?exports.OBJ=t():e.OBJ=t()}(\"undefined\"!=typeof self?self:this,function(){return function(e){function t(a){if(r[a])return r[a].exports;var n=r[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var r={};return t.m=e,t.c=r,t.d=function(exports,e,r){t.o(exports,e)||Object.defineProperty(exports,e,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,\"a\",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"/\",t(t.s=3)}([function(e,exports,t){\"use strict\";function r(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function a(e){switch(e){case\"BYTE\":case\"UNSIGNED_BYTE\":return 1;case\"SHORT\":case\"UNSIGNED_SHORT\":return 2;case\"FLOAT\":return 4}}Object.defineProperty(exports,\"__esModule\",{value:!0});var n=exports.Layout=function e(){r(this,e);for(var t=arguments.length,a=Array(t),n=0;n<t;n++)a[n]=arguments[n];this.attributes=a;var s=0,l=0,o=!0,u=!1,c=void 0;try{for(var f,h=a[Symbol.iterator]();!(o=(f=h.next()).done);o=!0){var p=f.value;if(this[p.key])throw new i(p);s%p.sizeOfType!=0&&(s+=p.sizeOfType-s%p.sizeOfType),this[p.key]={attribute:p,size:p.size,type:p.type,normalized:p.normalized,offset:s},s+=p.sizeInBytes,l=Math.max(l,p.sizeOfType)}}catch(e){u=!0,c=e}finally{try{!o&&h.return&&h.return()}finally{if(u)throw c}}s%l!=0&&(s+=l-s%l),this.stride=s;var v=!0,d=!1,y=void 0;try{for(var m,M=a[Symbol.iterator]();!(v=(m=M.next()).done);v=!0){this[m.value.key].stride=this.stride}}catch(e){d=!0,y=e}finally{try{!v&&M.return&&M.return()}finally{if(d)throw y}}},i=function e(t){r(this,e),this.message=\"found duplicate attribute: \"+t.key},s=function e(t,n,i){arguments.length>3&&void 0!==arguments[3]&&arguments[3];r(this,e),this.key=t,this.size=n,this.type=i,this.normalized=!1,this.sizeOfType=a(i),this.sizeInBytes=this.sizeOfType*n};n.POSITION=new s(\"position\",3,\"FLOAT\"),n.NORMAL=new s(\"normal\",3,\"FLOAT\"),n.TANGENT=new s(\"tangent\",3,\"FLOAT\"),n.BITANGENT=new s(\"bitangent\",3,\"FLOAT\"),n.UV=new s(\"uv\",2,\"FLOAT\"),n.MATERIAL_INDEX=new s(\"materialIndex\",1,\"SHORT\"),n.MATERIAL_ENABLED=new s(\"materialEnabled\",1,\"UNSIGNED_SHORT\"),n.AMBIENT=new s(\"ambient\",3,\"FLOAT\"),n.DIFFUSE=new s(\"diffuse\",3,\"FLOAT\"),n.SPECULAR=new s(\"specular\",3,\"FLOAT\"),n.SPECULAR_EXPONENT=new s(\"specularExponent\",3,\"FLOAT\"),n.EMISSIVE=new s(\"emissive\",3,\"FLOAT\"),n.TRANSMISSION_FILTER=new s(\"transmissionFilter\",3,\"FLOAT\"),n.DISSOLVE=new s(\"dissolve\",1,\"FLOAT\"),n.ILLUMINATION=new s(\"illumination\",1,\"UNSIGNED_SHORT\"),n.REFRACTION_INDEX=new s(\"refractionIndex\",1,\"FLOAT\"),n.SHARPNESS=new s(\"sharpness\",1,\"FLOAT\"),n.MAP_DIFFUSE=new s(\"mapDiffuse\",1,\"SHORT\"),n.MAP_AMBIENT=new s(\"mapAmbient\",1,\"SHORT\"),n.MAP_SPECULAR=new s(\"mapSpecular\",1,\"SHORT\"),n.MAP_SPECULAR_EXPONENT=new s(\"mapSpecularExponent\",1,\"SHORT\"),n.MAP_DISSOLVE=new s(\"mapDissolve\",1,\"SHORT\"),n.ANTI_ALIASING=new s(\"antiAliasing\",1,\"UNSIGNED_SHORT\"),n.MAP_BUMP=new s(\"mapBump\",1,\"SHORT\"),n.MAP_DISPLACEMENT=new s(\"mapDisplacement\",1,\"SHORT\"),n.MAP_DECAL=new s(\"mapDecal\",1,\"SHORT\"),n.MAP_EMISSIVE=new s(\"mapEmissive\",1,\"SHORT\")},function(e,exports,t){\"use strict\";function r(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}function a(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}Object.defineProperty(exports,\"__esModule\",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,\"value\"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),i=t(0),s=function(){function e(t,n){a(this,e),n=n||{},n.materials=n.materials||{},n.enableWTextureCoord=!!n.enableWTextureCoord,n.indicesPerMaterial=!!n.indicesPerMaterial;var i=this;i.vertices=[],i.vertexNormals=[],i.textures=[],i.indices=[],i.textureStride=n.enableWTextureCoord?3:2,this.name=\"\";var s=[],l=[],o=[],u={},c=[],f={},h=-1,p=0;u.verts=[],u.norms=[],u.textures=[],u.hashindices={},u.indices=[[]],u.materialIndices=[],u.index=0;for(var v=/^v\\s/,d=/^vn\\s/,y=/^vt\\s/,m=/^f\\s/,M=/\\s+/,b=/^usemtl/,x=t.split(\"\\n\"),I=0;I<x.length;I++){var A=x[I].trim();if(A&&!A.startsWith(\"#\")){var _=A.split(M);if(_.shift(),v.test(A))s.push.apply(s,r(_));else if(d.test(A))l.push.apply(l,r(_));else if(y.test(A)){var k=_;_.length>2&&!n.enableWTextureCoord?k=_.slice(0,2):2===_.length&&n.enableWTextureCoord&&k.push(0),o.push.apply(o,r(k))}else if(b.test(A)){var T=_[0];T in f||(c.push(T),f[T]=c.length-1,n.indicesPerMaterial&&f[T]>0&&u.indices.push([])),h=f[T],n.indicesPerMaterial&&(p=h)}else if(m.test(A))for(var w=!1,F=0,S=_.length;F<S;F++){3!==F||w||(F=2,w=!0);var E=_[0]+\",\"+h,g=_[F]+\",\"+h;if(g in u.hashindices)u.indices[p].push(u.hashindices[g]);else{var O=_[F].split(\"/\"),B=O.length-1;if(u.verts.push(+s[3*(O[0]-1)+0]),u.verts.push(+s[3*(O[0]-1)+1]),u.verts.push(+s[3*(O[0]-1)+2]),o.length){var L=n.enableWTextureCoord?3:2;u.textures.push(+o[(O[1]-1)*L+0]),u.textures.push(+o[(O[1]-1)*L+1]),n.enableWTextureCoord&&u.textures.push(+o[(O[1]-1)*L+2])}u.norms.push(+l[3*(O[B]-1)+0]),u.norms.push(+l[3*(O[B]-1)+1]),u.norms.push(+l[3*(O[B]-1)+2]),u.materialIndices.push(h),u.hashindices[g]=u.index,u.indices[p].push(u.hashindices[g]),u.index+=1}3===F&&w&&u.indices[p].push(u.hashindices[E])}}}i.vertices=u.verts,i.vertexNormals=u.norms,i.textures=u.textures,i.vertexMaterialIndices=u.materialIndices,i.indices=n.indicesPerMaterial?u.indices:u.indices[p],i.materialNames=c,i.materialIndices=f,i.materialsByIndex={},n.calcTangentsAndBitangents&&this.calculateTangentsAndBitangents()}return n(e,[{key:\"calculateTangentsAndBitangents\",value:function(){var e={};e.tangents=[].concat(r(new Array(this.vertices.length))).map(function(e){return 0}),e.bitangents=[].concat(r(new Array(this.vertices.length))).map(function(e){return 0});var t=void 0;t=Array.isArray(this.indices[0])?[].concat.apply([],this.indices):this.indices;for(var a=this.vertices,n=this.vertexNormals,i=this.textures,s=0;s<t.length;s+=3){var l=t[s+0],o=t[s+1],u=t[s+2],c=a[3*l+0],f=a[3*l+1],h=a[3*l+2],p=i[2*l+0],v=i[2*l+1],d=a[3*o+0],y=a[3*o+1],m=a[3*o+2],M=i[2*o+0],b=i[2*o+1],x=a[3*u+0],I=a[3*u+1],A=a[3*u+2],_=i[2*u+0],k=i[2*u+1],T=d-c,w=y-f,F=m-h,S=x-c,E=I-f,g=A-h,O=M-p,B=b-v,L=_-p,N=k-v,R=O*N-B*L,P=1/(Math.abs(R<1e-4)?1:R),D=(T*N-S*B)*P,C=(w*N-E*B)*P,U=(F*N-g*B)*P,j=(S*O-T*L)*P,z=(E*O-w*L)*P,H=(g*O-F*L)*P,W=n[3*l+0],G=n[3*l+1],V=n[3*l+2],K=n[3*o+0],q=n[3*o+1],X=n[3*o+2],Y=n[3*u+0],J=n[3*u+1],Q=n[3*u+2],Z=D*W+C*G+U*V,ee=D*K+C*q+U*X,te=D*Y+C*J+U*Q,re=D-W*Z,ae=C-G*Z,ne=U-V*Z,ie=D-K*ee,se=C-q*ee,le=U-X*ee,oe=D-Y*te,ue=C-J*te,ce=U-Q*te,fe=Math.sqrt(re*re+ae*ae+ne*ne),he=Math.sqrt(ie*ie+se*se+le*le),pe=Math.sqrt(oe*oe+ue*ue+ce*ce),ve=j*W+z*G+H*V,de=j*K+z*q+H*X,ye=j*Y+z*J+H*Q,me=j-W*ve,Me=z-G*ve,be=H-V*ve,xe=j-K*de,Ie=z-q*de,Ae=H-X*de,_e=j-Y*ye,ke=z-J*ye,Te=H-Q*ye,we=Math.sqrt(me*me+Me*Me+be*be),Fe=Math.sqrt(xe*xe+Ie*Ie+Ae*Ae),Se=Math.sqrt(_e*_e+ke*ke+Te*Te);e.tangents[3*l+0]+=re/fe,e.tangents[3*l+1]+=ae/fe,e.tangents[3*l+2]+=ne/fe,e.tangents[3*o+0]+=ie/he,e.tangents[3*o+1]+=se/he,e.tangents[3*o+2]+=le/he,e.tangents[3*u+0]+=oe/pe,e.tangents[3*u+1]+=ue/pe,e.tangents[3*u+2]+=ce/pe,e.bitangents[3*l+0]+=me/we,e.bitangents[3*l+1]+=Me/we,e.bitangents[3*l+2]+=be/we,e.bitangents[3*o+0]+=xe/Fe,e.bitangents[3*o+1]+=Ie/Fe,e.bitangents[3*o+2]+=Ae/Fe,e.bitangents[3*u+0]+=_e/Se,e.bitangents[3*u+1]+=ke/Se,e.bitangents[3*u+2]+=Te/Se}this.tangents=e.tangents,this.bitangents=e.bitangents}},{key:\"makeBufferData\",value:function(e){var t=this.vertices.length/3,r=new ArrayBuffer(e.stride*t);r.numItems=t;for(var a=new DataView(r),n=0,s=0;n<t;n++){s=n*e.stride;var l=!0,o=!1,u=void 0;try{for(var c,f=e.attributes[Symbol.iterator]();!(l=(c=f.next()).done);l=!0){var h=c.value,p=s+e[h.key].offset;switch(h.key){case i.Layout.POSITION.key:a.setFloat32(p,this.vertices[3*n],!0),a.setFloat32(p+4,this.vertices[3*n+1],!0),a.setFloat32(p+8,this.vertices[3*n+2],!0);break;case i.Layout.UV.key:a.setFloat32(p,this.textures[2*n],!0),a.setFloat32(p+4,this.vertices[2*n+1],!0);break;case i.Layout.NORMAL.key:a.setFloat32(p,this.vertexNormals[3*n],!0),a.setFloat32(p+4,this.vertexNormals[3*n+1],!0),a.setFloat32(p+8,this.vertexNormals[3*n+2],!0);break;case i.Layout.MATERIAL_INDEX.key:a.setInt16(p,this.vertexMaterialIndices[n],!0);break;case i.Layout.AMBIENT.key:var v=this.vertexMaterialIndices[n],d=this.materialsByIndex[v];if(!d)break;a.setFloat32(p,d.ambient[0],!0),a.setFloat32(p+4,d.ambient[1],!0),a.setFloat32(p+8,d.ambient[2],!0);break;case i.Layout.DIFFUSE.key:var y=this.vertexMaterialIndices[n],m=this.materialsByIndex[y];if(!m)break;a.setFloat32(p,m.diffuse[0],!0),a.setFloat32(p+4,m.diffuse[1],!0),a.setFloat32(p+8,m.diffuse[2],!0);break;case i.Layout.SPECULAR.key:var M=this.vertexMaterialIndices[n],b=this.materialsByIndex[M];if(!b)break;a.setFloat32(p,b.specular[0],!0),a.setFloat32(p+4,b.specular[1],!0),a.setFloat32(p+8,b.specular[2],!0);break;case i.Layout.SPECULAR_EXPONENT.key:var x=this.vertexMaterialIndices[n],I=this.materialsByIndex[x];if(!I)break;a.setFloat32(p,I.specularExponent,!0);break;case i.Layout.EMISSIVE.key:var A=this.vertexMaterialIndices[n],_=this.materialsByIndex[A];if(!_)break;a.setFloat32(p,_.emissive[0],!0),a.setFloat32(p+4,_.emissive[1],!0),a.setFloat32(p+8,_.emissive[2],!0);break;case i.Layout.TRANSMISSION_FILTER.key:var k=this.vertexMaterialIndices[n],T=this.materialsByIndex[k];if(!T)break;a.setFloat32(p,T.transmissionFilter[0],!0),a.setFloat32(p+4,T.transmissionFilter[1],!0),a.setFloat32(p+8,T.transmissionFilter[2],!0);break;case i.Layout.DISSOLVE.key:var w=this.vertexMaterialIndices[n],F=this.materialsByIndex[w];if(!F)break;a.setFloat32(p,F.dissolve,!0);break;case i.Layout.ILLUMINATION.key:var S=this.vertexMaterialIndices[n],E=this.materialsByIndex[S];if(!E)break;a.setInt16(p,E.illumination,!0);break;case i.Layout.REFRACTION_INDEX.key:var g=this.vertexMaterialIndices[n],O=this.materialsByIndex[g];if(!O)break;a.setFloat32(p,O.refractionIndex,!0);break;case i.Layout.SHARPNESS.key:var B=this.vertexMaterialIndices[n],L=this.materialsByIndex[B];if(!L)break;a.setFloat32(p,L.sharpness,!0);break;case i.Layout.ANTI_ALIASING.key:var N=this.vertexMaterialIndices[n],R=this.materialsByIndex[N];if(!R)break;a.setInt16(p,R.antiAliasing,!0)}}}catch(e){o=!0,u=e}finally{try{!l&&f.return&&f.return()}finally{if(o)throw u}}}return r}},{key:\"makeIndexBufferData\",value:function(){var e=new Uint16Array(this.indices);return e.numItems=this.indices.length,e}},{key:\"addMaterialLibrary\",value:function(e){for(var t in e.materials)if(t in this.materialIndices){var r=e.materials[t],a=this.materialIndices[r.name];this.materialsByIndex[a]=r}}}]),e}();exports.default=s},function(e,exports,t){\"use strict\";function r(e){return Array.isArray(e)?e:Array.from(e)}function a(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}Object.defineProperty(exports,\"__esModule\",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,\"value\"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),i=exports.Material=function e(t){a(this,e),this.name=t,this.ambient=[0,0,0],this.diffuse=[0,0,0],this.specular=[0,0,0],this.emissive=[0,0,0],this.transmissionFilter=[0,0,0],this.dissolve=0,this.specularExponent=0,this.transparency=0,this.illumination=0,this.refractionIndex=1,this.sharpness=0,this.mapDiffuse=null,this.mapAmbient=null,this.mapSpecular=null,this.mapSpecularExponent=null,this.mapDissolve=null,this.antiAliasing=!1,this.mapBump=null,this.mapDisplacement=null,this.mapDecal=null,this.mapEmissive=null,this.mapReflections=[]};exports.MaterialLibrary=function(){function e(t){a(this,e),this.data=t,this.currentMaterial=null,this.materials={},this.parse()}return n(e,[{key:\"parse_newmtl\",value:function(e){var t=e[0];this.currentMaterial=new i(t),this.materials[t]=this.currentMaterial}},{key:\"parseColor\",value:function(e){if(\"spectral\"!=e[0]&&\"xyz\"!=e[0]){if(3==e.length)return e.map(parseFloat);var t=parseFloat(e[0]);return[t,t,t]}}},{key:\"parse_Ka\",value:function(e){this.currentMaterial.ambient=this.parseColor(e)}},{key:\"parse_Kd\",value:function(e){this.currentMaterial.diffuse=this.parseColor(e)}},{key:\"parse_Ks\",value:function(e){this.currentMaterial.specular=this.parseColor(e)}},{key:\"parse_Ke\",value:function(e){this.currentMaterial.emissive=this.parseColor(e)}},{key:\"parse_Tf\",value:function(e){this.currentMaterial.transmissionFilter=this.parseColor(e)}},{key:\"parse_d\",value:function(e){this.currentMaterial.dissolve=parseFloat(e.pop())}},{key:\"parse_illum\",value:function(e){this.currentMaterial.illumination=parseInt(e[0])}},{key:\"parse_Ni\",value:function(e){this.currentMaterial.refractionIndex=parseFloat(e[0])}},{key:\"parse_Ns\",value:function(e){this.currentMaterial.specularExponent=parseInt(e[0])}},{key:\"parse_sharpness\",value:function(e){this.currentMaterial.sharpness=parseInt(e[0])}},{key:\"parse_cc\",value:function(e,t){t.colorCorrection=\"on\"==e[0]}},{key:\"parse_blendu\",value:function(e,t){t.horizontalBlending=\"on\"==e[0]}},{key:\"parse_blendv\",value:function(e,t){t.verticalBlending=\"on\"==e[0]}},{key:\"parse_boost\",value:function(e,t){t.boostMipMapSharpness=parseFloat(e[0])}},{key:\"parse_mm\",value:function(e,t){t.modifyTextureMap.brightness=parseFloat(e[0]),t.modifyTextureMap.contrast=parseFloat(e[1])}},{key:\"parse_ost\",value:function(e,t,r){for(;e.length<3;)e.push(r);t.u=parseFloat(e[0]),t.v=parseFloat(e[1]),t.w=parseFloat(e[2])}},{key:\"parse_o\",value:function(e,t){this.parse_ost(e,t.offset,0)}},{key:\"parse_s\",value:function(e,t){this.parse_ost(e,t.scale,1)}},{key:\"parse_t\",value:function(e,t){this.parse_ost(e,t.turbulence,0)}},{key:\"parse_texres\",value:function(e,t){t.textureResolution=parseFloat(e[0])}},{key:\"parse_clamp\",value:function(e,t){t.clamp=\"on\"==e[0]}},{key:\"parse_bm\",value:function(e,t){t.bumpMultiplier=parseFloat(e[0])}},{key:\"parse_imfchan\",value:function(e,t){t.imfChan=e[0]}},{key:\"parse_type\",value:function(e,t){t.reflectionType=e[0]}},{key:\"parseOptions\",value:function(e){var t={colorCorrection:!1,horizontalBlending:!0,verticalBlending:!0,boostMipMapSharpness:0,modifyTextureMap:{brightness:0,contrast:1},offset:{u:0,v:0,w:0},scale:{u:1,v:1,w:1},turbulence:{u:0,v:0,w:0},clamp:!1,textureResolution:null,bumpMultiplier:1,imfChan:null},r=void 0,a=void 0,n={};for(e.reverse();e.length;){var i=e.pop();i.startsWith(\"-\")?(r=i.substr(1),n[r]=[]):n[r].push(i)}for(r in n)if(n.hasOwnProperty(r)){a=n[r];var s=this[\"parse_\"+r];s&&s.bind(this)(a,t)}return t}},{key:\"parseMap\",value:function(e){var t=void 0,a=void 0;if(e[0].startsWith(\"-\"))t=e.pop(),a=e;else{var n=r(e);t=n[0],a=n.slice(1)}return a=this.parseOptions(a),a.filename=t,a}},{key:\"parse_map_Ka\",value:function(e){this.currentMaterial.mapAmbient=this.parseMap(e)}},{key:\"parse_map_Kd\",value:function(e){this.currentMaterial.mapDiffuse=this.parseMap(e)}},{key:\"parse_map_Ks\",value:function(e){this.currentMaterial.mapSpecular=this.parseMap(e)}},{key:\"parse_map_Ke\",value:function(e){this.currentMaterial.mapEmissive=this.parseMap(e)}},{key:\"parse_map_Ns\",value:function(e){this.currentMaterial.mapSpecularExponent=this.parseMap(e)}},{key:\"parse_map_d\",value:function(e){this.currentMaterial.mapDissolve=this.parseMap(e)}},{key:\"parse_map_aat\",value:function(e){this.currentMaterial.antiAliasing=\"on\"==e[0]}},{key:\"parse_map_bump\",value:function(e){this.currentMaterial.mapBump=this.parseMap(e)}},{key:\"parse_bump\",value:function(e){this.parse_map_bump(e)}},{key:\"parse_disp\",value:function(e){this.currentMaterial.mapDisplacement=this.parseMap(e)}},{key:\"parse_decal\",value:function(e){this.currentMaterial.mapDecal=this.parseMap(e)}},{key:\"parse_refl\",value:function(e){this.currentMaterial.mapReflections.push(this.parseMap(e))}},{key:\"parse\",value:function(){var e=this.data.split(/\\r?\\n/),t=!0,a=!1,n=void 0;try{for(var i,s=e[Symbol.iterator]();!(t=(i=s.next()).done);t=!0){var l=i.value;if((l=l.trim())&&!l.startsWith(\"#\")){var o=l.split(/\\s/),u=void 0,c=o,f=r(c);u=f[0],o=f.slice(1);var h=this[\"parse_\"+u];h&&h.bind(this)(o)}}}catch(e){a=!0,n=e}finally{try{!t&&s.return&&s.return()}finally{if(a)throw n}}delete this.data,this.currentMaterial=null}}]),e}()},function(e,exports,t){e.exports=t(4)},function(e,exports,t){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.version=exports.deleteMeshBuffers=exports.initMeshBuffers=exports.downloadMeshes=exports.downloadModels=exports.Layout=exports.MaterialLibrary=exports.Material=exports.Mesh=void 0;var r=t(1),a=function(e){return e&&e.__esModule?e:{default:e}}(r),n=t(2),i=t(0),s=t(5);exports.Mesh=a.default,exports.Material=n.Material,exports.MaterialLibrary=n.MaterialLibrary,exports.Layout=i.Layout,exports.downloadModels=s.downloadModels,exports.downloadMeshes=s.downloadMeshes,exports.initMeshBuffers=s.initMeshBuffers,exports.deleteMeshBuffers=s.deleteMeshBuffers,exports.version=\"1.1.3\"},function(e,exports,t){\"use strict\";function r(e,t){var r=[\"mapDiffuse\",\"mapAmbient\",\"mapSpecular\",\"mapDissolve\",\"mapBump\",\"mapDisplacement\",\"mapDecal\",\"mapEmissive\"];t.endsWith(\"/\")||(t+=\"/\");var a=[];for(var n in e.materials)if(e.materials.hasOwnProperty(n)){n=e.materials[n];var i=!0,s=!1,l=void 0;try{for(var o,u=r[Symbol.iterator]();!(i=(o=u.next()).done);i=!0){var c=o.value;(function(e){var r=n[e];if(!r)return\"continue\";var i=t+r.filename;a.push(fetch(i).then(function(e){if(!e.ok)throw new Error;return e.blob()}).then(function(e){var t=new Image;return t.src=URL.createObjectURL(e),r.texture=t,new Promise(function(e){return t.onload=e})}).catch(function(){}))})(c)}}catch(e){s=!0,l=e}finally{try{!i&&u.return&&u.return()}finally{if(s)throw l}}}return Promise.all(a)}function a(e){var t=[],a=!0,n=!1,i=void 0;try{for(var s,o=e[Symbol.iterator]();!(a=(s=o.next()).done);a=!0){var f=s.value;!function(e){var a=[];if(!e.obj)throw new Error('\"obj\" attribute of model object not set. The .obj file is required to be set in order to use downloadModels()');var n={};n.indicesPerMaterial=!!e.indicesPerMaterial,n.calcTangentsAndBitangents=!!e.calcTangentsAndBitangents;var i=e.name;if(!i){var s=e.obj.split(\"/\");i=s[s.length-1].replace(\".obj\",\"\")}if(a.push(Promise.resolve(i)),a.push(fetch(e.obj).then(function(e){return e.text()}).then(function(e){return new u.default(e,n)})),e.mtl){var l=e.mtl;\"boolean\"==typeof l&&(l=e.obj.replace(/\\.obj$/,\".mtl\")),a.push(fetch(l).then(function(e){return e.text()}).then(function(t){var a=new c.MaterialLibrary(t);if(!1!==e.downloadMtlTextures){var n=e.mtlTextureRoot;return n||(n=l.substr(0,l.lastIndexOf(\"/\"))),Promise.all([Promise.resolve(a),r(a,n)])}return Promise.all(Promise.resolve(a))}).then(function(e){return e[0]}))}t.push(Promise.all(a))}(f)}}catch(e){n=!0,i=e}finally{try{!a&&o.return&&o.return()}finally{if(n)throw i}}return Promise.all(t).then(function(e){var t={},r=!0,a=!1,n=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done);r=!0){var o=i.value,u=l(o,3),c=u[0],f=u[1],h=u[2];f.name=c,h&&f.addMaterialLibrary(h),t[c]=f}}catch(e){a=!0,n=e}finally{try{!r&&s.return&&s.return()}finally{if(a)throw n}}return t})}function n(e,t,r){void 0===r&&(r={});var a=[];for(var n in e){(function(t){if(!e.hasOwnProperty(t))return\"continue\";var r=e[t];a.push(fetch(r).then(function(e){return e.text()}).then(function(e){return[t,new u.default(e)]}))})(n)}Promise.all(a).then(function(e){var a=!0,n=!1,i=void 0;try{for(var s,o=e[Symbol.iterator]();!(a=(s=o.next()).done);a=!0){var u=s.value,c=l(u,2),f=c[0],h=c[1];r[f]=h}}catch(e){n=!0,i=e}finally{try{!a&&o.return&&o.return()}finally{if(n)throw i}}return t(r)})}function i(e,t){t.normalBuffer=f(e,e.ARRAY_BUFFER,t.vertexNormals,3),t.textureBuffer=f(e,e.ARRAY_BUFFER,t.textures,t.textureStride),t.vertexBuffer=f(e,e.ARRAY_BUFFER,t.vertices,3),t.indexBuffer=f(e,e.ELEMENT_ARRAY_BUFFER,t.indices,1)}function s(e,t){e.deleteBuffer(t.normalBuffer),e.deleteBuffer(t.textureBuffer),e.deleteBuffer(t.vertexBuffer),e.deleteBuffer(t.indexBuffer)}Object.defineProperty(exports,\"__esModule\",{value:!0});var l=function(){function e(e,t){var r=[],a=!0,n=!1,i=void 0;try{for(var s,l=e[Symbol.iterator]();!(a=(s=l.next()).done)&&(r.push(s.value),!t||r.length!==t);a=!0);}catch(e){n=!0,i=e}finally{try{!a&&l.return&&l.return()}finally{if(n)throw i}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}}();exports.downloadModels=a,exports.downloadMeshes=n,exports.initMeshBuffers=i,exports.deleteMeshBuffers=s;var o=t(1),u=function(e){return e&&e.__esModule?e:{default:e}}(o),c=t(2),f=(t(0),function(e,t,r,a){var n=e.createBuffer(),i=t===e.ARRAY_BUFFER?Float32Array:Uint16Array;return e.bindBuffer(t,n),e.bufferData(t,new i(r),e.STATIC_DRAW),n.itemSize=a,n.numItems=r.length/a,n})}])});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/webgl-obj-loader/dist/webgl-obj-loader.min.js\n// module id = 16\n// module chunks = 0","import Camera from '../Camera';\r\nimport {clamp} from '../Utils';\r\nimport {vec2, vec3, mat4} from 'gl-matrix';\r\n\r\nclass Collider {\r\n    position: vec2;\r\n    radius: number;\r\n\r\n    constructor(position: vec2, radius: number) {\r\n        this.position = vec2.clone(position);\r\n        this.radius = radius;\r\n    }\r\n\r\n    // if collision happens, returns position where no collision happens\r\n    // else, return null\r\n    collide(otherPos: vec2, otherRadius: number): vec2 {\r\n        let dist = vec2.distance(this.position, otherPos);\r\n        if (dist >= this.radius + otherRadius) {\r\n            return null;\r\n        }\r\n        else {\r\n            let toOther = vec2.create();\r\n            vec2.subtract(toOther, otherPos, this.position);\r\n            vec2.normalize(toOther, toOther);\r\n            vec2.scale(toOther, toOther, (this.radius + otherRadius));\r\n            vec2.add(toOther, toOther, this.position);\r\n            return toOther;\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport default Collider;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/Collider.ts","enum ShaderFlags {\n    NONE = 0,\n    DOF = 1 << 0,\n    BLOOM = 1 << 1,\n    POINTILISM = 1 << 2,\n    PAINT = 1 << 3,\n    VAPORWAVE = 1 << 4,\n}\n\nexport default ShaderFlags;\n\n\n\n// WEBPACK FOOTER //\n// ./src/rendering/gl/ShaderFlags.ts","import {vec3, mat4} from 'gl-matrix';\r\nimport * as Stats from 'stats-js';\r\nimport * as DAT from 'dat-gui';\r\nimport Square from './geometry/Square';\r\nimport Mesh from './geometry/Mesh';\r\nimport TerrainPlane from './geometry/TerrainPlane';\r\nimport Terrain from './game/Terrain';\r\nimport OpenGLRenderer from './rendering/gl/OpenGLRenderer';\r\nimport {Level} from './game/Terrain';\r\nimport Camera from './Camera';\r\nimport Player from './game/Player';\r\nimport {setGL} from './globals';\r\nimport {readTextFile} from './globals';\r\nimport ShaderProgram, {Shader} from './rendering/gl/ShaderProgram';\r\nimport Texture from './rendering/gl/Texture';\r\nimport ShaderFlags from './rendering/gl/ShaderFlags';\r\nimport * as Howler from 'howler';\r\n\r\nenum Model {\r\n    WAHOO = 1,\r\n    STARYU,\r\n    LAPRAS,\r\n    CHIKORITA,\r\n}\r\n\r\n// Define an object with application parameters and button callbacks\r\ninterface IControls {\r\n    [key: string]: any;\r\n}\r\n// TODOX: \r\n// sky color\r\n// brushiness (magnitude of randomness in paint-frag\r\nlet controls: IControls = {};\r\nconst ENABLE_DOF = \"Enable fake DOF\";\r\nconst ENABLE_BLOOM = \"Enable bloom\";\r\nconst ENABLE_POINTILISM = \"Enable pointilism\";\r\nconst ENABLE_PAINT = \"Enable paintbrush\";\r\nconst ENABLE_VAPORWAVE = \"Enable vaporwave\";\r\nconst PAINT_COHERENCE = \"Coherence (of paintbrush directions)\";\r\nconst PAINT_BRUSH_SIZE = \"Brush size\";\r\nconst PAINT_BRUSH_NOISE = \"Brush noisiness\";\r\nconst LOADED_MODEL = \"Model\";\r\ncontrols[ENABLE_DOF] = false;\r\ncontrols[ENABLE_BLOOM] = false;\r\ncontrols[ENABLE_POINTILISM] = false;\r\ncontrols[ENABLE_PAINT] = false;\r\ncontrols[ENABLE_VAPORWAVE] = false;\r\ncontrols[PAINT_COHERENCE] = 0.8;\r\ncontrols[PAINT_BRUSH_SIZE] = 0.5;\r\ncontrols[PAINT_BRUSH_NOISE] = 0.5;\r\ncontrols[LOADED_MODEL] = Model.WAHOO;\r\n\r\nlet shaderFlags = ShaderFlags.NONE;\r\n\r\nconst sound = new Howler.Howl({\r\n    src: [\"resources/audio/vaporwave.mp3\"],\r\n    volume: 0.5,\r\n    loop: true,\r\n    preload: false,\r\n    onload: function () {\r\n        console.log(\"Loaded vaporwave!\");\r\n    }\r\n});\r\n\r\nfunction updateShaderFlags() {\r\n    shaderFlags = ShaderFlags.NONE;\r\n    shaderFlags |= controls[ENABLE_DOF] ? ShaderFlags.DOF : ShaderFlags.NONE;\r\n    shaderFlags |= controls[ENABLE_BLOOM] ? ShaderFlags.BLOOM : ShaderFlags.NONE;\r\n    shaderFlags |= controls[ENABLE_POINTILISM] ? ShaderFlags.POINTILISM : ShaderFlags.NONE;\r\n    shaderFlags |= controls[ENABLE_PAINT] ? ShaderFlags.PAINT : ShaderFlags.NONE;\r\n    shaderFlags |= controls[ENABLE_VAPORWAVE] ? ShaderFlags.VAPORWAVE : ShaderFlags.NONE;\r\n    if (shaderFlags & ShaderFlags.VAPORWAVE) {\r\n        if (!sound.playing()) {\r\n            sound.play();\r\n        }\r\n    }\r\n    else {\r\n        sound.stop();\r\n    }\r\n}\r\n\r\nlet square: Square;\r\n\r\n// TODO: replace with your scene's stuff\r\n\r\nlet obj0: string;\r\nlet mesh0: Mesh;\r\nlet mesh1: Mesh;\r\nlet tps: Array<TerrainPlane>;\r\n\r\nlet tex0: Texture;\r\n\r\n\r\nvar timer = {\r\n    deltaTime: 0.0,\r\n    startTime: 0.0,\r\n    currentTime: 0.0,\r\n    updateTime: function () {\r\n        var t = Date.now();\r\n        t = (t - timer.startTime) * 0.001;\r\n        timer.deltaTime = t - timer.currentTime;\r\n        timer.currentTime = t;\r\n    },\r\n}\r\n\r\n\r\nfunction loadOBJText(path: string) {\r\n    obj0 = readTextFile(path)\r\n}\r\n\r\n\r\nfunction loadScene() {\r\n    square && square.destroy();\r\n    mesh0 && mesh0.destroy();\r\n    mesh1 && mesh1.destroy();\r\n    tps = [];\r\n\r\n    square = new Square(vec3.fromValues(0, 0, 0));\r\n    square.create();\r\n\r\n    //mesh0 = new Mesh(obj0, vec3.fromValues(0, 0, 0));\r\n    //mat4.identity(mesh0.modelMatrix);\r\n    //mat4.translate(mesh0.modelMatrix, mesh0.modelMatrix, vec3.fromValues(5, 3, 5));\r\n    //mat4.scale(mesh0.modelMatrix, mesh0.modelMatrix, vec3.fromValues(3, 3, 3));\r\n    //mesh0.create();\r\n\r\n    //mesh1 = new Mesh(obj0, vec3.fromValues(0, 0, 0));\r\n    //mat4.fromTranslation(mesh1.modelMatrix, vec3.fromValues(0, 0, translate));\r\n    //mat4.rotate(mesh1.modelMatrix, mesh1.modelMatrix, 0.75, vec3.fromValues(0, 1, 0));\r\n    //mat4.scale(mesh1.modelMatrix, mesh1.modelMatrix, vec3.fromValues(scale, scale, scale));\r\n    //mesh1.create();\r\n\r\n    //tex0 = new Texture('../resources/textures/lapras.png');\r\n}\r\n\r\nlet scale = 1.0;\r\nlet translate = -10.0;\r\n\r\nfunction loadModel(model: Model) {\r\n    if (model == Model.WAHOO) {\r\n        loadOBJText('res/models/polysphere.obj');\r\n        scale = 1.0;\r\n        translate = -10.0;\r\n    }\r\n    else if (model == Model.STARYU) {\r\n        loadOBJText('resources/obj/staryu.obj');\r\n        tex0 = new Texture('resources/textures/staryu.png');\r\n        scale = 0.7;\r\n        translate = -8.0;\r\n    }\r\n    else if (model == Model.LAPRAS) {\r\n        loadOBJText('resources/obj/lapras.obj');\r\n        tex0 = new Texture('resources/textures/lapras.png');\r\n        scale = 1.2;\r\n        translate = -30.0;\r\n    }\r\n    else if (model == Model.CHIKORITA) {\r\n        loadOBJText('resources/obj/chikorita.obj');\r\n        tex0 = new Texture('resources/textures/chikorita.png');\r\n        scale = 0.6;\r\n        translate = -7.0;\r\n    }\r\n    loadScene();\r\n}\r\n\r\nfunction main() {\r\n    // Initial display for framerate\r\n    const stats = Stats();\r\n    stats.setMode(0);\r\n    stats.domElement.style.position = 'absolute';\r\n    stats.domElement.style.left = '0px';\r\n    stats.domElement.style.top = '0px';\r\n    document.body.appendChild(stats.domElement);\r\n\r\n    // load audio\r\n    console.log(\"Loading vaporwave...\");\r\n    sound.load();\r\n    updateShaderFlags();\r\n\r\n    // Add controls to the gui\r\n    //const gui = new DAT.GUI();\r\n    //gui.add(controls, ENABLE_DOF).onChange(updateShaderFlags);\r\n    //gui.add(controls, ENABLE_BLOOM).onChange(updateShaderFlags);\r\n    //gui.add(controls, ENABLE_POINTILISM).onChange(updateShaderFlags);\r\n    //gui.add(controls, ENABLE_PAINT).onChange(updateShaderFlags);\r\n    //gui.add(controls, ENABLE_VAPORWAVE).onChange(updateShaderFlags);\r\n    //gui.add(controls, PAINT_COHERENCE, 0.0, 1.0);\r\n    //gui.add(controls, PAINT_BRUSH_SIZE, 0.0, 1.0);\r\n    //gui.add(controls, PAINT_BRUSH_NOISE, 0.0, 1.0);\r\n    //gui.add(controls, LOADED_MODEL, { \"Wahoo\": Model.WAHOO, \"Staryu\": Model.STARYU, \"Lapras\": Model.LAPRAS, \"Chikorita\": Model.CHIKORITA }).onChange(loadModel);\r\n\r\n    // get canvas and webgl context\r\n    const canvas = <HTMLCanvasElement>document.getElementById('canvas');\r\n    const gl = <WebGL2RenderingContext>canvas.getContext('webgl2');\r\n    if (!gl) {\r\n        alert('WebGL 2 not supported!');\r\n    }\r\n    //let debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\r\n    //let r = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\r\n    //console.log(r);\r\n    // `setGL` is a function imported above which sets the value of `gl` in the `globals.ts` module.\r\n    // Later, we can import `gl` from `globals.ts` to access it\r\n    setGL(gl);\r\n    gl.frontFace(gl.CCW);\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    // Initial call to load scene\r\n    loadScene();\r\n    //loadModel(Model.WAHOO);\r\n\r\n    const camera = new Camera(vec3.fromValues(1, 2, 5), vec3.fromValues(1, 0, 0));\r\n\r\n    const player = new Player(camera, camera.position, camera.direction);\r\n\r\n    const desertTerrain = new Terrain(vec3.fromValues(0, 0, 0), 4, 25, 4, 3, Level.DESERT);\r\n    const snowTerrain = new Terrain(vec3.fromValues(0, 0, 0), 4, 25, 4, 3, Level.SNOW);\r\n    const spookyTerrain = new Terrain(vec3.fromValues(0, 0, 0), 4, 25, 4, 3, Level.SPOOKY);\r\n\r\n    //terrain.drawables.push(mesh0);\r\n\r\n    const renderer = new OpenGLRenderer(canvas);\r\n    renderer.updateShaderFlags(shaderFlags);\r\n    renderer.setClearColor(0, 0, 0, 1);\r\n    gl.enable(gl.DEPTH_TEST);\r\n\r\n    player.terrain = spookyTerrain;\r\n    player.forceCorrectHeight();\r\n    renderer.setDeferredShader(Level.SPOOKY);\r\n    renderer.updateFadeInTime(0.0);\r\n    renderer.updateFadeOutTime(0.0);\r\n\r\n    const standardDeferred = new ShaderProgram([\r\n        new Shader(gl.VERTEX_SHADER, require('./shaders/standard-vert.glsl')),\r\n        new Shader(gl.FRAGMENT_SHADER, require('./shaders/standard-frag.glsl')),\r\n    ]);\r\n\r\n    standardDeferred.setupTexUnits([\"tex_Color\"]);\r\n\r\n    let exiting = false;\r\n    let exitTime = 0.0;\r\n\r\n    let entering = true;\r\n    let enterTime = 0.0;\r\n\r\n    console.time(\"render\");\r\n    function tick() {\r\n        //console.timeEnd(\"render\");\r\n        //console.time(\"update\");\r\n        //player.move(timer.deltaTime);\r\n        //vec3.copy(player.position, terrain.collide(player.position));\r\n        //terrain.updatePlanes(player.position);\r\n        player.update(timer.deltaTime);\r\n        // update entering/exiting state\r\n        if (player.terrain.shouldExit && !exiting && !entering) {\r\n            exiting = true;\r\n            exitTime = 0.0;\r\n            // TODO: disable player controls?\r\n            player.terrain.shouldExit = false;\r\n        }\r\n        if (exiting) {\r\n            exitTime += timer.deltaTime * 0.8;\r\n            if (exitTime > 1.0) {\r\n                // update state\r\n                exitTime = 1.0;\r\n                enterTime = 0.0;\r\n                entering = true;\r\n                exiting = false;\r\n                // actually exit level\r\n                switch (player.terrain.level) {\r\n                    case Level.DESERT:\r\n                        player.terrain = snowTerrain;\r\n                        renderer.setDeferredShader(Level.SNOW);\r\n                        break;\r\n                    case Level.SNOW:\r\n                        player.terrain = spookyTerrain;\r\n                        renderer.setDeferredShader(Level.SPOOKY);\r\n                        break;\r\n                    case Level.SPOOKY:\r\n                        player.terrain = desertTerrain;\r\n                        renderer.setDeferredShader(Level.DESERT);\r\n                        break;\r\n                }\r\n                player.forceCorrectHeight();\r\n                player.terrain.resetGhosts();\r\n                player.terrain.shouldExit = false;\r\n                // update new shader\r\n                renderer.updateFadeInTime(0.0);\r\n                renderer.updateFadeOutTime(0.0);\r\n            }\r\n            else {\r\n                renderer.updateFadeOutTime(exitTime);\r\n            }\r\n        }\r\n        else if (entering) {\r\n            enterTime += timer.deltaTime * 0.4;\r\n            if (enterTime > 1.0) {\r\n                enterTime = 1.0;\r\n                entering = false;\r\n            }\r\n            renderer.updateFadeInTime(enterTime);\r\n        }\r\n        //camera.update();\r\n        stats.begin();\r\n        gl.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n        timer.updateTime();\r\n        renderer.updateShaderFlags(shaderFlags);\r\n        //renderer.updateCoherence(controls[PAINT_COHERENCE]);\r\n        //renderer.updateBrushSize(controls[PAINT_BRUSH_SIZE]);\r\n        //renderer.updateBrushNoise(controls[PAINT_BRUSH_NOISE]);\r\n        renderer.updateTime(timer.deltaTime, timer.currentTime);\r\n\r\n        //standardDeferred.bindTexToUnit(\"tex_Color\", tex0, 0);\r\n\r\n        renderer.clear();\r\n        renderer.clearGB();\r\n\r\n        // TODO: pass any arguments you may need for shader passes\r\n        // forward render mesh info into gbuffers\r\n        renderer.renderToGBuffer(camera, standardDeferred, player.terrain.drawables);\r\n        //renderer.renderToGBuffer(camera, standardDeferred, [mesh0, mesh1, tp]);\r\n        // render from gbuffers into 32-bit color buffer\r\n        renderer.renderFromGBuffer(camera);\r\n        // apply 32-bit post and tonemap from 32-bit color to 8-bit color\r\n        renderer.renderPostProcessHDR();\r\n        // apply 8-bit post and draw\r\n        renderer.renderPostProcessLDR();\r\n\r\n        stats.end();\r\n        //console.timeEnd(\"update\");\r\n        requestAnimationFrame(tick);\r\n        //console.time(\"render\");\r\n    }\r\n\r\n    // pointer lock things\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API\r\n    // don't need to handle prefixes anymore?\r\n    canvas.onclick = function () {\r\n        canvas.requestPointerLock();\r\n    }\r\n\r\n    // need this so \"this\" is set properly in player's handler\r\n    function handleMouseMovement(event: MouseEvent) {\r\n        player.handleMouseMovement(event);\r\n    }\r\n\r\n    function handleMouseClick(event: MouseEvent) {\r\n        player.handleMouseClick(event);\r\n    }\r\n\r\n    function lockChangeAlert() {\r\n        if (document.pointerLockElement === canvas) {\r\n            console.log('The pointer lock status is now locked');\r\n            document.addEventListener(\"mousemove\", handleMouseMovement, false);\r\n            document.addEventListener(\"click\", handleMouseClick, false);\r\n        } else {\r\n            console.log('The pointer lock status is now unlocked');\r\n            document.removeEventListener(\"mousemove\", handleMouseMovement, false);\r\n            document.removeEventListener(\"click\", handleMouseClick, false);\r\n        }\r\n    }\r\n\r\n    // Event listeners\r\n\r\n    // Hook pointer lock state change events for different browsers\r\n    document.addEventListener('pointerlockchange', lockChangeAlert, false);\r\n\r\n    window.addEventListener('resize', function () {\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        camera.setAspectRatio(window.innerWidth / window.innerHeight);\r\n        camera.updateProjectionMatrix();\r\n    }, false);\r\n\r\n    window.addEventListener('keydown', function (event) {\r\n        // need to do this, otherwise \"this\" points to Window?\r\n        player.handleKeyDownEvent(event);\r\n    }, false);\r\n\r\n    window.addEventListener('keyup', function (event) {\r\n        player.handleKeyUpEvent(event);\r\n    }, false);\r\n\r\n    window.addEventListener('blur', function () {\r\n        player.handleLostFocus();\r\n    }, false);\r\n\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    camera.setAspectRatio(window.innerWidth / window.innerHeight);\r\n    camera.updateProjectionMatrix();\r\n\r\n    // Start the render loop\r\n    tick();\r\n}\r\n\r\n\r\nfunction setup() {\r\n    timer.startTime = Date.now();\r\n    //loadOBJText();\r\n    main();\r\n}\r\n\r\nsetup();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\"\r\n\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\nexport function fromValues(m00, m01, m10, m11) {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\nexport function set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    let a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function invert(out, a) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n\r\n  // Calculate the determinant\r\n  let det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] =  a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] =  a0 * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  let a0 = a[0];\r\n  out[0] =  a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] =  a0;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = a0 *  c + a2 * s;\r\n  out[1] = a1 *  c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let v0 = v[0], v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\r\n}\r\n\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\r\n\r\nexport function LDU(L, D, U, a) {\r\n  L[2] = a[2]/a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat2.js\n// module id = 20\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\nexport function fromValues(a, b, c, d, tx, ty) {\r\n  let out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\nexport function set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function invert(out, a) {\r\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\r\n  let atx = a[4], aty = a[5];\r\n\r\n  let det = aa * ad - ab * ac;\r\n  if(!det){\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = a0 *  c + a2 * s;\r\n  out[1] = a1 *  c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let v0 = v[0], v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function translate(out, a, v) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let v0 = v[0], v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  let s = Math.sin(rad), c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\r\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\r\n}\r\n\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  out[4] = a[4] + (b[4] * scale);\r\n  out[5] = a[5] + (b[5] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat2d.js\n// module id = 21\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  let out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    let a01 = a[1], a02 = a[2], a03 = a[3];\r\n    let a12 = a[6], a13 = a[7];\r\n    let a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\r\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\r\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\r\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\r\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\r\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  let x = v[0], y = v[1], z = v[2];\r\n  let a00, a01, a02, a03;\r\n  let a10, a11, a12, a13;\r\n  let a20, a21, a22, a23;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\r\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\r\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\r\n\r\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\r\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\r\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  let x = v[0], y = v[1], z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  let x = axis[0], y = axis[1], z = axis[2];\r\n  let len = Math.sqrt(x * x + y * y + z * z);\r\n  let s, c, t;\r\n  let a00, a01, a02, a03;\r\n  let a10, a11, a12, a13;\r\n  let a20, a21, a22, a23;\r\n  let b00, b01, b02;\r\n  let b10, b11, b12;\r\n  let b20, b21, b22;\r\n\r\n  if (Math.abs(len) < glMatrix.EPSILON) { return null; }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\r\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\r\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a10 = a[4];\r\n  let a11 = a[5];\r\n  let a12 = a[6];\r\n  let a13 = a[7];\r\n  let a20 = a[8];\r\n  let a21 = a[9];\r\n  let a22 = a[10];\r\n  let a23 = a[11];\r\n\r\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\r\n    out[0]  = a[0];\r\n    out[1]  = a[1];\r\n    out[2]  = a[2];\r\n    out[3]  = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a00 = a[0];\r\n  let a01 = a[1];\r\n  let a02 = a[2];\r\n  let a03 = a[3];\r\n  let a20 = a[8];\r\n  let a21 = a[9];\r\n  let a22 = a[10];\r\n  let a23 = a[11];\r\n\r\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\r\n    out[4]  = a[4];\r\n    out[5]  = a[5];\r\n    out[6]  = a[6];\r\n    out[7]  = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a00 = a[0];\r\n  let a01 = a[1];\r\n  let a02 = a[2];\r\n  let a03 = a[3];\r\n  let a10 = a[4];\r\n  let a11 = a[5];\r\n  let a12 = a[6];\r\n  let a13 = a[7];\r\n\r\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\r\n    out[8]  = a[8];\r\n    out[9]  = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  let x = axis[0], y = axis[1], z = axis[2];\r\n  let len = Math.sqrt(x * x + y * y + z * z);\r\n  let s, c, t;\r\n\r\n  if (Math.abs(len) < glMatrix.EPSILON) { return null; }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0]  = 1;\r\n  out[1]  = 0;\r\n  out[2]  = 0;\r\n  out[3]  = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0]  = c;\r\n  out[1]  = 0;\r\n  out[2]  = -s;\r\n  out[3]  = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0]  = c;\r\n  out[1]  = s;\r\n  out[2]  = 0;\r\n  out[3]  = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  let m11 = mat[0];\r\n  let m12 = mat[1];\r\n  let m13 = mat[2];\r\n  let m21 = mat[4];\r\n  let m22 = mat[5];\r\n  let m23 = mat[6];\r\n  let m31 = mat[8];\r\n  let m32 = mat[9];\r\n  let m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  let trace = mat[0] + mat[5] + mat[10];\r\n  let S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n  let sx = s[0];\r\n  let sy = s[1];\r\n  let sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  let sx = s[0];\r\n  let sy = s[1];\r\n  let sz = s[2];\r\n\r\n  let ox = o[0];\r\n  let oy = o[1];\r\n  let oz = o[2];\r\n\r\n  let out0 = (1 - (yy + zz)) * sx;\r\n  let out1 = (xy + wz) * sx;\r\n  let out2 = (xz - wy) * sx;\r\n  let out4 = (xy - wz) * sy;\r\n  let out5 = (1 - (xx + zz)) * sy;\r\n  let out6 = (yz + wx) * sy;\r\n  let out8 = (xz + wy) * sz;\r\n  let out9 = (yz - wx) * sz;\r\n  let out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let yx = y * x2;\r\n  let yy = y * y2;\r\n  let zx = z * x2;\r\n  let zy = z * y2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  let rl = 1 / (right - left);\r\n  let tb = 1 / (top - bottom);\r\n  let nf = 1 / (near - far);\r\n  out[0] = (near * 2) * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = (near * 2) * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = (far * near * 2) * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  let f = 1.0 / Math.tan(fovy / 2);\r\n  let nf = 1 / (near - far);\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = (2 * far * near) * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\r\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\r\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\r\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\r\n  let xScale = 2.0 / (leftTan + rightTan);\r\n  let yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = ((upTan - downTan) * yScale * 0.5);\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = (far * near) / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  let lr = 1 / (left - right);\r\n  let bt = 1 / (bottom - top);\r\n  let nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis. \r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\r\n  let eyex = eye[0];\r\n  let eyey = eye[1];\r\n  let eyez = eye[2];\r\n  let upx = up[0];\r\n  let upy = up[1];\r\n  let upz = up[2];\r\n  let centerx = center[0];\r\n  let centery = center[1];\r\n  let centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\r\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\r\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  let eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  let z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  let len = z0*z0 + z1*z1 + z2*z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  let x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0*x0 + x1*x1 + x2*x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\r\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\r\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\r\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  out[4] = a[4] + (b[4] * scale);\r\n  out[5] = a[5] + (b[5] * scale);\r\n  out[6] = a[6] + (b[6] * scale);\r\n  out[7] = a[7] + (b[7] * scale);\r\n  out[8] = a[8] + (b[8] * scale);\r\n  out[9] = a[9] + (b[9] * scale);\r\n  out[10] = a[10] + (b[10] * scale);\r\n  out[11] = a[11] + (b[11] * scale);\r\n  out[12] = a[12] + (b[12] * scale);\r\n  out[13] = a[13] + (b[13] * scale);\r\n  out[14] = a[14] + (b[14] * scale);\r\n  out[15] = a[15] + (b[15] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\r\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\r\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\r\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\r\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\r\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\r\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\r\n\r\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\r\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\r\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\r\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\r\n\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\r\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\r\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\r\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\r\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\r\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\r\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\r\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\r\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\r\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\r\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/mat4.js\n// module id = 22\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\"\r\nimport * as mat3 from \"./mat3.js\"\r\nimport * as vec3 from \"./vec3.js\"\r\nimport * as vec4 from \"./vec4.js\"\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  let s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  let rad = Math.acos(q[3]) * 2.0;\r\n  let s = Math.sin(rad / 2.0);\r\n  if (s != 0.0) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let bx = Math.sin(rad), bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let by = Math.sin(rad), bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let bz = Math.sin(rad), bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  let x = a[0], y = a[1], z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\r\n\r\n  let omega, cosom, sinom, scale0, scale1;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if ( cosom < 0.0 ) {\r\n    cosom = -cosom;\r\n    bx = - bx;\r\n    by = - by;\r\n    bz = - bz;\r\n    bw = - bw;\r\n  }\r\n  // calculate coefficients\r\n  if ( (1.0 - cosom) > 0.000001 ) {\r\n    // standard case (slerp)\r\n    omega  = Math.acos(cosom);\r\n    sinom  = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\r\n  let invDot = dot ? 1.0/dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0*invDot;\r\n  out[1] = -a1*invDot;\r\n  out[2] = -a2*invDot;\r\n  out[3] = a3*invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  let fTrace = m[0] + m[4] + m[8];\r\n  let fRoot;\r\n\r\n  if ( fTrace > 0.0 ) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5/fRoot;  // 1/(4w)\r\n    out[0] = (m[5]-m[7])*fRoot;\r\n    out[1] = (m[6]-m[2])*fRoot;\r\n    out[2] = (m[1]-m[3])*fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    let i = 0;\r\n    if ( m[4] > m[0] )\r\n      i = 1;\r\n    if ( m[8] > m[i*3+i] )\r\n      i = 2;\r\n    let j = (i+1)%3;\r\n    let k = (i+2)%3;\r\n\r\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\r\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\r\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n    let halfToRad = 0.5 * Math.PI / 180.0;\r\n    x *= halfToRad;\r\n    y *= halfToRad;\r\n    z *= halfToRad;\r\n\r\n    let sx = Math.sin(x);\r\n    let cx = Math.cos(x);\r\n    let sy = Math.sin(y);\r\n    let cy = Math.cos(y);\r\n    let sz = Math.sin(z);\r\n    let cz = Math.cos(z);\r\n\r\n    out[0] = sx * cy * cz - cx * sy * sz;\r\n    out[1] = cx * sy * cz + sx * cy * sz;\r\n    out[2] = cx * cy * sz - sx * sy * cz;\r\n    out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport const clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport const fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport const dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport const length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport const len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport const squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport const sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport const exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport const equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport const rotationTo = (function() {\r\n  let tmpvec3 = vec3.create();\r\n  let xUnitVec3 = vec3.fromValues(1,0,0);\r\n  let yUnitVec3 = vec3.fromValues(0,1,0);\r\n\r\n  return function(out, a, b) {\r\n    let dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001)\r\n        vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n})();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount\r\n * @returns {quat} out\r\n */\r\nexport const sqlerp = (function () {\r\n  let temp1 = create();\r\n  let temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}());\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport const setAxes = (function() {\r\n  let matr = mat3.create();\r\n\r\n  return function(out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/quat.js\n// module id = 23\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function fromValues(x, y) {\r\n  let out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nexport function set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\nexport function round (out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0],\r\n    y = b[1] - a[1];\r\n  return Math.sqrt(x*x + y*y);\r\n};\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n    y = b[1] - a[1];\r\n  return x*x + y*y;\r\n};\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  return Math.sqrt(x*x + y*y);\r\n};\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength (a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  return x*x + y*y;\r\n};\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  var len = x*x + y*y;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n  }\r\n  return out;\r\n};\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n};\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n    ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1];\r\n  let b0 = b[0], b1 = b[1];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nexport const len = length;\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nexport const div = divide;\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nexport const dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nexport const sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nexport const sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport const forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if(!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if(!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if(count) {\r\n      l = Math.min((count * stride) + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for(i = offset; i < l; i += stride) {\r\n      vec[0] = a[i]; vec[1] = a[i+1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0]; a[i+1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gl-matrix/src/gl-matrix/vec2.js\n// module id = 24\n// module chunks = 0","// stats.js - http://github.com/mrdoob/stats.js\nvar Stats=function(){var l=Date.now(),m=l,g=0,n=Infinity,o=0,h=0,p=Infinity,q=0,r=0,s=0,f=document.createElement(\"div\");f.id=\"stats\";f.addEventListener(\"mousedown\",function(b){b.preventDefault();t(++s%2)},!1);f.style.cssText=\"width:80px;opacity:0.9;cursor:pointer\";var a=document.createElement(\"div\");a.id=\"fps\";a.style.cssText=\"padding:0 0 3px 3px;text-align:left;background-color:#002\";f.appendChild(a);var i=document.createElement(\"div\");i.id=\"fpsText\";i.style.cssText=\"color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px\";\ni.innerHTML=\"FPS\";a.appendChild(i);var c=document.createElement(\"div\");c.id=\"fpsGraph\";c.style.cssText=\"position:relative;width:74px;height:30px;background-color:#0ff\";for(a.appendChild(c);74>c.children.length;){var j=document.createElement(\"span\");j.style.cssText=\"width:1px;height:30px;float:left;background-color:#113\";c.appendChild(j)}var d=document.createElement(\"div\");d.id=\"ms\";d.style.cssText=\"padding:0 0 3px 3px;text-align:left;background-color:#020;display:none\";f.appendChild(d);var k=document.createElement(\"div\");\nk.id=\"msText\";k.style.cssText=\"color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px\";k.innerHTML=\"MS\";d.appendChild(k);var e=document.createElement(\"div\");e.id=\"msGraph\";e.style.cssText=\"position:relative;width:74px;height:30px;background-color:#0f0\";for(d.appendChild(e);74>e.children.length;)j=document.createElement(\"span\"),j.style.cssText=\"width:1px;height:30px;float:left;background-color:#131\",e.appendChild(j);var t=function(b){s=b;switch(s){case 0:a.style.display=\n\"block\";d.style.display=\"none\";break;case 1:a.style.display=\"none\",d.style.display=\"block\"}};return{REVISION:12,domElement:f,setMode:t,begin:function(){l=Date.now()},end:function(){var b=Date.now();g=b-l;n=Math.min(n,g);o=Math.max(o,g);k.textContent=g+\" MS (\"+n+\"-\"+o+\")\";var a=Math.min(30,30-30*(g/200));e.appendChild(e.firstChild).style.height=a+\"px\";r++;b>m+1E3&&(h=Math.round(1E3*r/(b-m)),p=Math.min(p,h),q=Math.max(q,h),i.textContent=h+\" FPS (\"+p+\"-\"+q+\")\",a=Math.min(30,30-30*(h/100)),c.appendChild(c.firstChild).style.height=\na+\"px\",m=b,r=0);return b},update:function(){l=this.end()}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/stats-js/build/stats.min.js\n// module id = 25\n// module chunks = 0","import {vec2, vec3, vec4} from 'gl-matrix';\r\nimport Drawable from '../rendering/gl/Drawable';\r\nimport Collider from '../game/Collider';\r\nimport {gl} from '../globals';\r\nimport {smoothNoise} from '../Utils';\r\n\r\nconst NOISE_OFFSET = vec2.fromValues(3.141, -5.965);\r\n\r\nclass TerrainPlane extends Drawable {\r\n    indices: Uint32Array;\r\n    positions: Float32Array;\r\n    normals: Float32Array;\r\n    colors: Float32Array;\r\n    uvs: Float32Array;\r\n    origin: vec3; // bottom-left corner\r\n    tileDim: number; // dimension (height and width) of each tile\r\n    tileNum: number; // how many tiles exist on each axis\r\n    heightScale: number = 5;\r\n    heightField: Array<Array<number>> = [];\r\n    // colliders whose dimensions are in the same order of magnitude as tiles\r\n    colliders: Array<Array<Array<Collider>>> = [];\r\n    // huge colliders. believe me. biiiig colliders. biggest you'll ever see.\r\n    bigColliders: Array<Collider> = [];\r\n    color: vec4;\r\n\r\n    constructor(origin: vec3, tileDim: number, tileNum: number, frequency: number, heightModifier: (height: number) => number) {\r\n        super(); // Call the constructor of the super class. This is required.\r\n        this.origin = vec3.clone(origin);\r\n        this.color = vec4.fromValues(1.0, 1.0, 1.0, 1.0);\r\n        //this.origin = vec4.fromValues(origin[0], origin[1], origin[2], 1);\r\n        this.tileDim = tileDim;\r\n        this.tileNum = tileNum;\r\n\r\n        this.heightField = [];\r\n        this.colliders = [];\r\n        this.bigColliders = [];\r\n\r\n        // populate height field (indices refer to each tile, starting from origin)\r\n        let xzOrigin = vec2.fromValues(this.origin[0], this.origin[2]);\r\n        vec2.scale(xzOrigin, xzOrigin, frequency);\r\n        vec2.add(xzOrigin, xzOrigin, NOISE_OFFSET);\r\n        let xzOffset = vec2.create();\r\n        let xzPoint = vec2.create();\r\n        for (let i = 0; i < this.tileNum + 1; i++) {\r\n            let heights: Array<number> = [];\r\n            let collidersColumn: Array<Array<Collider>> = [];\r\n            for (let j = 0; j < this.tileNum + 1; j++) {\r\n                vec2.set(xzOffset, i, j);\r\n                vec2.scaleAndAdd(xzPoint, xzOrigin, xzOffset, this.tileDim * frequency);\r\n                heights.push(heightModifier(smoothNoise(xzPoint)));\r\n                collidersColumn.push([]);\r\n            }\r\n            this.heightField.push(heights);\r\n            if (i < this.tileNum) {\r\n                this.colliders.push(collidersColumn);\r\n            }\r\n        }\r\n    }\r\n\r\n    setColor(color: vec4) {\r\n        vec4.copy(this.color, color);\r\n    }\r\n\r\n\r\n    create() {\r\n        let posTemp: Array<number> = [];\r\n        let norTemp: Array<number> = [];\r\n        let uvsTemp: Array<number> = [];\r\n        let idxTemp: Array<number> = [];\r\n        let colTemp: Array<number> = [];\r\n\r\n        let xzOrigin = vec2.create();\r\n        let xzOffset = vec2.create();\r\n        let xzPoint = vec2.create();\r\n\r\n        // assumes heightField is initialized\r\n        function addPos(i: number, j: number, xOffset: number, zOffset: number): vec3 {\r\n            let pos = vec3.fromValues(\r\n                xzPoint[0] + xOffset * this.tileDim,\r\n                this.origin[1] + this.heightField[i + xOffset][j + zOffset],\r\n                xzPoint[1] + zOffset * this.tileDim\r\n            );\r\n            posTemp.push(pos[0]);\r\n            posTemp.push(pos[1]);\r\n            posTemp.push(pos[2]);\r\n            posTemp.push(1.0);\r\n            return pos;\r\n        }\r\n\r\n        function addNor(nor: vec3) {\r\n            norTemp.push(nor[0]);\r\n            norTemp.push(nor[1]);\r\n            norTemp.push(nor[2]);\r\n            norTemp.push(0.0);\r\n        }\r\n\r\n        // populate posTemp, etc. based on noise\r\n        vec2.set(xzOrigin, this.origin[0], this.origin[2]);\r\n        let absIdx = 0; // absolute index: i * (tileNum) + j\r\n        for (let i = 0; i < this.tileNum; i++) {\r\n            for (let j = 0; j < this.tileNum; j++) {\r\n                vec2.set(xzOffset, i, j);\r\n                vec2.scaleAndAdd(xzPoint, xzOrigin, xzOffset, this.tileDim);\r\n                // TODO: create pos, idx, etc.\r\n                // looking from top:\r\n                // 3--2\r\n                // | /|\r\n                // |/ |\r\n                // 0--1\r\n                // positions 0 and 2 are added twice, since  they\r\n                // can have different normals\r\n                // so positions look like [0, 1, 2, 0, 2, 3]\r\n                // indices are [0, 1, 2, 3, 4, 5]\r\n                // positions ==================================================\r\n                // call() makes \"this\" visible in addPos (wow!)\r\n                let pos1 = addPos.call(this, i, j, 1, 0);\r\n                let pos0 = addPos.call(this, i, j, 0, 0);\r\n                let pos2 = addPos.call(this, i, j, 1, 1);\r\n                addPos.call(this, i, j, 1, 1); // add 2 again\r\n                addPos.call(this, i, j, 0, 0); // add 0 again\r\n                let pos3 = addPos.call(this, i, j, 0, 1);\r\n                // normals ====================================================\r\n                let sideA = vec3.create();\r\n                let sideB = vec3.create();\r\n\r\n                let nor012 = vec3.create();\r\n                vec3.subtract(sideA, pos2, pos1);\r\n                vec3.subtract(sideB, pos0, pos1);\r\n                vec3.cross(nor012, sideB, sideA);\r\n                vec3.normalize(nor012, nor012);\r\n\r\n                let nor023 = vec3.create();\r\n                vec3.subtract(sideA, pos2, pos0);\r\n                vec3.subtract(sideB, pos3, pos0);\r\n                vec3.cross(nor023, sideB, sideA);\r\n                vec3.normalize(nor023, nor023);\r\n\r\n                for (let k = 0; k < 3; k++) {\r\n                    addNor(nor012);\r\n                }\r\n                for (let k = 0; k < 3; k++) {\r\n                    addNor(nor023);\r\n                }\r\n                // indices ====================================================\r\n                for (let k = 0; k < 6; k++) {\r\n                    idxTemp.push(absIdx * 6 + k);\r\n                    colTemp.push(this.color[0]);\r\n                    colTemp.push(this.color[1]);\r\n                    colTemp.push(this.color[2]);\r\n                    colTemp.push(this.color[3]);\r\n                    uvsTemp.push(0.0);\r\n                    uvsTemp.push(0.0);\r\n                }\r\n                absIdx++;\r\n            }\r\n        }\r\n\r\n        //posTemp = loadedMesh.vertices;\r\n        //for (var i = 0; i < loadedMesh.vertices.length; i++) {\r\n            //posTemp.push(loadedMesh.vertices[i]);\r\n            //if (i % 3 == 2) posTemp.push(1.0);\r\n        //}\r\n\r\n        //for (var i = 0; i < loadedMesh.vertexNormals.length; i++) {\r\n            //norTemp.push(loadedMesh.vertexNormals[i]);\r\n            //if (i % 3 == 2) norTemp.push(0.0);\r\n        //}\r\n\r\n        //uvsTemp = loadedMesh.textures;\r\n        //idxTemp = loadedMesh.indices;\r\n\r\n        // white vert color for now\r\n        //this.colors = new Float32Array(posTemp.length);\r\n        //for (var i = 0; i < posTemp.length; ++i) {\r\n            //this.colors[i] = 1.0;\r\n        //}\r\n\r\n        this.indices = new Uint32Array(idxTemp);\r\n        this.normals = new Float32Array(norTemp);\r\n        this.positions = new Float32Array(posTemp);\r\n        this.uvs = new Float32Array(uvsTemp);\r\n        this.colors = new Float32Array(colTemp);\r\n\r\n        this.generateIdx();\r\n        this.generatePos();\r\n        this.generateNor();\r\n        this.generateUV();\r\n        this.generateCol();\r\n\r\n        this.count = this.indices.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIdx);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufNor);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.normals, gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufPos);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufCol);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.STATIC_DRAW);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.STATIC_DRAW);\r\n\r\n    }\r\n};\r\n\r\nexport default TerrainPlane;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometry/TerrainPlane.ts","import {vec3, vec4, mat4, quat} from 'gl-matrix';\r\nimport Turtle from '../l-system/Turtle';\r\nimport {LSymbol, ExpansionRule} from '../l-system/LSymbol';\r\nimport LSystem from '../l-system/LSystem';\r\nimport Decoration from '../geometry/Decoration';\r\nimport {PRISM_HEIGHT} from '../geometry/Decoration';\r\nimport LString from '../l-system/LString';\r\nimport {lRandom, LRANDOM_DETERMINISTIC} from '../l-system/LRandom';\r\n\r\nclass BasicTree extends LSystem {\r\n\r\n    constructor(decoration: Decoration) {\r\n        super();\r\n        this.decoration = decoration;\r\n        this.prismSides = 5;\r\n    }\r\n\r\n    resetTurtleStack(pos: vec3) {\r\n        let t = new Turtle();\r\n        vec3.copy(t.position, pos);\r\n        t.scaleBottom = 0.75;\r\n        t.scaleTop = 0.75;\r\n        this.turtleStack = [t];\r\n    }\r\n\r\n    initAlphabet() {\r\n        this.alphabet = [];\r\n        // forward\r\n        let F = new LSymbol(\"F\", function (lsys: LSystem) {\r\n            let turtle = lsys.getTopTurtle();\r\n            lsys.addScaledPrismAtTurtleNoShrink(turtle, 0.8);\r\n            turtle.moveForward(PRISM_HEIGHT * 0.6);\r\n        });\r\n        this.alphabet.push(F);\r\n        // turn\r\n        // make turtle face in a mostly vertical direction that's not up\r\n        let T = new LSymbol(\"T\", function (lsys: LSystem) {\r\n            let turtle = lsys.getTopTurtle();\r\n            let angle = lRandom.getNext() * 2.0 * Math.PI;\r\n            let y = lRandom.getNext() * 0.5 + 0.25;\r\n            vec3.set(turtle.orientation, Math.cos(angle), y, Math.sin(angle));\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n            // temporarily shrink top\r\n            let top = turtle.scaleTop;\r\n            let bot = turtle.scaleBottom;\r\n            turtle.scaleTop *= 0.75;\r\n            turtle.scaleBottom *= 0.9;\r\n            lsys.addScaledPrismAtTurtleNoShrink(turtle, 0.4);\r\n            turtle.scaleTop = top;\r\n            turtle.scaleBottom = bot;\r\n            turtle.moveForward(PRISM_HEIGHT * 0.35);\r\n            // make next prisms thinner so they \"connect\" better\r\n            turtle.scaleBottom *= 0.5;\r\n        });\r\n        this.alphabet.push(T);\r\n        // straighten\r\n        // make turtle face up again\r\n        let S = new LSymbol(\"S\", function (lsys: LSystem) {\r\n            let turtle = lsys.getTopTurtle();\r\n            let angle = lRandom.getNext() * 2.0 * Math.PI;\r\n            let y = lRandom.getNext() * 0.3 + 0.45;\r\n            vec3.set(turtle.orientation, 0, 1, 0);\r\n            lsys.addScaledPrismAtTurtleNoShrink(turtle, 0.8);\r\n            turtle.moveForward(PRISM_HEIGHT * 0.8);\r\n        });\r\n        this.alphabet.push(S);\r\n        // push\r\n        let push = new LSymbol(\"[\", function (lsys: LSystem) {\r\n            let turtle = lsys.getTopTurtle();\r\n            let copy = turtle.makeDeepCopy();\r\n            copy.depth++;\r\n            lsys.turtleStack.push(copy);\r\n        });\r\n        this.alphabet.push(push);\r\n        // pop\r\n        let pop = new LSymbol(\"]\", function (lsys: LSystem) {\r\n            lsys.turtleStack.pop();\r\n        });\r\n        this.alphabet.push(pop);\r\n\r\n        // set expansion rules\r\n        F.setExpansionRules([\r\n            new ExpansionRule(4, [F]),\r\n            new ExpansionRule(1, [F, push, T, S, pop, F, F]),\r\n            new ExpansionRule(1, [F, F])\r\n        ]);\r\n        T.setExpansionRules([\r\n            new ExpansionRule(1, [T]),\r\n            new ExpansionRule(1, [push, T, S, pop, T])\r\n        ]);\r\n        S.setExpansionRules([\r\n            new ExpansionRule(2, [S]),\r\n            new ExpansionRule(1, [S, S])\r\n        ]);\r\n\r\n        this.setAxiom([\r\n            F, push, T, S, pop, push, T, S, pop\r\n        ]);\r\n    }\r\n\r\n    executeString() {\r\n        lRandom.setMode(LRANDOM_DETERMINISTIC);\r\n        let seed = lRandom.state;\r\n        lRandom.setSeed(0);\r\n        super.executeString();\r\n        lRandom.setSeed(seed);\r\n    }\r\n\r\n};\r\n\r\nexport default BasicTree;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/BasicTree.ts","import {vec3, mat4} from 'gl-matrix';\r\nimport {LSymbol, ExpansionRule} from './LSymbol';\r\nimport LSystem from './LSystem';\r\nimport {lRandom, LRANDOM_MATH_RANDOM, LRANDOM_DETERMINISTIC} from './LRandom';\r\n\r\n// Node of the linked list (LString)\r\nclass LStringNode {\r\n    sym: LSymbol; // symbol is reserved...\r\n    next: LStringNode;\r\n\r\n    constructor(sym: LSymbol, next: LStringNode) {\r\n        this.sym = sym;\r\n        this.next = next;\r\n    }\r\n}\r\n\r\n// Linked list of LSymbols\r\nclass LString {\r\n    head: LStringNode;\r\n\r\n    // constructs list from array\r\n    constructor(arr: Array<LSymbol>) {\r\n        this.fromArray(arr);\r\n    }\r\n\r\n    fromArray(arr: Array<LSymbol>) {\r\n        if (arr.length == 0) {\r\n            this.head = null;\r\n            return;\r\n        }\r\n        // initialize head\r\n        this.head = new LStringNode(arr[0], null);\r\n\r\n        // add following elements\r\n        let node = this.head;\r\n        for (let i = 1; i < arr.length; i++) {\r\n            let nextNode = new LStringNode(arr[i], null);\r\n            node.next = nextNode;\r\n            node = nextNode;\r\n        }\r\n    }\r\n\r\n    toString(): string {\r\n        let arr = Array<string>();\r\n        let node = this.head;\r\n        while (node != null) {\r\n            arr.push(node.sym.stringRepr);\r\n            node = node.next;\r\n        }\r\n        return arr.join(\"\");\r\n    }\r\n\r\n    expand() {\r\n        let node = this.head;\r\n        while (node != null) {\r\n            let nextNode = node.next;\r\n\r\n            if (node.sym.canExpand()) {\r\n                // expand!\r\n                //let p = Math.random();\r\n                let p = lRandom.getNext();\r\n                let arr = node.sym.expand(p);\r\n                // arr should never be empty\r\n                node.sym = arr[0];\r\n                if (arr.length > 1) {\r\n                    for (let i = 1; i < arr.length; i++) {\r\n                        let newNode = new LStringNode(arr[i], null);\r\n                        node.next = newNode;\r\n                        node = newNode;\r\n                    }\r\n                    node.next = nextNode;\r\n                }\r\n            }\r\n            node = nextNode;\r\n        }\r\n    }\r\n\r\n    execute(lsys: LSystem) {\r\n        let node = this.head;\r\n        while (node != null) {\r\n            node.sym.action(lsys);\r\n            node = node.next;\r\n        }\r\n    }\r\n\r\n    length() {\r\n        let len = 0;\r\n        let node = this.head;\r\n        while (node != null) {\r\n            len++;\r\n            node = node.next;\r\n        }\r\n        return len;\r\n    }\r\n\r\n};\r\n\r\nexport default LString;\n\n\n// WEBPACK FOOTER //\n// ./src/l-system/LString.ts","import {vec3, vec4, mat3, mat4, quat} from 'gl-matrix';\r\nimport Turtle from '../l-system/Turtle';\r\nimport {LSymbol, ExpansionRule} from '../l-system/LSymbol';\r\nimport LSystem from '../l-system/LSystem';\r\nimport Decoration from '../geometry/Decoration';\r\nimport {PRISM_HEIGHT} from '../geometry/Decoration';\r\nimport LString from '../l-system/LString';\r\nimport {lRandom, LRANDOM_DETERMINISTIC} from '../l-system/LRandom';\r\nimport {readTextFileSync} from '../globals';\r\nimport {normalizeRGB, mat3ToMat4} from '../Utils';\r\nimport * as Loader from 'webgl-obj-loader';\r\n\r\n// \"\"static\"\" variables (I love JS. It's so bad.)\r\nlet polySphere60: any = null;\r\nlet scarf: any = null;\r\n\r\nconst TWIG_SCALE = 0.1;\r\nconst FINGER_SCALE = 0.05;\r\nconst NOSE_SCALE = 0.075;\r\n\r\nconst SNOW_COLOR = normalizeRGB(200, 200, 255);\r\nconst WOOD_COLOR = normalizeRGB(60, 17, 0);\r\nconst NOSE_COLOR = normalizeRGB(455, 83, 30);\r\nconst SCARF_COLOR = normalizeRGB(20, 300, 300);\r\n\r\nclass Snowman extends LSystem {\r\n\r\n    seed: number;\r\n    rotation: mat3;\r\n    isSpecial: boolean;\r\n\r\n    constructor(decoration: Decoration, seed: number, isSpecial: boolean) {\r\n        super();\r\n        if (polySphere60 == null) {\r\n            let objString = readTextFileSync(\"res/models/polySphere60.obj\");\r\n            polySphere60 = new Loader.Mesh(objString);\r\n        }\r\n        if (scarf == null) {\r\n            let objString = readTextFileSync(\"res/models/scarf.obj\");\r\n            scarf = new Loader.Mesh(objString);\r\n        }\r\n        this.decoration = decoration;\r\n        this.prismSides = 5;\r\n        this.seed = seed;\r\n        // compute this snowman's rotation about Y\r\n        // get deterministic direction\r\n        lRandom.setMode(LRANDOM_DETERMINISTIC);\r\n        let oldSeed = lRandom.state;\r\n        lRandom.setSeed(this.seed);\r\n        let xzAngle = lRandom.getNext() * Math.PI * 2.0;\r\n        lRandom.setSeed(oldSeed);\r\n        // compute matrix\r\n        let rotMat4 = mat4.create();\r\n        mat4.fromYRotation(rotMat4, xzAngle);\r\n        this.rotation = mat3.create();\r\n        mat3.fromMat4(this.rotation, rotMat4);\r\n\r\n        this.isSpecial = isSpecial;\r\n    }\r\n\r\n    resetTurtleStack(pos: vec3) {\r\n        let t = new Turtle();\r\n        vec3.copy(t.position, pos);\r\n        if (this.isSpecial) {\r\n            t.scaleBottom = 15;\r\n            t.scaleTop = 15;\r\n         }\r\n        else {\r\n            t.scaleBottom = 1.5;\r\n            t.scaleTop = 1.5;\r\n        }\r\n        this.turtleStack = [t];\r\n    }\r\n\r\n    // TODO\r\n    initAlphabet() {\r\n        this.alphabet = [];\r\n        // do this to avoid \"this\" issues\r\n        let snowmanRotation = this.rotation;\r\n        let upFunction = function (lsys: LSystem) {\r\n            lsys.useColor(SNOW_COLOR);\r\n            let turtle = lsys.getTopTurtle();\r\n            // rotate mesh\r\n            // just want a random direction, so this is enough\r\n            // OK to overwrite orientation -- we generate a new one later\r\n            vec3.set(turtle.orientation, \r\n                lRandom.getNext() * 2.0 - 1.0,\r\n                lRandom.getNext() * 2.0 - 1.0,\r\n                lRandom.getNext() * 2.0 - 1.0\r\n            );\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n            // add mesh\r\n            lsys.addMeshAtTurtle(turtle, vec3.fromValues(turtle.scaleBottom, turtle.scaleBottom, turtle.scaleBottom), polySphere60);\r\n            // move turtle up, but not exactly up\r\n            vec3.set(turtle.orientation, \r\n                lRandom.getNext() * 2.0 - 1.0,\r\n                5.0, // big Y component to make direction close to up\r\n                lRandom.getNext() * 2.0 - 1.0\r\n            );\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n            turtle.moveForward(turtle.scaleBottom * 1.2);\r\n            // shrink next mesh\r\n            turtle.scaleBottom *= 0.7 + lRandom.getNext() * 0.15;\r\n        };\r\n        // up\r\n        let U = new LSymbol(\"U\", upFunction);\r\n        this.alphabet.push(U);\r\n        // terminal up\r\n        let terminalU = new LSymbol(\"u\", upFunction);\r\n        this.alphabet.push(terminalU);\r\n        // arm setup -- set turtle orientation to something useful for arms\r\n        let beginLeftArm = new LSymbol(\"(LA)\", function (lsys: LSystem) {\r\n            let turtle = lsys.getTopTurtle();\r\n            vec3.set(turtle.orientation, \r\n                lRandom.getNext() * 0.4 + 0.6, // big positive X\r\n                lRandom.getNext() * 0.8 - 0.2, // medium Y\r\n                lRandom.getNext() * 0.2 - 0.1  // small Z\r\n            );\r\n            // account for snowman's rotation\r\n            vec3.transformMat3(turtle.orientation, turtle.orientation, snowmanRotation);\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n            // move turtle so we're closer to the outside of the snowball\r\n            turtle.moveForward(turtle.scaleBottom * 0.8);\r\n        });\r\n        this.alphabet.push(beginLeftArm);\r\n\r\n        let beginRightArm = new LSymbol(\"(RA)\", function (lsys: LSystem) {\r\n            let turtle = lsys.getTopTurtle();\r\n            vec3.set(turtle.orientation, \r\n                -(lRandom.getNext() * 0.4 + 0.6), // big negative X\r\n                lRandom.getNext() * 0.8 - 0.2, // medium Y\r\n                lRandom.getNext() * 0.2 - 0.1  // small Z\r\n            );\r\n            // account for snowman's rotation\r\n            vec3.transformMat3(turtle.orientation, turtle.orientation, snowmanRotation);\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n            // move turtle so we're closer to the outside of the snowball\r\n            turtle.moveForward(turtle.scaleBottom * 0.8);\r\n        });\r\n        this.alphabet.push(beginRightArm);\r\n        // actual arm -- \"twig\"\r\n        let T = new LSymbol(\"T\", function (lsys: LSystem) {\r\n            lsys.useColor(WOOD_COLOR);\r\n            let turtle = lsys.getTopTurtle();\r\n            // add twig\r\n            let bot = turtle.scaleBottom;\r\n            // overwrite scaleBottom and scaleTop to make twig thin\r\n            turtle.scaleBottom = TWIG_SCALE * bot;\r\n            turtle.scaleTop = TWIG_SCALE * bot;\r\n            lsys.addScaledPrismAtTurtleNoShrink(turtle, bot * 0.1);\r\n            // move forward\r\n            turtle.moveForward(bot * 1.05);\r\n            // add mesh to connect with next part\r\n            turtle.scaleBottom *= 1.1;\r\n            lsys.addMeshAtTurtle(turtle, vec3.fromValues(turtle.scaleBottom, turtle.scaleBottom, turtle.scaleBottom), polySphere60);\r\n            // restore scaleBottom\r\n            turtle.scaleBottom = bot * 0.85;\r\n            // tweak direction upwards, with a bit of Z randomness\r\n            let tweak = vec3.fromValues(\r\n                0,\r\n                lRandom.getNext() * 0.3 + 0.4,\r\n                lRandom.getNext() * 0.8 - 0.4\r\n            );\r\n            // account for snowman's rotation\r\n            vec3.transformMat3(tweak, tweak, snowmanRotation);\r\n            vec3.add(turtle.orientation, turtle.orientation, tweak);\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n        });\r\n        this.alphabet.push(T);\r\n        // hand\r\n        let H = new LSymbol(\"H\", function (lsys: LSystem) {\r\n            lsys.useColor(WOOD_COLOR);\r\n            let turtle = lsys.getTopTurtle();\r\n            // add twig\r\n            let bot = turtle.scaleBottom;\r\n            // add 3 fingers. for each finger, pick a direction and draw prism\r\n            // overwrite scaleBottom and scaleTop to make twig thin\r\n            turtle.scaleBottom = TWIG_SCALE * bot * 0.5;\r\n            turtle.scaleTop = turtle.scaleBottom * 0.3;\r\n            // middle finger -- pick direction\r\n            let originalDir = vec3.clone(turtle.orientation);\r\n            let tweak = vec3.fromValues(\r\n                0,\r\n                lRandom.getNext() * 0.9 - 0.45,\r\n                0\r\n            );\r\n            let tweakRotated = vec3.create();\r\n            vec3.transformMat3(tweakRotated, tweak, snowmanRotation);\r\n            vec3.add(turtle.orientation, originalDir, tweakRotated);\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n            lsys.addScaledPrismAtTurtleNoShrink(turtle, bot * 0.05);\r\n            // left finger -- pick direction\r\n            tweak[2] = lRandom.getNext() * 1.5; // add strong Z component\r\n            if (tweak[2] < 0.75) {\r\n                tweak[2] *= 2.0;\r\n            }\r\n            vec3.transformMat3(tweakRotated, tweak, snowmanRotation);\r\n            vec3.add(turtle.orientation, originalDir, tweakRotated);\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n            lsys.addScaledPrismAtTurtleNoShrink(turtle, bot * 0.05);\r\n            // right finger -- pick direction\r\n            tweak[2] *= -1.0; // go opposite direction of left finger\r\n            vec3.transformMat3(tweakRotated, tweak, snowmanRotation);\r\n            vec3.add(turtle.orientation, originalDir, tweakRotated);\r\n            vec3.normalize(turtle.orientation, turtle.orientation);\r\n            lsys.addScaledPrismAtTurtleNoShrink(turtle, bot * 0.05);\r\n        });\r\n        this.alphabet.push(H);\r\n        // nose\r\n        let N = new LSymbol(\"N\", function (lsys: LSystem) {\r\n            lsys.useColor(NOSE_COLOR);\r\n            let turtle = lsys.getTopTurtle();\r\n            // find face's direction\r\n            let faceDirection = vec3.fromValues(0, 0, 1);\r\n            vec3.transformMat3(faceDirection, faceDirection, snowmanRotation);\r\n            vec3.normalize(faceDirection, faceDirection);\r\n            // add nose (\"cone\")\r\n            vec3.copy(turtle.orientation, faceDirection);\r\n            let bot = turtle.scaleBottom;\r\n            turtle.scaleBottom = NOSE_SCALE * bot * 2.0;\r\n            turtle.scaleTop = turtle.scaleBottom * 0.2;\r\n            lsys.addScaledPrismAtTurtleNoShrink(turtle, bot * 0.2);\r\n            turtle.scaleBottom = bot;\r\n        });\r\n        this.alphabet.push(H);\r\n        // scarf\r\n        let S = new LSymbol(\"S\", function (lsys: LSystem) {\r\n            lsys.useColor(SCARF_COLOR);\r\n            let turtle = lsys.getTopTurtle();\r\n            // temporarily move down a little\r\n            let oldY = turtle.position[1];\r\n            turtle.position[1] -= turtle.scaleBottom * 0.5;\r\n            lsys.addMeshAtTurtleRotation(turtle, vec3.fromValues(turtle.scaleBottom, turtle.scaleBottom, turtle.scaleBottom), mat3ToMat4(snowmanRotation), scarf);\r\n            turtle.position[1] = oldY;\r\n        });\r\n        this.alphabet.push(S);\r\n        // push\r\n        let push = new LSymbol(\"[\", function (lsys: LSystem) {\r\n            let turtle = lsys.getTopTurtle();\r\n            let copy = turtle.makeDeepCopy();\r\n            copy.depth++;\r\n            lsys.turtleStack.push(copy);\r\n        });\r\n        this.alphabet.push(push);\r\n        // pop\r\n        let pop = new LSymbol(\"]\", function (lsys: LSystem) {\r\n            lsys.turtleStack.pop();\r\n        });\r\n        this.alphabet.push(pop);\r\n\r\n        // nop\r\n        let nop = new LSymbol(\"0\", function (lsys: LSystem) {\r\n        });\r\n        this.alphabet.push(nop);\r\n\r\n        // set expansion rules\r\n        U.setExpansionRules([\r\n            new ExpansionRule(4, [U]),\r\n            new ExpansionRule(1, [U, terminalU]),\r\n            new ExpansionRule(2, [terminalU]),\r\n            new ExpansionRule(2, [terminalU, terminalU])\r\n        ]);\r\n\r\n        // make scarf rare on non-special snowmen\r\n        if (!this.isSpecial) {\r\n            S.setExpansionRules([\r\n                new ExpansionRule(1, [S]),\r\n                new ExpansionRule(2, [nop]),\r\n            ]);\r\n        }\r\n\r\n        this.setAxiom([\r\n            U,\r\n            push, beginLeftArm, T, T, H, pop, push, beginRightArm, T, T, H, pop,\r\n            terminalU,\r\n            S, N,\r\n            terminalU,\r\n        ]);\r\n    }\r\n\r\n    executeString() {\r\n        lRandom.setMode(LRANDOM_DETERMINISTIC);\r\n        let seed = lRandom.state;\r\n        lRandom.setSeed(this.seed);\r\n        super.executeString();\r\n        lRandom.setSeed(seed);\r\n    }\r\n\r\n};\r\n\r\nexport default Snowman;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/Snowman.ts","import {vec3, vec4, mat3, mat4, quat} from 'gl-matrix';\r\nimport Turtle from '../l-system/Turtle';\r\nimport {LSymbol, ExpansionRule} from '../l-system/LSymbol';\r\nimport LSystem from '../l-system/LSystem';\r\nimport Decoration from '../geometry/Decoration';\r\nimport {PRISM_HEIGHT} from '../geometry/Decoration';\r\nimport LString from '../l-system/LString';\r\nimport {lRandom, LRANDOM_DETERMINISTIC} from '../l-system/LRandom';\r\nimport {readTextFileSync} from '../globals';\r\nimport {normalizeRGB, mat3ToMat4} from '../Utils';\r\nimport * as Loader from 'webgl-obj-loader';\r\n\r\n// \"\"static\"\" variables (I love JS. It's so bad.)\r\nlet ghostBody: any = null;\r\nlet roundEyes: any = null;\r\n\r\nconst TWIG_SCALE = 0.1;\r\nconst FINGER_SCALE = 0.05;\r\nconst NOSE_SCALE = 0.075;\r\n\r\nconst BODY_COLOR = normalizeRGB(200, 200, 255);\r\nconst EYE_COLOR = normalizeRGB(60, 17, 0);\r\nconst NOSE_COLOR = normalizeRGB(455, 83, 30);\r\n\r\nclass Ghost extends LSystem {\r\n\r\n    seed: number;\r\n    rotation: mat3;\r\n    playerOffset: vec3;\r\n    bobValue: number;\r\n    bobFrequency: number;\r\n\r\n    constructor(decoration: Decoration, seed: number) {\r\n        super();\r\n        if (ghostBody == null) {\r\n            let objString = readTextFileSync(\"res/models/ghostBody.obj\");\r\n            ghostBody = new Loader.Mesh(objString);\r\n        }\r\n        if (roundEyes == null) {\r\n            let objString = readTextFileSync(\"res/models/roundEyes.obj\");\r\n            roundEyes = new Loader.Mesh(objString);\r\n        }\r\n        this.decoration = decoration;\r\n        this.prismSides = 5;\r\n        this.seed = seed;\r\n        // compute this snowman's rotation about Y\r\n        // get deterministic direction\r\n        lRandom.setMode(LRANDOM_DETERMINISTIC);\r\n        let oldSeed = lRandom.state;\r\n        lRandom.setSeed(this.seed);\r\n        let xzAngle = lRandom.getNext() * Math.PI * 2.0;\r\n        this.bobValue = lRandom.getNext() * Math.PI;\r\n        this.bobFrequency = 3.0 + 5.0 * lRandom.getNext();\r\n        lRandom.setSeed(oldSeed);\r\n        // compute matrix\r\n        //let rotMat4 = mat4.create();\r\n        //mat4.fromYRotation(rotMat4, xzAngle);\r\n        this.rotation = mat3.create();\r\n        //mat3.fromMat4(this.rotation, rotMat4);\r\n\r\n        this.playerOffset = vec3.create();\r\n    }\r\n\r\n    resetTurtleStack(pos: vec3) {\r\n        let t = new Turtle();\r\n        vec3.copy(t.position, pos);\r\n        t.scaleBottom = 1.5;\r\n        t.scaleTop = 1.5;\r\n        this.turtleStack = [t];\r\n    }\r\n\r\n    // TODO\r\n    initAlphabet() {\r\n        this.alphabet = [];\r\n        // do this to avoid \"this\" issues\r\n        let snowmanRotation = this.rotation;\r\n        // body\r\n        let B = new LSymbol(\"B\", function (lsys: LSystem) {\r\n            lsys.useColor(BODY_COLOR);\r\n            let turtle = lsys.getTopTurtle();\r\n            lsys.addMeshAtTurtleRotation(turtle, vec3.fromValues(turtle.scaleBottom, turtle.scaleBottom, turtle.scaleBottom), mat3ToMat4(snowmanRotation), ghostBody);\r\n        });\r\n        this.alphabet.push(B);\r\n        // eyes\r\n        let E = new LSymbol(\"E\", function (lsys: LSystem) {\r\n            lsys.useColor(EYE_COLOR);\r\n            let turtle = lsys.getTopTurtle();\r\n            lsys.addMeshAtTurtleRotation(turtle, vec3.fromValues(turtle.scaleBottom, turtle.scaleBottom, turtle.scaleBottom), mat3ToMat4(snowmanRotation), roundEyes);\r\n        });\r\n        this.alphabet.push(B);\r\n        // push\r\n        let push = new LSymbol(\"[\", function (lsys: LSystem) {\r\n            let turtle = lsys.getTopTurtle();\r\n            let copy = turtle.makeDeepCopy();\r\n            copy.depth++;\r\n            lsys.turtleStack.push(copy);\r\n        });\r\n        this.alphabet.push(push);\r\n        // pop\r\n        let pop = new LSymbol(\"]\", function (lsys: LSystem) {\r\n            lsys.turtleStack.pop();\r\n        });\r\n        this.alphabet.push(pop);\r\n\r\n        // set expansion rules\r\n\r\n        this.setAxiom([\r\n            B, E,\r\n            //U,\r\n            //push, beginLeftArm, T, T, H, pop, push, beginRightArm, T, T, H, pop,\r\n            //terminalU,\r\n            //N,\r\n            //terminalU,\r\n        ]);\r\n    }\r\n\r\n    executeString() {\r\n        lRandom.setMode(LRANDOM_DETERMINISTIC);\r\n        let seed = lRandom.state;\r\n        lRandom.setSeed(this.seed);\r\n        super.executeString();\r\n        lRandom.setSeed(seed);\r\n    }\r\n\r\n    setModelMatrix(model: mat4) {\r\n        mat4.copy(this.decoration.modelMatrix, model);\r\n    }\r\n\r\n};\r\n\r\nexport default Ghost;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/Ghost.ts","import Camera from '../Camera';\r\nimport Collider from './Collider';\r\nimport {clamp, maxVec2, absVec2} from '../Utils';\r\nimport {vec2, vec3, mat4} from 'gl-matrix';\r\n\r\nconst ZERO_VEC2 = vec2.fromValues(0, 0);\r\n\r\nclass SquareCollider extends Collider {\r\n    dims: vec2;\r\n\r\n    constructor(position: vec2, radius: number) {\r\n        super(position, radius);\r\n        this.dims = vec2.fromValues(radius, radius);\r\n    }\r\n\r\n    // if collision happens, returns position where no collision happens\r\n    // else, return null\r\n    collide(otherPos: vec2, otherRadius: number): vec2 {\r\n        // from IQ: http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\r\n        // center around square\r\n        let centeredOther = vec2.create();\r\n        vec2.subtract(centeredOther, otherPos, this.position);\r\n        let absCenteredOther = absVec2(centeredOther);\r\n        let diff = vec2.create();\r\n        vec2.subtract(diff, absCenteredOther, this.dims);\r\n        let dist = vec2.length(maxVec2(diff, ZERO_VEC2));\r\n        if (dist >= otherRadius) {\r\n            return null;\r\n        }\r\n        else {\r\n            let outsidePos = vec2.clone(otherPos);\r\n            if (diff[0] > diff[1]) {\r\n                let adjustment = otherRadius - diff[0];\r\n                if (otherPos[0] > this.position[0]) {\r\n                    outsidePos[0] += adjustment;\r\n                }\r\n                else {\r\n                    outsidePos[0] -= adjustment;\r\n                }\r\n            }\r\n            else {\r\n                let adjustment = otherRadius - diff[1];\r\n                if (otherPos[1] > this.position[1]) {\r\n                    outsidePos[1] += adjustment;\r\n                }\r\n                else {\r\n                    outsidePos[1] -= adjustment;\r\n                }\r\n            }\r\n            return outsidePos;\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport default SquareCollider;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/SquareCollider.ts","import {mat4, vec2, vec4, vec3} from 'gl-matrix';\r\nimport Drawable from './Drawable';\r\nimport Camera from '../../Camera';\r\nimport {gl} from '../../globals';\r\nimport ShaderProgram, {Shader} from './ShaderProgram';\r\nimport PostProcess from './PostProcess'\r\nimport Square from '../../geometry/Square';\r\nimport {Level} from '../../game/Terrain';\r\nimport ShaderFlags from './ShaderFlags';\r\n\r\nclass OpenGLRenderer {\r\n    gBuffer: WebGLFramebuffer; // framebuffer for deferred rendering\r\n\r\n    gbTargets: WebGLTexture[]; // references to different 4-channel outputs of the gbuffer\r\n    // Note that the constructor of OpenGLRenderer initializes\r\n    // gbTargets[0] to store 32-bit values, while the rest\r\n    // of the array stores 8-bit values. You can modify\r\n    // this if you want more 32-bit storage.\r\n\r\n    depthTexture: WebGLTexture; // You don't need to interact with this, it's just\r\n    // so the OpenGL pipeline can do depth sorting\r\n\r\n    // post-processing buffers pre-tonemapping (32-bit color)\r\n    post32Buffers: WebGLFramebuffer[];\r\n    post32Targets: WebGLTexture[];\r\n\r\n    // pre-processing buffers pre-tonemapping (32-bit color)\r\n    pre32Buffers: WebGLFramebuffer[];\r\n    pre32Targets: WebGLTexture[];\r\n\r\n    // post-processing buffers post-tonemapping (8-bit color)\r\n    post8Buffers: WebGLFramebuffer[];\r\n    post8Targets: WebGLTexture[];\r\n\r\n    // post processing shader lists, try to limit the number for performance reasons\r\n    post8Passes: PostProcess[];\r\n    post32Passes: PostProcess[];\r\n    pre32Passes: PostProcess[];\r\n\r\n    currentTime: number; // timer number to apply to all drawing shaders\r\n\r\n    shaderFlags: ShaderFlags; // flags saying which shaders are enabled\r\n    static compiledShaders = new Map<number, Array<PostProcess>>([\r\n        [ShaderFlags.DOF, undefined],\r\n        [ShaderFlags.BLOOM, undefined],\r\n        [ShaderFlags.POINTILISM, undefined],\r\n        [ShaderFlags.PAINT, undefined],\r\n        [ShaderFlags.VAPORWAVE, undefined],\r\n    ]);\r\n\r\n    // the shader that renders from the gbuffers into the postbuffers\r\n    deferredShaderDesert: PostProcess = new PostProcess(\r\n        new Shader(gl.FRAGMENT_SHADER, require('../../shaders/deferred-render-desert.glsl'))\r\n    );\r\n    deferredShaderSnow: PostProcess = new PostProcess(\r\n        new Shader(gl.FRAGMENT_SHADER, require('../../shaders/deferred-render-snow.glsl'))\r\n    );\r\n    deferredShaderSpooky: PostProcess = new PostProcess(\r\n        new Shader(gl.FRAGMENT_SHADER, require('../../shaders/deferred-render.glsl'))\r\n    );\r\n    deferredShader: PostProcess;\r\n\r\n    // shader that maps 32-bit color to 8-bit color\r\n    tonemapPass: PostProcess = new PostProcess(\r\n        new Shader(gl.FRAGMENT_SHADER, require('../../shaders/tonemap-frag.glsl'))\r\n    );\r\n\r\n\r\n    add8BitPass(pass: PostProcess) {\r\n        this.post8Passes.push(pass);\r\n    }\r\n\r\n\r\n    add32BitPass(pass: PostProcess) {\r\n        this.post32Passes.push(pass);\r\n    }\r\n\r\n    add32BitPrePass(pass: PostProcess) {\r\n        this.pre32Passes.push(pass);\r\n    }\r\n\r\n    clearPasses() {\r\n        this.post8Passes = [];\r\n        this.post32Passes = [];\r\n        this.pre32Passes = [];\r\n    }\r\n\r\n    updateShaderFlags(newFlags: ShaderFlags) {\r\n        if (newFlags == this.shaderFlags) {\r\n            return;\r\n        }\r\n        this.shaderFlags = newFlags;\r\n        // update passes accordingly\r\n        this.clearPasses();\r\n        if (this.shaderFlags == ShaderFlags.NONE) {\r\n            return;\r\n        }\r\n        if (this.shaderFlags & ShaderFlags.DOF) {\r\n            // TODOX: make 8 bit?\r\n            let shaders = OpenGLRenderer.compiledShaders.get(ShaderFlags.DOF);\r\n            this.add32BitPass(shaders[0]);\r\n            this.add32BitPass(shaders[1]);\r\n        }\r\n        if (this.shaderFlags & ShaderFlags.BLOOM) {\r\n            let shaders = OpenGLRenderer.compiledShaders.get(ShaderFlags.BLOOM);\r\n            this.add32BitPrePass(shaders[0]);\r\n            for (let i = 0; i < 2; i++) {\r\n                this.add32BitPrePass(shaders[1]);\r\n                this.add32BitPrePass(shaders[2]);\r\n            }\r\n            this.add32BitPass(shaders[3]);\r\n        }\r\n        if (this.shaderFlags & ShaderFlags.POINTILISM) {\r\n            let shaders = OpenGLRenderer.compiledShaders.get(ShaderFlags.POINTILISM);\r\n            this.add8BitPass(shaders[0]);\r\n        }\r\n        if (this.shaderFlags & ShaderFlags.VAPORWAVE) {\r\n            let shaders = OpenGLRenderer.compiledShaders.get(ShaderFlags.VAPORWAVE);\r\n            this.add8BitPass(shaders[0]);\r\n            this.add8BitPass(shaders[1]);\r\n        }\r\n    }\r\n\r\n    updateCoherence(coherence: number) {\r\n        if (this.shaderFlags & ShaderFlags.PAINT) {\r\n            OpenGLRenderer.compiledShaders.get(ShaderFlags.PAINT)[0].setCoherence(coherence);\r\n        }\r\n    }\r\n\r\n    updateBrushSize(brushSize: number) {\r\n        if (this.shaderFlags & ShaderFlags.PAINT) {\r\n            OpenGLRenderer.compiledShaders.get(ShaderFlags.PAINT)[1].setBrushSize(brushSize);\r\n        }\r\n    }\r\n\r\n    updateBrushNoise(brushNoise: number) {\r\n        if (this.shaderFlags & ShaderFlags.PAINT) {\r\n            OpenGLRenderer.compiledShaders.get(ShaderFlags.PAINT)[1].setBrushNoise(brushNoise);\r\n        }\r\n    }\r\n\r\n    updateFadeInTime(fadeInTime: number) {\r\n        this.deferredShader.setFadeInTime(fadeInTime);\r\n    }\r\n\r\n    updateFadeOutTime(fadeOutTime: number) {\r\n        this.deferredShader.setFadeOutTime(fadeOutTime);\r\n    }\r\n\r\n    constructor(public canvas: HTMLCanvasElement) {\r\n        this.currentTime = 0.0;\r\n        this.gbTargets = [undefined, undefined, undefined];\r\n        this.post8Buffers = [undefined, undefined];\r\n        this.post8Targets = [undefined, undefined];\r\n        this.post8Passes = [];\r\n\r\n        this.post32Buffers = [undefined, undefined];\r\n        this.post32Targets = [undefined, undefined];\r\n        this.post32Passes = [];\r\n\r\n        this.pre32Buffers = [undefined, undefined];\r\n        this.pre32Targets = [undefined, undefined];\r\n        this.pre32Passes = [];\r\n\r\n        this.shaderFlags = ShaderFlags.NONE;\r\n\r\n        // compile shaders if they haven't been compiled yet\r\n        if (OpenGLRenderer.compiledShaders.get(ShaderFlags.DOF) == undefined) {\r\n            let arr = [\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/dofBlurX-frag.glsl'))),\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/dofBlurY-frag.glsl'))),\r\n            ];\r\n            OpenGLRenderer.compiledShaders.set(ShaderFlags.DOF, arr);\r\n        }\r\n        if (OpenGLRenderer.compiledShaders.get(ShaderFlags.BLOOM) == undefined) {\r\n            let arr = [\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/bloomHigh-frag.glsl'))),\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/blurX-frag.glsl'))),\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/blurY-frag.glsl'))),\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/bloomAdd-frag.glsl'))),\r\n            ];\r\n            OpenGLRenderer.compiledShaders.set(ShaderFlags.BLOOM, arr);\r\n        }\r\n        if (OpenGLRenderer.compiledShaders.get(ShaderFlags.POINTILISM) == undefined) {\r\n            let arr = [\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/pointilism-frag.glsl'))),\r\n            ];\r\n            OpenGLRenderer.compiledShaders.set(ShaderFlags.POINTILISM, arr);\r\n        }\r\n        if (OpenGLRenderer.compiledShaders.get(ShaderFlags.PAINT) == undefined) {\r\n            let arr = [\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/curl-frag.glsl'))),\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/paint-frag.glsl'))),\r\n            ];\r\n            OpenGLRenderer.compiledShaders.set(ShaderFlags.PAINT, arr);\r\n        }\r\n        if (OpenGLRenderer.compiledShaders.get(ShaderFlags.VAPORWAVE) == undefined) {\r\n            let arr = [\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/vaporwave-frag.glsl'))),\r\n                new PostProcess(new Shader(gl.FRAGMENT_SHADER, require('../../shaders/vaporwaveGlitches-frag.glsl'))),\r\n            ];\r\n            OpenGLRenderer.compiledShaders.set(ShaderFlags.VAPORWAVE, arr);\r\n        }\r\n\r\n        if (!gl.getExtension(\"OES_texture_float_linear\")) {\r\n            console.error(\"OES_texture_float_linear not available\");\r\n        }\r\n\r\n        if (!gl.getExtension(\"EXT_color_buffer_float\")) {\r\n            console.error(\"FLOAT color buffer not available\");\r\n        }\r\n\r\n        this.setDeferredShader(Level.DESERT);\r\n    }\r\n\r\n    setDeferredShader(which: Level) {\r\n        switch (which) {\r\n            case Level.DESERT:\r\n                this.deferredShader = this.deferredShaderDesert;\r\n                break;\r\n            case Level.SNOW:\r\n                this.deferredShader = this.deferredShaderSnow;\r\n                break;\r\n            case Level.SPOOKY:\r\n                this.deferredShader = this.deferredShaderSpooky;\r\n                break;\r\n        }\r\n\r\n        var gb0loc = gl.getUniformLocation(this.deferredShader.prog, \"u_gb0\");\r\n        var gb1loc = gl.getUniformLocation(this.deferredShader.prog, \"u_gb1\");\r\n        var gb2loc = gl.getUniformLocation(this.deferredShader.prog, \"u_gb2\");\r\n\r\n        this.deferredShader.use();\r\n        gl.uniform1i(gb0loc, 0);\r\n        gl.uniform1i(gb1loc, 1);\r\n        gl.uniform1i(gb2loc, 2);\r\n    }\r\n\r\n    setClearColor(r: number, g: number, b: number, a: number) {\r\n        gl.clearColor(r, g, b, a);\r\n    }\r\n\r\n\r\n    setSize(width: number, height: number) {\r\n        console.log(width, height);\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n\r\n        // --- GBUFFER CREATION START ---\r\n        // refresh the gbuffers\r\n        this.gBuffer = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.gBuffer);\r\n        gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1, gl.COLOR_ATTACHMENT2]);\r\n\r\n        for (let i = 0; i < this.gbTargets.length; i++) {\r\n            this.gbTargets[i] = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, this.gbTargets[i]);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n            if (i == 0) {\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, gl.drawingBufferWidth, gl.drawingBufferHeight, 0, gl.RGBA, gl.FLOAT, null);\r\n            }\r\n            else {\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, gl.drawingBufferWidth, gl.drawingBufferHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n            }\r\n\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, this.gbTargets[i], 0);\r\n        }\r\n        // depth attachment\r\n        this.depthTexture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT32F, gl.drawingBufferWidth, gl.drawingBufferHeight, 0, gl.DEPTH_COMPONENT, gl.FLOAT, null);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture, 0);\r\n\r\n        var FBOstatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n        if (FBOstatus != gl.FRAMEBUFFER_COMPLETE) {\r\n            console.error(\"GL_FRAMEBUFFER_COMPLETE failed, CANNOT use FBO[0]\\n\");\r\n        }\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n        // create the framebuffers for post processing\r\n        for (let i = 0; i < this.post8Buffers.length; i++) {\r\n\r\n            // 8 bit buffers have unsigned byte textures of type gl.RGBA8\r\n            this.post8Buffers[i] = gl.createFramebuffer()\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.post8Buffers[i]);\r\n            gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\r\n\r\n            this.post8Targets[i] = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, this.post8Targets[i]);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, gl.drawingBufferWidth, gl.drawingBufferHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.post8Targets[i], 0);\r\n\r\n            FBOstatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n            if (FBOstatus != gl.FRAMEBUFFER_COMPLETE) {\r\n                console.error(\"GL_FRAMEBUFFER_COMPLETE failed, CANNOT use 8 bit FBO\\n\");\r\n            }\r\n\r\n            // 32 bit buffers have float textures of type gl.RGBA32F\r\n            this.post32Buffers[i] = gl.createFramebuffer()\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.post32Buffers[i]);\r\n            gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\r\n\r\n            this.post32Targets[i] = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, this.post32Targets[i]);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, gl.drawingBufferWidth, gl.drawingBufferHeight, 0, gl.RGBA, gl.FLOAT, null);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.post32Targets[i], 0);\r\n\r\n            FBOstatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n            if (FBOstatus != gl.FRAMEBUFFER_COMPLETE) {\r\n                console.error(\"GL_FRAMEBUFFER_COMPLETE failed, CANNOT use 8 bit FBO\\n\");\r\n            }\r\n\r\n            // 32 bit buffers have float textures of type gl.RGBA32F\r\n            this.pre32Buffers[i] = gl.createFramebuffer()\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.pre32Buffers[i]);\r\n            gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\r\n\r\n            this.pre32Targets[i] = gl.createTexture();\r\n            gl.bindTexture(gl.TEXTURE_2D, this.pre32Targets[i]);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, gl.drawingBufferWidth, gl.drawingBufferHeight, 0, gl.RGBA, gl.FLOAT, null);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.pre32Targets[i], 0);\r\n\r\n            FBOstatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n            if (FBOstatus != gl.FRAMEBUFFER_COMPLETE) {\r\n                console.error(\"GL_FRAMEBUFFER_COMPLETE failed, CANNOT use 8 bit FBO\\n\");\r\n            }\r\n        }\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n        // update u_Dims\r\n        let dims = vec2.fromValues(width, height);\r\n        for (let entry of OpenGLRenderer.compiledShaders.entries()) {\r\n            // can't filter by which is active, since filter may be re-enabled without\r\n            // a resize event\r\n            //if (!(this.shaderFlags & entry[0])) {\r\n                //continue;\r\n            //}\r\n            for (let shader of entry[1]) {\r\n                shader.setDims(dims);\r\n            }\r\n        }\r\n        /*\r\n        for (let pass of this.pre32Passes) {\r\n            pass.setDims(dims);\r\n        }\r\n        for (let pass of this.post32Passes) {\r\n            pass.setDims(dims);\r\n        }\r\n        for (let pass of this.post8Passes) {\r\n            pass.setDims(dims);\r\n        }\r\n        */\r\n\r\n    }\r\n\r\n\r\n    updateTime(deltaTime: number, currentTime: number) {\r\n        this.deferredShader.setTime(currentTime);\r\n        for (let entry of OpenGLRenderer.compiledShaders.entries()) {\r\n            if (!(this.shaderFlags & entry[0])) {\r\n                continue;\r\n            }\r\n            for (let shader of entry[1]) {\r\n                shader.setTime(currentTime);\r\n            }\r\n        }\r\n        /*\r\n        for (let pass of this.post8Passes) pass.setTime(currentTime);\r\n        for (let pass of this.post32Passes) pass.setTime(currentTime);\r\n        for (let pass of this.pre32Passes) pass.setTime(currentTime);\r\n        */\r\n        this.currentTime = currentTime;\r\n    }\r\n\r\n\r\n    clear() {\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n\r\n    clearGB() {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.gBuffer);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n\r\n    renderToGBuffer(camera: Camera, gbProg: ShaderProgram, drawables: Array<Drawable>) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.gBuffer);\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        gl.enable(gl.DEPTH_TEST);\r\n\r\n        //let model = mat4.create();\r\n        let viewProj = mat4.create();\r\n        let view = camera.viewMatrix;\r\n        let proj = camera.projectionMatrix;\r\n        let color = vec4.fromValues(0.5, 0.5, 0.5, 1);\r\n\r\n        //mat4.identity(model);\r\n        mat4.multiply(viewProj, camera.projectionMatrix, camera.viewMatrix);\r\n        //gbProg.setModelMatrix(model);\r\n        gbProg.setViewProjMatrix(viewProj);\r\n        gbProg.setGeometryColor(color);\r\n        gbProg.setViewMatrix(view);\r\n        gbProg.setProjMatrix(proj);\r\n\r\n        gbProg.setTime(this.currentTime);\r\n\r\n        for (let drawable of drawables) {\r\n            if (drawable.isActive) {\r\n                gbProg.setModelMatrix(drawable.modelMatrix);\r\n                gbProg.draw(drawable);\r\n            }\r\n        }\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    }\r\n\r\n    renderFromGBuffer(camera: Camera) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.post32Buffers[0]);\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.enable(gl.BLEND);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        let view = camera.viewMatrix;\r\n        let proj = camera.projectionMatrix;\r\n        this.deferredShader.setViewMatrix(view);\r\n        this.deferredShader.setProjMatrix(proj);\r\n        this.deferredShader.setAspectRatio(camera.aspectRatio);\r\n\r\n        for (let i = 0; i < this.gbTargets.length; i++) {\r\n            gl.activeTexture(gl.TEXTURE0 + i);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.gbTargets[i]);\r\n        }\r\n\r\n        this.deferredShader.draw();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n\r\n    // TODO: pass any info you need as args\r\n    renderPostProcessHDR() {\r\n        // TODO: replace this with your post 32-bit pipeline\r\n        // the loop shows how to swap between frame buffers and textures given a list of processes,\r\n        // but specific shaders (e.g. bloom) need specific info as textures\r\n\r\n        // \"pre-passes\" for post-processing\r\n        let j = 0;\r\n        // put original framebuffer in texture 0\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.post32Targets[0]);\r\n        // put GBuffer0 in texture 2\r\n        gl.activeTexture(gl.TEXTURE2);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.gbTargets[0]);\r\n        for (j = 0; j < this.pre32Passes.length; j++) {\r\n            // Pingpong framebuffers for each pass.\r\n            // In other words, repeatedly flip between storing the output of the\r\n            // current pre-process pass in pre32Buffers[1] and pre32Buffers[0].\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.pre32Buffers[(j + 1) % 2]);\r\n\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            gl.disable(gl.DEPTH_TEST);\r\n            gl.enable(gl.BLEND);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n            gl.activeTexture(gl.TEXTURE1);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.pre32Targets[(j) % 2]);\r\n\r\n            this.pre32Passes[j].draw();\r\n\r\n            // bind default frame buffer\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        }\r\n\r\n        // now pre32Targets (0th or 1th, depending on j) has result of pre-pass\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.pre32Targets[(j) % 2]);\r\n\r\n        // actual post-processing\r\n        let i = 0;\r\n        for (i = 0; i < this.post32Passes.length; i++) {\r\n            // Pingpong framebuffers for each pass.\r\n            // In other words, repeatedly flip between storing the output of the\r\n            // current post-process pass in post32Buffers[1] and post32Buffers[0].\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.post32Buffers[(i + 1) % 2]);\r\n\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            gl.disable(gl.DEPTH_TEST);\r\n            gl.enable(gl.BLEND);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n            // Recall that each frame buffer is associated with a texture that stores\r\n            // the output of a render pass. post32Targets is the array that stores\r\n            // these textures, so we alternate reading from the 0th and 1th textures\r\n            // each frame (the texture we wrote to in our previous render pass).\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.post32Targets[(i) % 2]);\r\n\r\n            this.post32Passes[i].draw();\r\n\r\n            // bind default frame buffer\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        }\r\n\r\n        // do paint manually to avoid conflicts with bloom\r\n        if (this.shaderFlags & ShaderFlags.PAINT) {\r\n            // TODOX: why bloom doesn't work with paint???\r\n            let shaders = OpenGLRenderer.compiledShaders.get(ShaderFlags.PAINT);\r\n            // pre-pass =======================================================\r\n            // put original framebuffer in texture 0\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.post32Targets[i % 2]);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.pre32Buffers[(j + 1) % 2]);\r\n\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            gl.disable(gl.DEPTH_TEST);\r\n            gl.enable(gl.BLEND);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n            //gl.activeTexture(gl.TEXTURE1);\r\n            //gl.bindTexture(gl.TEXTURE_2D, this.pre32Targets[(j) % 2]);\r\n\r\n            shaders[0].draw();\r\n\r\n            // bind default frame buffer\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n            j++;\r\n\r\n            // set right texture\r\n            gl.activeTexture(gl.TEXTURE1);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.pre32Targets[(j) % 2]);\r\n            \r\n            // post-pass ======================================================\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.post32Buffers[(i + 1) % 2]);\r\n\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            gl.disable(gl.DEPTH_TEST);\r\n            gl.enable(gl.BLEND);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n            // Recall that each frame buffer is associated with a texture that stores\r\n            // the output of a render pass. post32Targets is the array that stores\r\n            // these textures, so we alternate reading from the 0th and 1th textures\r\n            // each frame (the texture we wrote to in our previous render pass).\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.post32Targets[(i) % 2]);\r\n\r\n            shaders[1].draw();\r\n\r\n            // bind default frame buffer\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n            i++;\r\n        }\r\n\r\n        // apply tonemapping\r\n        // TODO: if you significantly change your framework, ensure this doesn't cause bugs!\r\n        // render to the first 8 bit buffer if there is more post, else default buffer\r\n        if (this.post8Passes.length > 0) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.post8Buffers[0]);\r\n        }\r\n        else {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        }\r\n\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.enable(gl.BLEND);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        // bound texture is the last one processed before\r\n\r\n        // render pre or post\r\n        gl.bindTexture(gl.TEXTURE_2D, this.post32Targets[Math.max(0, i) % 2]);\r\n        //gl.bindTexture(gl.TEXTURE_2D, this.pre32Targets[Math.max(0, j) % 2]);\r\n\r\n        this.tonemapPass.draw();\r\n\r\n    }\r\n\r\n\r\n    // TODO: pass any info you need as args\r\n    renderPostProcessLDR() {\r\n        // TODO: replace this with your post 8-bit pipeline\r\n        // the loop shows how to swap between frame buffers and textures given a list of processes,\r\n        // but specific shaders (e.g. motion blur) need specific info as textures\r\n        for (let i = 0; i < this.post8Passes.length; i++) {\r\n            // pingpong framebuffers for each pass\r\n            // if this is the last pass, default is bound\r\n            if (i < this.post8Passes.length - 1) gl.bindFramebuffer(gl.FRAMEBUFFER, this.post8Buffers[(i + 1) % 2]);\r\n            else gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            gl.disable(gl.DEPTH_TEST);\r\n            gl.enable(gl.BLEND);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this.post8Targets[(i) % 2]);\r\n\r\n            this.post8Passes[i].draw();\r\n\r\n            // bind default\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport default OpenGLRenderer;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/rendering/gl/OpenGLRenderer.ts","import Texture from './Texture';\r\nimport {gl} from '../../globals';\r\nimport ShaderProgram, {Shader} from './ShaderProgram';\r\nimport Drawable from './Drawable';\r\nimport Square from '../../geometry/Square';\r\nimport {vec3, vec4, mat4} from 'gl-matrix';\r\n\r\nclass PostProcess extends ShaderProgram {\r\n\tstatic screenQuad: Square = undefined; // Quadrangle onto which we draw the frame texture of the last render pass\r\n\tunifFrame: WebGLUniformLocation; // The handle of a sampler2D in our shader which samples the texture drawn to the quad\r\n\tunifPreFrame: WebGLUniformLocation; // Previous pre-pass's result\r\n\tunifGBuf0: WebGLUniformLocation; // GBuffer 0\r\n\tname: string;\r\n\r\n\tconstructor(fragProg: Shader, tag: string = \"default\") {\r\n\t\tsuper([new Shader(gl.VERTEX_SHADER, require('../../shaders/screenspace-vert.glsl')),\r\n\t\t\tfragProg]);\r\n\r\n\t\tthis.unifFrame = gl.getUniformLocation(this.prog, \"u_frame\");\r\n\t\tthis.unifPreFrame = gl.getUniformLocation(this.prog, \"u_preFrame\");\r\n\t\tthis.unifGBuf0 = gl.getUniformLocation(this.prog, \"u_gb0\");\r\n\t\tthis.use();\r\n\t\tthis.name = tag;\r\n\r\n\t\t// bind texture unit 0 to this location\r\n        if (this.unifFrame != -1) {\r\n            gl.uniform1i(this.unifFrame, 0); // gl.TEXTURE0\r\n        }\r\n        if (this.unifPreFrame != -1) {\r\n\t\t    gl.uniform1i(this.unifPreFrame, 1); // gl.TEXTURE1\r\n        }\r\n        if (this.unifGBuf0 != -1) {\r\n\t\t    gl.uniform1i(this.unifGBuf0, 2); // gl.TEXTURE2\r\n        }\r\n\t\tif (PostProcess.screenQuad === undefined) {\r\n\t\t\tPostProcess.screenQuad = new Square(vec3.fromValues(0, 0, 0));\r\n\t\t\tPostProcess.screenQuad.create();\r\n\t\t}\r\n\t}\r\n\r\n  \tdraw() {\r\n  \t\tsuper.draw(PostProcess.screenQuad);\r\n  \t}\r\n\r\n  \tgetName() : string { return this.name; }\r\n\r\n}\r\n\r\nexport default PostProcess;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/rendering/gl/PostProcess.ts","module.exports = \"#version 300 es\\r\\n\\r\\n// A vertex shader used by all post-process shaders to simply pass UV data\\r\\n// to the fragment shader, and to position the vertices of the screen-space quad \\r\\n\\r\\nprecision highp float;\\r\\n\\r\\nin vec4 vs_Pos;\\r\\nin vec4 vs_Nor;\\r\\nin vec4 vs_Col;\\r\\nin vec2 vs_UV;\\r\\n\\r\\nout vec2 fs_UV;\\r\\n\\r\\nvoid main() {\\r\\n\\tfs_UV = vs_UV;\\r\\n\\tgl_Position = vs_Pos;\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/screenspace-vert.glsl\n// module id = 34\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\n#define EPS 0.0001\\r\\n#define PI 3.1415962\\r\\n#define FAR 100.0\\r\\n\\r\\n// 1 / (e - 1)\\r\\n#define INV_E_MINUS_ONE 0.5819767\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_gb0;\\r\\n//uniform sampler2D u_gb1;\\r\\nuniform sampler2D u_gb2;\\r\\n\\r\\nuniform float u_Time;\\r\\nuniform float u_AspectRatio;\\r\\n\\r\\nuniform float u_FadeInTime;\\r\\nuniform float u_FadeOutTime;\\r\\n\\r\\nuniform mat4 u_View;\\r\\nuniform vec4 u_CamPos;   \\r\\n\\r\\nconst float CAMERA_TAN = tan(0.5 * 45.0 * 3.1415962 / 180.0);\\r\\nconst float DEPTH_OFFSET = 0.0;\\r\\n\\r\\nconst vec3 LIGHT_DIR = vec3(50, 120, 100);\\r\\n  \\r\\nconst vec3 NEXT_BG_COLOR = vec3(0.39, 0.39, 1.99);\\r\\n\\r\\nfloat getLambert(vec3 worldPos, vec3 normal) {\\r\\n    vec3 toLight = normalize(LIGHT_DIR);\\r\\n    float dotProd = clamp(dot(toLight, normal), 0.0, 1.0);\\r\\n    return pow(dotProd, 5.0);\\r\\n}\\r\\n\\r\\n// noise helper functions\\r\\n\\r\\n// from Adam's demo\\r\\nvec2 random2(vec2 p) {\\r\\n    //vec2 sinVec = sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))));\\r\\n    //return sinVec * 0.5 + vec2(0.5);\\r\\n    //return fract(sinVec * 123.45);\\r\\n    //return fract(sinVec * 43758.5453);\\r\\n    return normalize(2.0 * fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))))*123.45) - 1.0);\\r\\n}\\r\\n\\r\\nfloat surflet(vec2 P, vec2 gridPoint)\\r\\n{\\r\\n    //return (P.x * P.x) * 0.07;\\r\\n    // Compute falloff function by converting linear distance to a polynomial\\r\\n    float distX = abs(P.x - gridPoint.x);\\r\\n    float distY = abs(P.y - gridPoint.y);\\r\\n    float tX = 1.0 - 6.0 * pow(distX, 5.0) + 15.0 * pow(distX, 4.0) - 10.0 * pow(distX, 3.0);\\r\\n    float tY = 1.0 - 6.0 * pow(distY, 5.0) + 15.0 * pow(distY, 4.0) - 10.0 * pow(distY, 3.0);\\r\\n\\r\\n    // Get the random vector for the grid point\\r\\n    vec2 gradient = random2(gridPoint);\\r\\n    // Get the vector from the grid point to P\\r\\n    vec2 diff = P - gridPoint;\\r\\n    // Get the value of our height field by dotting grid->P with our gradient\\r\\n    float height = dot(diff, gradient);\\r\\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\\r\\n    return height * tX * tY;\\r\\n}\\r\\n\\r\\nfloat PerlinNoise(vec2 uv)\\r\\n{\\r\\n    // Tile the space\\r\\n    vec2 uvXLYL = floor(uv);\\r\\n    vec2 uvXHYL = uvXLYL + vec2(1, 0);\\r\\n    vec2 uvXHYH = uvXLYL + vec2(1, 1);\\r\\n    vec2 uvXLYH = uvXLYL + vec2(0, 1);\\r\\n\\r\\n    return surflet(uv, uvXLYL) + surflet(uv, uvXHYL) + surflet(uv, uvXHYH) + surflet(uv, uvXLYH);\\r\\n}\\r\\n\\r\\n\\r\\nfloat normalizedPerlinNoise(vec2 v) {\\r\\n    return clamp(PerlinNoise(v) + 0.5, 0.0, 1.0);\\r\\n}\\r\\n\\r\\n/* FBM (uses Perlin) */\\r\\nfloat getFBM(vec2 pt, float startFreq) {\\r\\n    float noiseSum = 0.0;\\r\\n    float amplitudeSum = 0.0;\\r\\n    float amplitude = 1.0;\\r\\n    float frequency = startFreq;\\r\\n    for (int i = 0; i < 6; i++) {\\r\\n        float perlin = normalizedPerlinNoise(pt * frequency);\\r\\n        noiseSum += perlin * amplitude;\\r\\n        amplitudeSum += amplitude;\\r\\n        amplitude *= 0.5;\\r\\n        frequency *= 2.0;\\r\\n    }\\r\\n    return noiseSum / amplitudeSum;\\r\\n}\\r\\n\\r\\n// \\\"normalizes\\\" coordinate before calling FBM\\r\\nfloat getFBMFromRawPosition(vec2 pos, float startFreq) {\\r\\n    vec2 coord = pos;\\r\\n    coord += vec2(3.14, 5.01);// +vec2(u_PerlinSeed);\\r\\n                              //return pow(sin(coord.x + coord.y), 2.0);\\r\\n    float fbm = getFBM(coord, startFreq);\\r\\n    // [0.1, 0.8]\\r\\n    //return pow((fbm - 0.05) / 0.7, 3.2);\\r\\n    fbm = pow((fbm - 0.05) / 0.7, 3.2);\\r\\n    fbm = smoothstep(0.0, 1.3, fbm);\\r\\n    return fbm;\\r\\n    //return pow(1.0 - fbm, 2.2);\\r\\n    //return pow(clamp(0.0, 1.0, (fbm - 0.25) / 0.6), 3.2) * 0.5;\\r\\n}\\r\\n\\r\\nvec3 getBGColor(float fbm) {\\r\\n    float f = smoothstep(-0.8, 3.0, fbm);\\r\\n    float H = mod(u_Time * 15.0, 360.0);\\r\\n    const float V = 0.8;\\r\\n    float S = 0.7 * (1.0 - f);\\r\\n    /*\\r\\n    float f = smoothstep(0.0, 1.0, fbm);\\r\\n    const float H = 288.0;\\r\\n    float V = 1.0;\\r\\n    float S = 0.5 * (1.0 - f);\\r\\n    */\\r\\n\\r\\n    float C = V * S;\\r\\n    // h = H / 60\\r\\n    float h = H / 60.0;\\r\\n    float X = C * (1.0 - abs(mod(h, 2.0) - 1.0));\\r\\n    //float X = C * 0.8;\\r\\n    vec3 col;\\r\\n    if (h <= 1.0) {\\r\\n        col = vec3(C, X, 0.0);\\r\\n    }\\r\\n    else if (h <= 2.0) {\\r\\n        col = vec3(X, C, 0.0);\\r\\n    }\\r\\n    else if (h <= 3.0) {\\r\\n        col = vec3(0.0, C, X);\\r\\n    }\\r\\n    else if (h <= 4.0) {\\r\\n        col = vec3(0.0, X, C);\\r\\n    }\\r\\n    else if (h <= 5.0) {\\r\\n        col = vec3(X, 0.0, C);\\r\\n    }\\r\\n    else {\\r\\n        col = vec3(C, 0.0, X);\\r\\n    }\\r\\n    float m = V - C;\\r\\n    return pow(col + vec3(m), vec3(4.2));\\r\\n}\\r\\n\\r\\nfloat getFogFactor(float dist) {\\r\\n    return min(1.0, INV_E_MINUS_ONE * (exp(dist / FAR) - 1.0));\\r\\n}\\r\\n\\r\\nvoid main() { \\r\\n\\t// read from GBuffers\\r\\n\\tvec4 gb0 = texture(u_gb0, fs_UV);\\r\\n\\t//vec4 gb1 = texture(u_gb1, fs_UV);\\r\\n\\tvec4 gb2 = texture(u_gb2, fs_UV);\\r\\n\\r\\n    // put GBuffer data in more readable variables\\r\\n    vec3 nor = gb0.xyz;\\r\\n    float depth = gb0.w;\\r\\n    vec3 albedo = gb2.xyz;\\r\\n\\r\\n    // final color of this fragment\\r\\n    vec3 col;\\r\\n\\r\\n    float time = u_Time * 0.03;\\r\\n    //float fbm = getFBMFromRawPosition(fs_UV + vec2(-8.88 + cos(time * 5.0), 7.22 + time * 1.5), 1.0 + 0.5 * sin(time * 2.0));\\r\\n    //vec3 bgColor = getBGColor(fbm);\\r\\n    //vec3 bgColor = vec3(0.1, 0.1, 1.99);\\r\\n    vec3 bgColor = vec3(1.99, 0.1, 0.0);\\r\\n    float fogFactor = getFogFactor(-depth);\\r\\n    // background\\r\\n    if (depth >= -DEPTH_OFFSET) {\\r\\n        //fogFactor = getFogFactor(FAR);\\r\\n        col = bgColor;\\r\\n    }\\r\\n    // shade\\r\\n    else {\\r\\n        depth += DEPTH_OFFSET;\\r\\n        // get cam-space position\\r\\n        vec3 ndcPos = vec3(fs_UV.xy * 2.0 - 1.0, depth);\\r\\n        float vert = CAMERA_TAN * abs(depth);\\r\\n        float hori = vert * u_AspectRatio;\\r\\n        vec3 camPos = ndcPos * vec3(hori, vert, 1.0);\\r\\n        // convert to world-space pos\\r\\n        vec3 worldPos = vec3(inverse(u_View) * vec4(camPos, 1.0));\\r\\n        //vec3 lookDir = normalize(vec3(inverse(u_View) * vec4(0, 0, 1, 0)));\\r\\n        //vec3 halfDir = normalize(lookDir + normalize(LIGHT_DIR));\\r\\n        //float blinn = pow(clamp(dot(halfDir, nor), 0.0, 1.0), 8.0);\\r\\n        //col = max(0.05, (0.05 + 0.95 * getLambert(worldPos, nor))) * albedo + vec3(0.02 * blinn);\\r\\n        col = max(0.05, (0.05 + 0.95 * getLambert(worldPos, nor))) * albedo;\\r\\n        //col = abs(nor) * 0.6;\\r\\n        //vec3 someLight = vec3(15, 0, 15);\\r\\n        //float d = 0.000001 + distance(worldPos, someLight);\\r\\n        //float lightFactor = min(1.0, 0.1 / (d * d));\\r\\n        //col += vec3(0, 0, 100.0 + 300.0 * (cos(time * 100.0) * 0.5 + 0.5)) * lightFactor;\\r\\n    }\\r\\n    col = mix(col, bgColor, fogFactor);\\r\\n    col = mix(bgColor, col, u_FadeInTime); // fade in from this BG color\\r\\n    col = mix(col, NEXT_BG_COLOR, u_FadeOutTime); // fade out into \\\"next\\\" BG color\\r\\n    col *= 5.0;\\r\\n\\tout_Col = vec4(col, 1.0);\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/deferred-render-desert.glsl\n// module id = 35\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\n#define EPS 0.0001\\r\\n#define PI 3.1415962\\r\\n#define FAR 100.0\\r\\n\\r\\n// 1 / (e - 1)\\r\\n#define INV_E_MINUS_ONE 0.5819767\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_gb0;\\r\\n//uniform sampler2D u_gb1;\\r\\nuniform sampler2D u_gb2;\\r\\n\\r\\nuniform float u_Time;\\r\\nuniform float u_AspectRatio;\\r\\n\\r\\nuniform float u_FadeInTime;\\r\\nuniform float u_FadeOutTime;\\r\\n\\r\\nuniform mat4 u_View;\\r\\nuniform vec4 u_CamPos;   \\r\\n\\r\\nconst float CAMERA_TAN = tan(0.5 * 45.0 * 3.1415962 / 180.0);\\r\\nconst float DEPTH_OFFSET = 0.0;\\r\\n\\r\\nconst vec3 LIGHT_DIR = vec3(50, 120, 100);\\r\\n\\r\\nconst vec3 NEXT_BG_COLOR = vec3(0.19, 0.09, 0.19);\\r\\n\\r\\nfloat getLambert(vec3 worldPos, vec3 normal) {\\r\\n    vec3 toLight = normalize(LIGHT_DIR);\\r\\n    float dotProd = clamp(dot(toLight, normal), 0.0, 1.0);\\r\\n    return pow(dotProd, 0.75);\\r\\n}\\r\\n\\r\\n// noise helper functions\\r\\n\\r\\n// from Adam's demo\\r\\nvec2 random2(vec2 p) {\\r\\n    //vec2 sinVec = sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))));\\r\\n    //return sinVec * 0.5 + vec2(0.5);\\r\\n    //return fract(sinVec * 123.45);\\r\\n    //return fract(sinVec * 43758.5453);\\r\\n    return normalize(2.0 * fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))))*123.45) - 1.0);\\r\\n}\\r\\n\\r\\nfloat surflet(vec2 P, vec2 gridPoint)\\r\\n{\\r\\n    //return (P.x * P.x) * 0.07;\\r\\n    // Compute falloff function by converting linear distance to a polynomial\\r\\n    float distX = abs(P.x - gridPoint.x);\\r\\n    float distY = abs(P.y - gridPoint.y);\\r\\n    float tX = 1.0 - 6.0 * pow(distX, 5.0) + 15.0 * pow(distX, 4.0) - 10.0 * pow(distX, 3.0);\\r\\n    float tY = 1.0 - 6.0 * pow(distY, 5.0) + 15.0 * pow(distY, 4.0) - 10.0 * pow(distY, 3.0);\\r\\n\\r\\n    // Get the random vector for the grid point\\r\\n    vec2 gradient = random2(gridPoint);\\r\\n    // Get the vector from the grid point to P\\r\\n    vec2 diff = P - gridPoint;\\r\\n    // Get the value of our height field by dotting grid->P with our gradient\\r\\n    float height = dot(diff, gradient);\\r\\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\\r\\n    return height * tX * tY;\\r\\n}\\r\\n\\r\\nfloat PerlinNoise(vec2 uv)\\r\\n{\\r\\n    // Tile the space\\r\\n    vec2 uvXLYL = floor(uv);\\r\\n    vec2 uvXHYL = uvXLYL + vec2(1, 0);\\r\\n    vec2 uvXHYH = uvXLYL + vec2(1, 1);\\r\\n    vec2 uvXLYH = uvXLYL + vec2(0, 1);\\r\\n\\r\\n    return surflet(uv, uvXLYL) + surflet(uv, uvXHYL) + surflet(uv, uvXHYH) + surflet(uv, uvXLYH);\\r\\n}\\r\\n\\r\\n\\r\\nfloat normalizedPerlinNoise(vec2 v) {\\r\\n    return clamp(PerlinNoise(v) + 0.5, 0.0, 1.0);\\r\\n}\\r\\n\\r\\n/* FBM (uses Perlin) */\\r\\nfloat getFBM(vec2 pt, float startFreq) {\\r\\n    float noiseSum = 0.0;\\r\\n    float amplitudeSum = 0.0;\\r\\n    float amplitude = 1.0;\\r\\n    float frequency = startFreq;\\r\\n    for (int i = 0; i < 6; i++) {\\r\\n        float perlin = normalizedPerlinNoise(pt * frequency);\\r\\n        noiseSum += perlin * amplitude;\\r\\n        amplitudeSum += amplitude;\\r\\n        amplitude *= 0.5;\\r\\n        frequency *= 2.0;\\r\\n    }\\r\\n    return noiseSum / amplitudeSum;\\r\\n}\\r\\n\\r\\n// \\\"normalizes\\\" coordinate before calling FBM\\r\\nfloat getFBMFromRawPosition(vec2 pos, float startFreq) {\\r\\n    vec2 coord = pos;\\r\\n    coord += vec2(3.14, 5.01);// +vec2(u_PerlinSeed);\\r\\n                              //return pow(sin(coord.x + coord.y), 2.0);\\r\\n    float fbm = getFBM(coord, startFreq);\\r\\n    // [0.1, 0.8]\\r\\n    //return pow((fbm - 0.05) / 0.7, 3.2);\\r\\n    fbm = pow((fbm - 0.05) / 0.7, 3.2);\\r\\n    fbm = smoothstep(0.0, 1.3, fbm);\\r\\n    return fbm;\\r\\n    //return pow(1.0 - fbm, 2.2);\\r\\n    //return pow(clamp(0.0, 1.0, (fbm - 0.25) / 0.6), 3.2) * 0.5;\\r\\n}\\r\\n\\r\\nvec3 getBGColor(float fbm) {\\r\\n    float f = smoothstep(-0.8, 3.0, fbm);\\r\\n    float H = mod(u_Time * 15.0, 360.0);\\r\\n    const float V = 0.8;\\r\\n    float S = 0.7 * (1.0 - f);\\r\\n    /*\\r\\n    float f = smoothstep(0.0, 1.0, fbm);\\r\\n    const float H = 288.0;\\r\\n    float V = 1.0;\\r\\n    float S = 0.5 * (1.0 - f);\\r\\n    */\\r\\n\\r\\n    float C = V * S;\\r\\n    // h = H / 60\\r\\n    float h = H / 60.0;\\r\\n    float X = C * (1.0 - abs(mod(h, 2.0) - 1.0));\\r\\n    //float X = C * 0.8;\\r\\n    vec3 col;\\r\\n    if (h <= 1.0) {\\r\\n        col = vec3(C, X, 0.0);\\r\\n    }\\r\\n    else if (h <= 2.0) {\\r\\n        col = vec3(X, C, 0.0);\\r\\n    }\\r\\n    else if (h <= 3.0) {\\r\\n        col = vec3(0.0, C, X);\\r\\n    }\\r\\n    else if (h <= 4.0) {\\r\\n        col = vec3(0.0, X, C);\\r\\n    }\\r\\n    else if (h <= 5.0) {\\r\\n        col = vec3(X, 0.0, C);\\r\\n    }\\r\\n    else {\\r\\n        col = vec3(C, 0.0, X);\\r\\n    }\\r\\n    float m = V - C;\\r\\n    return pow(col + vec3(m), vec3(4.2));\\r\\n}\\r\\n\\r\\nfloat getFogFactor(float dist) {\\r\\n    return min(1.0, INV_E_MINUS_ONE * (exp(dist / FAR) - 1.0));\\r\\n}\\r\\n\\r\\nvoid main() { \\r\\n\\t// read from GBuffers\\r\\n\\tvec4 gb0 = texture(u_gb0, fs_UV);\\r\\n\\t//vec4 gb1 = texture(u_gb1, fs_UV);\\r\\n\\tvec4 gb2 = texture(u_gb2, fs_UV);\\r\\n\\r\\n    // put GBuffer data in more readable variables\\r\\n    vec3 nor = gb0.xyz;\\r\\n    float depth = gb0.w;\\r\\n    vec3 albedo = gb2.xyz;\\r\\n\\r\\n    // final color of this fragment\\r\\n    vec3 col;\\r\\n\\r\\n    float time = u_Time * 0.03;\\r\\n    //float fbm = getFBMFromRawPosition(fs_UV + vec2(-8.88 + cos(time * 5.0), 7.22 + time * 1.5), 1.0 + 0.5 * sin(time * 2.0));\\r\\n    //vec3 bgColor = getBGColor(fbm);\\r\\n    //vec3 bgColor = vec3(0.1, 0.1, 1.99);\\r\\n    vec3 bgColor = vec3(0.39, 0.39, 1.99);\\r\\n    float fogFactor = getFogFactor(-depth);\\r\\n    // background\\r\\n    if (depth >= -DEPTH_OFFSET) {\\r\\n        //fogFactor = getFogFactor(FAR);\\r\\n        col = bgColor;\\r\\n    }\\r\\n    // shade\\r\\n    else {\\r\\n        depth += DEPTH_OFFSET;\\r\\n        // get cam-space position\\r\\n        vec3 ndcPos = vec3(fs_UV.xy * 2.0 - 1.0, depth);\\r\\n        float vert = CAMERA_TAN * abs(depth);\\r\\n        float hori = vert * u_AspectRatio;\\r\\n        vec3 camPos = ndcPos * vec3(hori, vert, 1.0);\\r\\n        // convert to world-space pos\\r\\n        vec3 worldPos = vec3(inverse(u_View) * vec4(camPos, 1.0));\\r\\n        //vec3 lookDir = normalize(vec3(inverse(u_View) * vec4(0, 0, 1, 0)));\\r\\n        //vec3 halfDir = normalize(lookDir + normalize(LIGHT_DIR));\\r\\n        //float blinn = pow(clamp(0.0, 1.0, dot(halfDir, nor)), 8.0);\\r\\n        //col = max(0.05, (0.05 + 0.95 * getLambert(worldPos, nor))) * albedo + vec3(0.02 * blinn);\\r\\n        col = max(0.05, (0.05 + 0.95 * getLambert(worldPos, nor))) * albedo;\\r\\n        //col = abs(nor) * 0.6;\\r\\n        //vec3 someLight = vec3(15, 0, 15);\\r\\n        //float d = 0.000001 + distance(worldPos, someLight);\\r\\n        //float lightFactor = min(1.0, 0.1 / (d * d));\\r\\n        //col += vec3(0, 0, 100.0 + 300.0 * (cos(time * 100.0) * 0.5 + 0.5)) * lightFactor;\\r\\n    }\\r\\n    col = mix(col, bgColor, fogFactor);\\r\\n    col = mix(bgColor, col, u_FadeInTime); // fade in from this BG color\\r\\n    col = mix(col, NEXT_BG_COLOR, u_FadeOutTime); // fade out into \\\"next\\\" BG color\\r\\n    col *= 5.0;\\r\\n\\tout_Col = vec4(col, 1.0);\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/deferred-render-snow.glsl\n// module id = 36\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\n#define EPS 0.0001\\r\\n#define PI 3.1415962\\r\\n#define FAR 100.0\\r\\n\\r\\n// 1 / (e - 1)\\r\\n#define INV_E_MINUS_ONE 0.5819767\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_gb0;\\r\\n//uniform sampler2D u_gb1;\\r\\nuniform sampler2D u_gb2;\\r\\n\\r\\nuniform float u_Time;\\r\\nuniform float u_AspectRatio;\\r\\n\\r\\nuniform float u_FadeInTime;\\r\\nuniform float u_FadeOutTime;\\r\\n\\r\\nuniform mat4 u_View;\\r\\nuniform vec4 u_CamPos;   \\r\\n\\r\\nconst float CAMERA_TAN = tan(0.5 * 45.0 * 3.1415962 / 180.0);\\r\\nconst float DEPTH_OFFSET = 0.0;\\r\\n\\r\\nconst vec3 LIGHT_DIR = vec3(50, 120, 100);\\r\\n\\r\\nconst vec3 NEXT_BG_COLOR = vec3(1.99, 0.1, 0.0);\\r\\n\\r\\nfloat getLambert(vec3 worldPos, vec3 normal) {\\r\\n    vec3 toLight = normalize(LIGHT_DIR);\\r\\n    float dotProd = clamp(dot(toLight, normal), 0.0, 1.0);\\r\\n    return pow(dotProd, 2.5);\\r\\n}\\r\\n\\r\\n// noise helper functions\\r\\n\\r\\n// from Adam's demo\\r\\nvec2 random2(vec2 p) {\\r\\n    //vec2 sinVec = sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))));\\r\\n    //return sinVec * 0.5 + vec2(0.5);\\r\\n    //return fract(sinVec * 123.45);\\r\\n    //return fract(sinVec * 43758.5453);\\r\\n    return normalize(2.0 * fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))))*123.45) - 1.0);\\r\\n}\\r\\n\\r\\nfloat surflet(vec2 P, vec2 gridPoint)\\r\\n{\\r\\n    //return (P.x * P.x) * 0.07;\\r\\n    // Compute falloff function by converting linear distance to a polynomial\\r\\n    float distX = abs(P.x - gridPoint.x);\\r\\n    float distY = abs(P.y - gridPoint.y);\\r\\n    float tX = 1.0 - 6.0 * pow(distX, 5.0) + 15.0 * pow(distX, 4.0) - 10.0 * pow(distX, 3.0);\\r\\n    float tY = 1.0 - 6.0 * pow(distY, 5.0) + 15.0 * pow(distY, 4.0) - 10.0 * pow(distY, 3.0);\\r\\n\\r\\n    // Get the random vector for the grid point\\r\\n    vec2 gradient = random2(gridPoint);\\r\\n    // Get the vector from the grid point to P\\r\\n    vec2 diff = P - gridPoint;\\r\\n    // Get the value of our height field by dotting grid->P with our gradient\\r\\n    float height = dot(diff, gradient);\\r\\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\\r\\n    return height * tX * tY;\\r\\n}\\r\\n\\r\\nfloat PerlinNoise(vec2 uv)\\r\\n{\\r\\n    // Tile the space\\r\\n    vec2 uvXLYL = floor(uv);\\r\\n    vec2 uvXHYL = uvXLYL + vec2(1, 0);\\r\\n    vec2 uvXHYH = uvXLYL + vec2(1, 1);\\r\\n    vec2 uvXLYH = uvXLYL + vec2(0, 1);\\r\\n\\r\\n    return surflet(uv, uvXLYL) + surflet(uv, uvXHYL) + surflet(uv, uvXHYH) + surflet(uv, uvXLYH);\\r\\n}\\r\\n\\r\\n\\r\\nfloat normalizedPerlinNoise(vec2 v) {\\r\\n    return clamp(PerlinNoise(v) + 0.5, 0.0, 1.0);\\r\\n}\\r\\n\\r\\n/* FBM (uses Perlin) */\\r\\nfloat getFBM(vec2 pt, float startFreq) {\\r\\n    float noiseSum = 0.0;\\r\\n    float amplitudeSum = 0.0;\\r\\n    float amplitude = 1.0;\\r\\n    float frequency = startFreq;\\r\\n    for (int i = 0; i < 6; i++) {\\r\\n        float perlin = normalizedPerlinNoise(pt * frequency);\\r\\n        noiseSum += perlin * amplitude;\\r\\n        amplitudeSum += amplitude;\\r\\n        amplitude *= 0.5;\\r\\n        frequency *= 2.0;\\r\\n    }\\r\\n    return noiseSum / amplitudeSum;\\r\\n}\\r\\n\\r\\n// \\\"normalizes\\\" coordinate before calling FBM\\r\\nfloat getFBMFromRawPosition(vec2 pos, float startFreq) {\\r\\n    vec2 coord = pos;\\r\\n    coord += vec2(3.14, 5.01);// +vec2(u_PerlinSeed);\\r\\n                              //return pow(sin(coord.x + coord.y), 2.0);\\r\\n    float fbm = getFBM(coord, startFreq);\\r\\n    // [0.1, 0.8]\\r\\n    //return pow((fbm - 0.05) / 0.7, 3.2);\\r\\n    fbm = pow((fbm - 0.05) / 0.7, 3.2);\\r\\n    fbm = smoothstep(0.0, 1.3, fbm);\\r\\n    return fbm;\\r\\n    //return pow(1.0 - fbm, 2.2);\\r\\n    //return pow(clamp(0.0, 1.0, (fbm - 0.25) / 0.6), 3.2) * 0.5;\\r\\n}\\r\\n\\r\\nvec3 getBGColor(float fbm) {\\r\\n    float f = smoothstep(-0.8, 3.0, fbm);\\r\\n    float H = mod(u_Time * 15.0, 360.0);\\r\\n    const float V = 0.8;\\r\\n    float S = 0.7 * (1.0 - f);\\r\\n    /*\\r\\n    float f = smoothstep(0.0, 1.0, fbm);\\r\\n    const float H = 288.0;\\r\\n    float V = 1.0;\\r\\n    float S = 0.5 * (1.0 - f);\\r\\n    */\\r\\n\\r\\n    float C = V * S;\\r\\n    // h = H / 60\\r\\n    float h = H / 60.0;\\r\\n    float X = C * (1.0 - abs(mod(h, 2.0) - 1.0));\\r\\n    //float X = C * 0.8;\\r\\n    vec3 col;\\r\\n    if (h <= 1.0) {\\r\\n        col = vec3(C, X, 0.0);\\r\\n    }\\r\\n    else if (h <= 2.0) {\\r\\n        col = vec3(X, C, 0.0);\\r\\n    }\\r\\n    else if (h <= 3.0) {\\r\\n        col = vec3(0.0, C, X);\\r\\n    }\\r\\n    else if (h <= 4.0) {\\r\\n        col = vec3(0.0, X, C);\\r\\n    }\\r\\n    else if (h <= 5.0) {\\r\\n        col = vec3(X, 0.0, C);\\r\\n    }\\r\\n    else {\\r\\n        col = vec3(C, 0.0, X);\\r\\n    }\\r\\n    float m = V - C;\\r\\n    return pow(col + vec3(m), vec3(4.2));\\r\\n}\\r\\n\\r\\nfloat getFogFactor(float dist) {\\r\\n    return min(1.0, INV_E_MINUS_ONE * (exp(dist * 1.5 / FAR) - 1.0));\\r\\n}\\r\\n\\r\\nvoid main() { \\r\\n\\t// read from GBuffers\\r\\n\\tvec4 gb0 = texture(u_gb0, fs_UV);\\r\\n\\t//vec4 gb1 = texture(u_gb1, fs_UV);\\r\\n\\tvec4 gb2 = texture(u_gb2, fs_UV);\\r\\n\\r\\n    // put GBuffer data in more readable variables\\r\\n    vec3 nor = gb0.xyz;\\r\\n    float depth = gb0.w;\\r\\n    vec3 albedo = gb2.xyz;\\r\\n\\r\\n    // final color of this fragment\\r\\n    vec3 col;\\r\\n\\r\\n    float time = u_Time * 0.03;\\r\\n    //float fbm = getFBMFromRawPosition(fs_UV + vec2(-8.88 + cos(time * 5.0), 7.22 + time * 1.5), 1.0 + 0.5 * sin(time * 2.0));\\r\\n    //vec3 bgColor = getBGColor(fbm);\\r\\n    //vec3 bgColor = vec3(0.1, 0.1, 1.99);\\r\\n    vec3 bgColor = vec3(0.19, 0.09, 0.19);\\r\\n    float fogFactor = getFogFactor(-depth);\\r\\n    // background\\r\\n    if (depth >= -DEPTH_OFFSET) {\\r\\n        //fogFactor = getFogFactor(FAR);\\r\\n        col = bgColor;\\r\\n    }\\r\\n    // shade\\r\\n    else {\\r\\n        depth += DEPTH_OFFSET;\\r\\n        // get cam-space position\\r\\n        vec3 ndcPos = vec3(fs_UV.xy * 2.0 - 1.0, depth);\\r\\n        float vert = CAMERA_TAN * abs(depth);\\r\\n        float hori = vert * u_AspectRatio;\\r\\n        vec3 camPos = ndcPos * vec3(hori, vert, 1.0);\\r\\n        // convert to world-space pos\\r\\n        vec3 worldPos = vec3(inverse(u_View) * vec4(camPos, 1.0));\\r\\n        //vec3 lookDir = normalize(vec3(inverse(u_View) * vec4(0, 0, 1, 0)));\\r\\n        //vec3 halfDir = normalize(lookDir + normalize(LIGHT_DIR));\\r\\n        //float blinn = pow(clamp(0.0, 1.0, dot(halfDir, nor)), 8.0);\\r\\n        //col = max(0.05, (0.05 + 0.95 * getLambert(worldPos, nor))) * albedo + vec3(0.02 * blinn);\\r\\n        col = max(0.05, (0.05 + 0.95 * getLambert(worldPos, nor))) * albedo;\\r\\n        //col = abs(nor) * 0.6;\\r\\n        //vec3 someLight = vec3(15, 0, 15);\\r\\n        //float d = 0.000001 + distance(worldPos, someLight);\\r\\n        //float lightFactor = min(1.0, 0.1 / (d * d));\\r\\n        //col += vec3(0, 0, 100.0 + 300.0 * (cos(time * 100.0) * 0.5 + 0.5)) * lightFactor;\\r\\n    }\\r\\n    col = mix(col, bgColor, fogFactor);\\r\\n    col = mix(bgColor, col, u_FadeInTime); // fade in from this BG color\\r\\n    col = mix(col, NEXT_BG_COLOR, u_FadeOutTime); // fade out into \\\"next\\\" BG color\\r\\n    col *= 5.0;\\r\\n\\tout_Col = vec4(col, 1.0);\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/deferred-render.glsl\n// module id = 37\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\nuniform float u_Time;\\r\\n\\r\\n// based on: http://filmicworlds.com/blog/filmic-tonemapping-operators/\\r\\n\\r\\nvec3 defaultHDR(vec3 color) {\\r\\n\\tcolor = min(vec3(1.0), color);\\r\\n\\tcolor = pow(color, vec3(1.0 / 2.2));\\r\\n    return color;\\r\\n}\\r\\n\\r\\nvec3 HejlBurgessDawson(vec3 color) {\\r\\n    color = max(vec3(0.0), color - vec3(0.004));\\r\\n    color = (color * (6.2 * color + vec3(0.5))) / (color * (6.2 * color + vec3(1.7)) + vec3(0.06));\\r\\n    return color;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n\\t// TODO: proper tonemapping\\r\\n\\t// This shader just clamps the input color to the range [0, 1]\\r\\n\\t// and performs basic gamma correction.\\r\\n\\t// It does not properly handle HDR values; you must implement that.\\r\\n\\r\\n\\tvec3 color = texture(u_frame, fs_UV).xyz;\\r\\n\\t//color = min(vec3(1.0), color);\\r\\n    // Reinhard\\r\\n    //color *= 2.0;\\r\\n    //color = color / (color + vec3(1.0));\\r\\n\\r\\n    // Hejl and Burgess-Dawson\\r\\n    //color = max(vec3(0.0), color - vec3(0.004));\\r\\n    //color = (color * (6.2 * color + vec3(0.5))) / (color * (6.2 * color + vec3(1.7)) + vec3(0.06));\\r\\n\\r\\n\\t// gamma correction\\r\\n\\t//color = pow(color, vec3(1.0 / 2.2));\\r\\n    //color = defaultHDR(color);\\r\\n    color = HejlBurgessDawson(color);\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/tonemap-frag.glsl\n// module id = 38\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\n//uniform sampler2D u_preFrame;\\r\\nuniform sampler2D u_gb0;\\r\\n//uniform float u_Time;\\r\\nuniform vec2 u_Dims;\\r\\n\\r\\nconst float GAUSS_KERNEL[7] = float[7](\\r\\n    0.092904, 0.137865, 0.174704, 0.189054, 0.174704, 0.137865, 0.092904);\\r\\n\\r\\nconst float IDENTITY_KERNEL[7] = float[7](\\r\\n    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0);\\r\\n\\r\\nconst float FOCAL_LENGTH = -60.0; \\r\\n\\r\\nvoid main() {\\r\\n\\tvec3 color = vec3(0.0);\\r\\n    vec4 gb0 = texture(u_gb0, fs_UV);\\r\\n    float depth = gb0.w;\\r\\n    float weight = smoothstep(14.0, 40.0, abs(depth - FOCAL_LENGTH));\\r\\n    float pixelDim = 1.0 / u_Dims.x;\\r\\n    for (int i = -3; i <= 3; i++) {\\r\\n        color += mix(IDENTITY_KERNEL[i + 3], GAUSS_KERNEL[i + 3], weight) * texture(u_frame, fs_UV + vec2(float(i) * pixelDim, 0.0)).xyz;\\r\\n    }\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/dofBlurX-frag.glsl\n// module id = 39\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\n//uniform sampler2D u_preFrame;\\r\\nuniform sampler2D u_gb0;\\r\\n//uniform float u_Time;\\r\\nuniform vec2 u_Dims;\\r\\n\\r\\nconst float GAUSS_KERNEL[7] = float[7](\\r\\n    0.092904, 0.137865, 0.174704, 0.189054, 0.174704, 0.137865, 0.092904);\\r\\n\\r\\nconst float IDENTITY_KERNEL[7] = float[7](\\r\\n    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0);\\r\\n\\r\\nconst float FOCAL_LENGTH = -60.0; \\r\\n\\r\\nvoid main() {\\r\\n\\tvec3 color = vec3(0.0);\\r\\n    vec4 gb0 = texture(u_gb0, fs_UV);\\r\\n    float depth = gb0.w;\\r\\n    float weight = smoothstep(14.0, 40.0, abs(depth - FOCAL_LENGTH));\\r\\n    float pixelDim = 1.0 / u_Dims.y;\\r\\n    for (int i = -3; i <= 3; i++) {\\r\\n        color += mix(IDENTITY_KERNEL[i + 3], GAUSS_KERNEL[i + 3], weight) * texture(u_frame, fs_UV + vec2(0.0, float(i) * pixelDim)).xyz;\\r\\n    }\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/dofBlurY-frag.glsl\n// module id = 40\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\n//uniform sampler2D u_preFrame;\\r\\nuniform sampler2D u_gb0;\\r\\n//uniform float u_Time;\\r\\n\\r\\n// Interpolation between color and greyscale over time on left half of screen\\r\\nvoid main() {\\r\\n\\tvec3 color = texture(u_frame, fs_UV).xyz;\\r\\n    float depth = texture(u_gb0, fs_UV).w;\\r\\n    float lum = dot(color, vec3(0.2126, 0.7152, 0.072));\\r\\n    // add to bloom if background or bright enough\\r\\n    color = ((depth >= 0.0) || (lum > 0.9)) ? color : vec3(0.0);\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/bloomHigh-frag.glsl\n// module id = 41\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\nuniform sampler2D u_preFrame;\\r\\n//uniform float u_Time;\\r\\nuniform vec2 u_Dims;\\r\\n\\r\\nconst float GAUSS_KERNEL[5] = float[5](\\r\\n\\r\\n    0.153388, 0.221461, 0.250301, 0.221461, 0.153388);\\r\\n    //0.06136, 0.24477, 0.38774, 0.24477, 0.06136);\\r\\n//const float GAUSS_KERNEL[9] = float[9](\\r\\n    //0.028532, 0.067234, 0.124009, 0.179044, 0.20236, 0.179044, 0.124009, 0.067234, 0.028532);\\r\\n\\r\\nvoid main() {\\r\\n\\tvec3 color = vec3(0.0);\\r\\n    float pixelDim = 1.0 / u_Dims.x;\\r\\n    for (int i = -2; i <= 2; i++) {\\r\\n    \\tcolor += GAUSS_KERNEL[i + 2] * texture(u_preFrame, fs_UV + vec2(float(i) * pixelDim, 0.0)).xyz;\\r\\n    }\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/blurX-frag.glsl\n// module id = 42\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\nuniform sampler2D u_preFrame;\\r\\n//uniform float u_Time;\\r\\nuniform vec2 u_Dims;\\r\\n\\r\\nconst float GAUSS_KERNEL[5] = float[5](\\r\\n    0.153388, 0.221461, 0.250301, 0.221461, 0.153388);\\r\\n    //0.06136, 0.24477, 0.38774, 0.24477, 0.06136);\\r\\n\\r\\nvoid main() {\\r\\n\\tvec3 color = vec3(0.0);\\r\\n    float pixelDim = 1.0 / u_Dims.y;\\r\\n    for (int i = -2; i <= 2; i++) {\\r\\n    \\tcolor += GAUSS_KERNEL[i + 2] * texture(u_preFrame, fs_UV + vec2(0.0, float(i) * pixelDim)).xyz;\\r\\n    }\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/blurY-frag.glsl\n// module id = 43\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\nuniform sampler2D u_preFrame;\\r\\n//uniform float u_Time;\\r\\n\\r\\nvoid main() {\\r\\n\\tvec3 color = texture(u_frame, fs_UV).xyz;\\r\\n\\tcolor += texture(u_preFrame, fs_UV).xyz;\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/bloomAdd-frag.glsl\n// module id = 44\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\n//uniform sampler2D u_preFrame;\\r\\n//uniform sampler2D u_gb0;\\r\\n//uniform float u_Time;\\r\\nuniform vec2 u_Dims;\\r\\n\\r\\n\\r\\nvoid main() {\\r\\n    vec2 screenRatio = u_Dims / vec2(1295.0, 759.0);\\r\\n    vec2 GRID_DIMS = vec2(150.0) * screenRatio;\\r\\n    vec2 cellCorner = floor(fs_UV * GRID_DIMS) / GRID_DIMS;\\r\\n    float minF = 5.0;\\r\\n    for (int i = -1; i <= 1; i++) {\\r\\n        for (int j = -1; j <= 1; j++) {\\r\\n            vec2 sampleCorner = cellCorner + vec2(i, j) / GRID_DIMS;\\r\\n            vec4 sampleColor = texture(u_frame, sampleCorner);\\r\\n            vec2 p = sampleCorner - fs_UV;\\r\\n            p.x *= u_Dims.x / u_Dims.y; // adjust for aspect ratio\\r\\n            float lum = dot(sampleColor.xyz, vec3(0.2126, 0.7152, 0.072));\\r\\n            float dist = (0.00001 + 0.0016 * (1.0 - clamp(0.0, 1.5, lum) / 1.5)) / sqrt(screenRatio.x);\\r\\n            float f = smoothstep(dist, 3.0 * dist, distance(sampleCorner, fs_UV));\\r\\n            minF = min(minF, 5.0 * f);\\r\\n        }\\r\\n    }\\r\\n\\tvec3 color = vec3(minF);\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/pointilism-frag.glsl\n// module id = 45\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\n//uniform sampler2D u_preFrame;\\r\\n//uniform sampler2D u_gb0;\\r\\nuniform float u_Time;\\r\\n//uniform vec2 u_Dims;\\r\\n\\r\\nuniform float u_Coherence;\\r\\n\\r\\n// noise helper functions\\r\\n\\r\\n// from Adam's demo\\r\\nvec2 random2(vec2 p) {\\r\\n    return normalize(2.0 * fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))))*123.45) - 1.0);\\r\\n}\\r\\n\\r\\nfloat surflet(vec2 P, vec2 gridPoint)\\r\\n{\\r\\n    //return (P.x * P.x) * 0.07;\\r\\n    // Compute falloff function by converting linear distance to a polynomial\\r\\n    float distX = abs(P.x - gridPoint.x);\\r\\n    float distY = abs(P.y - gridPoint.y);\\r\\n    float tX = 1.0 - 6.0 * pow(distX, 5.0) + 15.0 * pow(distX, 4.0) - 10.0 * pow(distX, 3.0);\\r\\n    float tY = 1.0 - 6.0 * pow(distY, 5.0) + 15.0 * pow(distY, 4.0) - 10.0 * pow(distY, 3.0);\\r\\n\\r\\n    // Get the random vector for the grid point\\r\\n    vec2 gradient = random2(gridPoint);\\r\\n    // Get the vector from the grid point to P\\r\\n    vec2 diff = P - gridPoint;\\r\\n    // Get the value of our height field by dotting grid->P with our gradient\\r\\n    float height = dot(diff, gradient);\\r\\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\\r\\n    return height * tX * tY;\\r\\n}\\r\\n\\r\\nfloat PerlinNoise(vec2 uv)\\r\\n{\\r\\n    // Tile the space\\r\\n    vec2 uvXLYL = floor(uv);\\r\\n    vec2 uvXHYL = uvXLYL + vec2(1, 0);\\r\\n    vec2 uvXHYH = uvXLYL + vec2(1, 1);\\r\\n    vec2 uvXLYH = uvXLYL + vec2(0, 1);\\r\\n\\r\\n    return surflet(uv, uvXLYL) + surflet(uv, uvXHYL) + surflet(uv, uvXHYH) + surflet(uv, uvXLYH);\\r\\n}\\r\\n\\r\\n\\r\\nfloat normalizedPerlinNoise(vec2 v) {\\r\\n    return clamp(0.0, 1.0, PerlinNoise(v) + 0.5);\\r\\n}\\r\\n\\r\\n/* FBM (uses Perlin) */\\r\\nfloat getFBM(vec2 pt, float startFreq) {\\r\\n    float noiseSum = 0.0;\\r\\n    float amplitudeSum = 0.0;\\r\\n    float amplitude = 1.0;\\r\\n    float frequency = startFreq;\\r\\n    for (int i = 0; i < 2; i++) {\\r\\n        float perlin = normalizedPerlinNoise(pt * frequency);\\r\\n        noiseSum += perlin * amplitude;\\r\\n        amplitudeSum += amplitude;\\r\\n        amplitude *= 0.5;\\r\\n        frequency *= 2.0;\\r\\n    }\\r\\n    return noiseSum / amplitudeSum;\\r\\n}\\r\\n\\r\\n// \\\"normalizes\\\" coordinate before calling FBM\\r\\nfloat getFBMFromRawPosition(vec2 pos, float startFreq) {\\r\\n    vec2 coord = pos;\\r\\n    coord += vec2(3.14, 5.01);// +vec2(u_PerlinSeed);\\r\\n                              //return pow(sin(coord.x + coord.y), 2.0);\\r\\n    float fbm = getFBM(coord, startFreq);\\r\\n    // [0.1, 0.8]\\r\\n    //return pow((fbm - 0.05) / 0.7, 3.2);\\r\\n    fbm = pow((fbm - 0.05) / 0.7, 3.2);\\r\\n    fbm = smoothstep(0.0, 1.3, fbm);\\r\\n    return fbm;\\r\\n    //return pow(1.0 - fbm, 2.2);\\r\\n    //return pow(clamp(0.0, 1.0, (fbm - 0.25) / 0.6), 3.2) * 0.5;\\r\\n}\\r\\n\\r\\nconst float SMOOTH_DELTA = 0.05;\\r\\n// not smoothstep... well, only partially\\r\\nfloat smoothStep(float t) {\\r\\n    float base = floor(t); // creates a step function\\r\\n    float f = fract(t); // gets fractional component\\r\\n    // sstep === smoothstep\\r\\n    // sstep(0.9, 1.1, f) creates a smooth increase from 0.9 to 1.0\\r\\n    // this handles smoothing the left half of the rising edge if we add it to base\\r\\n    // sstep(-0.1, 0.1, f) kind of looks like a smooth increase from 1.0 to 1.1, but it's \\\"upside down\\\"\\r\\n    // 1.0 - sstep(-0.1, 0.1, f) creates a smooth _decrease_ from 1.0 to 1.1\\r\\n    // so we multiply it by -1 to get a smooth _increase_ instead\\r\\n    // we can generalize 0.9 = 1.0 - SMOOTH_DELTA, 1.1 = 1.0 + SMOOTH_DELTA, for SMOOTH_DELTA = 0.1\\r\\n    float smoother = smoothstep(1.0 - SMOOTH_DELTA, 1.0 + SMOOTH_DELTA, f) - 1.0 + smoothstep(-SMOOTH_DELTA, SMOOTH_DELTA, f);\\r\\n    return base + smoother;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    float FREQ = 3.2 - u_Coherence * 3.0;\\r\\n    const float EPSILON = 0.00001;\\r\\n    float n1, n2, a, b;\\r\\n    vec2 noisePos = fs_UV + vec2(-7.88 + 0.5 * smoothStep(u_Time * 0.04), 2.32);\\r\\n    n1 = getFBMFromRawPosition(noisePos + vec2(0.0, +EPSILON), FREQ);\\r\\n    n2 = getFBMFromRawPosition(noisePos + vec2(0.0, -EPSILON), FREQ);\\r\\n    a = (n1 - n2) / (2.0 * EPSILON);\\r\\n    n1 = getFBMFromRawPosition(noisePos + vec2(+EPSILON, 0.0), FREQ);\\r\\n    n2 = getFBMFromRawPosition(noisePos + vec2(-EPSILON, 0.0), FREQ);\\r\\n    b = (n1 - n2) / (2.0 * EPSILON);\\r\\n    vec3 color = texture(u_frame, fs_UV).xyz;\\r\\n    out_Col = vec4(color, atan(-b, a));\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/curl-frag.glsl\n// module id = 46\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\nuniform sampler2D u_preFrame;\\r\\n//uniform sampler2D u_gb0;\\r\\nuniform float u_Time;\\r\\nuniform vec2 u_Dims;\\r\\n\\r\\nuniform float u_BrushSize;\\r\\nuniform float u_BrushNoise;\\r\\n\\r\\nvec2 random2(vec2 p) {\\r\\n    return normalize(2.0 * fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))))*123.45) - 1.0);\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    vec2 GRID_DIMS = vec2(70.0) * 0.5 * u_Dims.x / 526.0;\\r\\n    // making radius noisy gives airbrush effect\\r\\n    float rand = random2(fs_UV * 314.159).x;\\r\\n    // radius = (scale from u_BrushSize) * (base_size + random_element) / (estimate of screen size)\\r\\n    float radius = (0.5 + u_BrushSize) * (0.4 + 0.05 * rand * (2.0 * u_BrushNoise) ) / GRID_DIMS.x;\\r\\n\\tvec3 color = vec3(5.0);\\r\\n    vec2 cellCorner = floor(fs_UV * GRID_DIMS) / GRID_DIMS;\\r\\n    vec3 minColor = vec3(0.0);\\r\\n    float minLen = 100.0;\\r\\n    float accWeight = 0.0;\\r\\n    vec3 defaultColor;\\r\\n    for (int i = -3; i <= 3; i++) {\\r\\n        for (int j = -3; j <= 3; j++) {\\r\\n            // read curl noise's angle and color from prepass frame\\r\\n            vec2 sampleCorner = cellCorner + vec2(i, j) / GRID_DIMS;\\r\\n            vec4 prepass = texture(u_preFrame, sampleCorner);\\r\\n            vec2 p = fs_UV - sampleCorner; // in corner-space\\r\\n            p.x *= u_Dims.x / u_Dims.y;\\r\\n            // find rotation\\r\\n            float angle = prepass.w;\\r\\n            float c = cos(angle);\\r\\n            float s = sin(angle);\\r\\n            // rotate\\r\\n            vec2 pRot = vec2(c * p.x - s * p.y, s * p.x + c * p.y);\\r\\n            // stretch along X\\r\\n            pRot.x *= 0.15;\\r\\n            pRot.y *= 0.31;\\r\\n            float l = length(pRot);\\r\\n            if (l < radius) {\\r\\n                float darkness = 1.0;// -0.6 * smoothstep(-radius, radius, pRot.x);\\r\\n                float weight = 1.0 - 0.4 * pow(smoothstep(0.0, radius, l), 1.0);\\r\\n                minLen = l;\\r\\n                accWeight += weight;\\r\\n                minColor += weight * prepass.xyz * darkness;\\r\\n            }\\r\\n            else if (i == 0 && j == 0) {\\r\\n                defaultColor = prepass.xyz; // use this fragment's default color\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // if we hit nothing, use default color\\r\\n    if (minLen == 100.0) {\\r\\n        minColor = defaultColor;\\r\\n    }\\r\\n    // else, divide by sum of weights\\r\\n    else {\\r\\n        minColor /= accWeight;\\r\\n    }\\r\\n\\tout_Col = vec4(minColor, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/paint-frag.glsl\n// module id = 47\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\n//uniform sampler2D u_preFrame;\\r\\nuniform sampler2D u_gb0;\\r\\nuniform float u_Time;\\r\\nuniform vec2 u_Dims;\\r\\n\\r\\n// from https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\\r\\nvec3 rgb2hsv(vec3 c)\\r\\n{\\r\\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\r\\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\r\\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\r\\n\\r\\n    float d = q.x - min(q.w, q.y);\\r\\n    float e = 1.0e-10;\\r\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\r\\n}\\r\\n\\r\\nvec3 hsv2rgb(vec3 c)\\r\\n{\\r\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\r\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\r\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\r\\n}\\r\\n\\r\\nvec2 random2(vec2 p) {\\r\\n    return normalize(2.0 * fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))))*123.45) - 1.0);\\r\\n}\\r\\n\\r\\nconst vec3 PURPLE_RGB = vec3(0.7098, 0.0392156, 1.0);\\r\\nconst float X_TILE_DIM = 100.0;\\r\\nconst float Y_TILE_DIM = 20.0;\\r\\nconst float NOISE_TILE_DIM = 400.0;\\r\\nconst float GREEN_OFFSET = 5.0;\\r\\n\\r\\nvoid main() {\\r\\n    // desaturate\\r\\n    vec3 color = texture(u_frame, fs_UV).xyz;\\r\\n    // detour and make BG if applicable\\r\\n    if (fs_UV.y < 0.5) {\\r\\n        float depth = texture(u_gb0, fs_UV).w;\\r\\n        if (depth >= 0.0) {\\r\\n            vec2 pixelDims = 1.0 / u_Dims;\\r\\n            float xTile = mod((-0.5 + fs_UV.x) * (0.2 + fs_UV.y), 2.0 * X_TILE_DIM * pixelDims.x);\\r\\n            float yTile = mod(fs_UV.y, 2.0 * Y_TILE_DIM * pixelDims.y);\\r\\n            bool isBlack = (xTile > X_TILE_DIM * pixelDims.x) ^^ (yTile > Y_TILE_DIM * pixelDims.y);\\r\\n            if (isBlack) {\\r\\n                color = vec3(0.0);\\r\\n            }\\r\\n            else {\\r\\n                color = vec3(1.0, 0.0, 0.0);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    vec3 hsv = rgb2hsv(color);\\r\\n    hsv.y *= 0.3;\\r\\n    hsv.z *= 0.8;\\r\\n    color = hsv2rgb(hsv);\\r\\n    // blend with purple\\r\\n    color = 0.7 * color + 0.3 * PURPLE_RGB;\\r\\n\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/vaporwave-frag.glsl\n// module id = 48\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec2 fs_UV;\\r\\nout vec4 out_Col;\\r\\n\\r\\nuniform sampler2D u_frame;\\r\\n//uniform sampler2D u_preFrame;\\r\\nuniform sampler2D u_gb0;\\r\\nuniform float u_Time;\\r\\nuniform vec2 u_Dims;\\r\\n\\r\\n// from https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\\r\\nvec3 rgb2hsv(vec3 c)\\r\\n{\\r\\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\r\\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\r\\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\r\\n\\r\\n    float d = q.x - min(q.w, q.y);\\r\\n    float e = 1.0e-10;\\r\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\r\\n}\\r\\n\\r\\nvec3 hsv2rgb(vec3 c)\\r\\n{\\r\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\r\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\r\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\r\\n}\\r\\n\\r\\nvec2 random2(vec2 p) {\\r\\n    return normalize(2.0 * fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))))*123.45) - 1.0);\\r\\n}\\r\\n\\r\\nfloat randomer2(vec2 p, float seed) {\\r\\n    return fract(sin(dot(p, vec2(127.1 * seed, 311.7))) * 123.45);\\r\\n    //return normalize(2.0 * fract(sin(vec2(dot(p, vec2(127.1 * seed, 311.7)), dot(p, vec2(269.5, 183.3 + seed))))*123.45) - 1.0);\\r\\n}\\r\\n\\r\\nconst float PI = 3.14159265;\\r\\nconst float NOISE_TILE_DIM = 400.0;\\r\\n//const float NOISE_COS = 0.93969;\\r\\n//const float NOISE_SIN = -0.3420201;\\r\\nconst float NOISE_STRIPE_DIM = 30.0;\\r\\n\\r\\nconst float GAUSS_KERNEL[5] = float[5](\\r\\n    0.122581, 0.233062, 0.288713, 0.233062, 0.122581);\\r\\n\\r\\nvoid main() {\\r\\n    vec3 color = texture(u_frame, fs_UV).xyz;\\r\\n    vec2 pixelDims = 1.0 / u_Dims;\\r\\n    // chromatic aberration\\r\\n    float GREEN_OFFSET = 5.0 * (1.0 + abs(fs_UV.x - 0.5) * 5.0) * (1.0 + 0.1 * random2(vec2(fs_UV.y * 9.12)).y);\\r\\n    float sqrWave = (mod(u_Time * 0.73, 2.2) > 2.0) ? 1.0 : 0.0;\\r\\n    GREEN_OFFSET += sqrWave * 5.0;\\r\\n    vec3 neighbor = texture(u_frame, fs_UV + pixelDims * vec2(GREEN_OFFSET, 0.0)).xyz;\\r\\n    color.y = neighbor.y;\\r\\n\\r\\n    // distort -- move pixels to the side\\r\\n    float time = u_Time * 0.47;\\r\\n    vec2 distortRand = random2(vec2(floor(time)));\\r\\n    // use mod to compute a random boolean value without random2\\r\\n    float DISTORT_THRESH = (mod(distortRand.x, 0.0003) > 0.00015) ? 0.8 : 0.5;\\r\\n    sqrWave = (mod(time, 1.0) > DISTORT_THRESH) ? 1.0 : 0.0;\\r\\n    float DISTORT_START = 0.5 + 0.5 * distortRand.x;\\r\\n    float DISTORT_STRIPE_DIM = 50.0 + 20.0 * (distortRand.y);\\r\\n    float DISTORT_OFFSET = GREEN_OFFSET * 1.6;\\r\\n    if (DISTORT_START < fs_UV.y && fs_UV.y < DISTORT_START + pixelDims.y * DISTORT_STRIPE_DIM) {\\r\\n        float distIntoStripe = (fs_UV.y - DISTORT_START) / (pixelDims.y * DISTORT_STRIPE_DIM) * PI;\\r\\n        // pow is for making offset \\\"spikier\\\". mod randomly switches between offseting to left or right\\r\\n        float extraOffset = pow(sin(distIntoStripe), 5.0) * ((mod(DISTORT_START, 0.0012) > 0.0006) ? -1.0 : 1.0);\\r\\n        vec3 neighbor = texture(u_frame, fs_UV - pixelDims * vec2(DISTORT_OFFSET + extraOffset * 47.0, 2.0)).xyz;\\r\\n        color = mix(color, color * 0.2 + neighbor * 0.8, sqrWave);\\r\\n    }\\r\\n\\r\\n    // add constant static\\r\\n    vec2 noiseCell = floor(fs_UV * NOISE_TILE_DIM) / NOISE_TILE_DIM;\\r\\n    float noise = randomer2(noiseCell * 0.1 + vec2(u_Time * 0.0002, -u_Time * 0.00003), noiseCell.x * 9.78 + noiseCell.y * 295.1);\\r\\n    color *= 0.85 + 0.15 * noise;\\r\\n\\r\\n    // compute \\\"forceStart\\\" -- add some chance to add line noise\\r\\n    // outside of main noise stripe\\r\\n    float time2 = u_Time * 4.0;\\r\\n    vec2 forceRand = random2(vec2(floor(time2), fs_UV.y));\\r\\n    bool forceStart = mod(forceRand.x, 0.00001) > 0.0000097;\\r\\n    // also compute a \\\"flipFactor\\\" -- sometimes make noise light instead of dark\\r\\n    bool flipColor = mod(forceRand.y, 0.0001) > 0.00009;\\r\\n    float flipFactor = (forceStart && flipColor) ? 0.5 : 0.2;\\r\\n\\r\\n    float STRIPE_START = mod(-u_Time * 0.4, 1.5);\\r\\n\\r\\n    // add intermittent static stripe\\r\\n    if (forceStart || (STRIPE_START < fs_UV.y && fs_UV.y < STRIPE_START + pixelDims.y * NOISE_STRIPE_DIM)) {\\r\\n        noise = 0.0;\\r\\n        // 1 pixel tall -- not needed now?\\r\\n        noiseCell.y = floor(fs_UV.y * u_Dims.y) / (u_Dims.y);\\r\\n        // randomly scale size of noise column for each row\\r\\n        float rowScale = random2(noiseCell.yy).y * 0.5 + 1.5;\\r\\n        for (int i = -2; i <= 2; i++) {\\r\\n            // each line of noise is made of multiple segments\\r\\n            // NOISE_TILE_DIM * 0.05 * rowScale controls the length of these segments\\r\\n            // since rowScale changes for each Y, the lengths differ for each pixel row\\r\\n            noiseCell.x = floor((fs_UV.x + float(i) * pixelDims.x) * NOISE_TILE_DIM * 0.05 * rowScale) / (NOISE_TILE_DIM * 0.05 * rowScale);\\r\\n            // \\\"blur\\\" to make noise less harsh\\r\\n            noise += GAUSS_KERNEL[i + 2] * 1.3 * smoothstep(-0.9, 0.95, random2(noiseCell + vec2(u_Time * 0.0002, u_Time * 0.000)).y);\\r\\n        }\\r\\n        // if we decide to \\\"flip color\\\", we make the noise contribution higher \\r\\n        // to make it look whiter\\r\\n        color *= 0.8 + flipFactor * noise;\\r\\n    }\\r\\n\\r\\n\\r\\n\\tout_Col = vec4(color, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/vaporwaveGlitches-frag.glsl\n// module id = 49\n// module chunks = 0","import {vec3, mat4} from 'gl-matrix';\r\n\r\nclass Camera {\r\n    //controls: any;\r\n    projectionMatrix: mat4 = mat4.create();\r\n    viewMatrix: mat4 = mat4.create();\r\n    fovy: number = 45 * 3.1415962 / 180.0;\r\n    aspectRatio: number = 1;\r\n    near: number = 0.1;\r\n    far: number = 100;\r\n    position: vec3 = vec3.create();\r\n    direction: vec3 = vec3.fromValues(0, 0, 1);\r\n    target: vec3 = vec3.create();\r\n    up: vec3 = vec3.fromValues(0, 1, 0);\r\n    right: vec3 = vec3.fromValues(1, 0, 0);\r\n\r\n    constructor(position: vec3, target: vec3) {\r\n        vec3.copy(this.position, position);\r\n        vec3.subtract(this.direction, target, position);\r\n        vec3.normalize(this.direction, this.direction);\r\n        vec3.cross(this.right, this.direction, this.up);\r\n        vec3.add(this.target, this.position, this.direction);\r\n        mat4.lookAt(this.viewMatrix, this.position, this.target, this.up);\r\n    }\r\n\r\n    setAspectRatio(aspectRatio: number) {\r\n        this.aspectRatio = aspectRatio;\r\n    }\r\n\r\n    updateProjectionMatrix() {\r\n        mat4.perspective(this.projectionMatrix, this.fovy, this.aspectRatio, this.near, this.far);\r\n    }\r\n\r\n    moveForward() {\r\n        vec3.add(this.position, this.position, this.direction);\r\n    }\r\n\r\n    moveBackward() {\r\n        vec3.scaleAndAdd(this.position, this.position, this.direction, -1);\r\n    }\r\n\r\n    moveRight() {\r\n        vec3.add(this.position, this.position, this.right);\r\n    }\r\n\r\n    moveLeft() {\r\n        vec3.scaleAndAdd(this.position, this.position, this.right, -1);\r\n    }\r\n\r\n    changeDirection() {\r\n        console.log(\"UNIMPLEMENTED!\");\r\n        vec3.cross(this.right, this.direction, this.up);\r\n    }\r\n\r\n    update() {\r\n        vec3.add(this.target, this.position, this.direction);\r\n        mat4.lookAt(this.viewMatrix, this.position, this.target, this.up);\r\n    }\r\n};\r\n\r\nexport default Camera;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Camera.ts","import Camera from '../Camera';\r\nimport {clamp} from '../Utils';\r\nimport Terrain from './Terrain';\r\nimport {vec3, mat4} from 'gl-matrix';\r\n\r\nenum MovementFlags {\r\n    NONE = 0,\r\n    FORWARD = 1 << 0,\r\n    BACKWARD = 1 << 1,\r\n    RIGHT = 1 << 2,\r\n    LEFT = 1 << 3,\r\n    ALL = (1 << 4) - 1,\r\n    //UP = 1 << 4,\r\n    //DOWN = 1 << 5,\r\n    //ALL = (1 << 6) - 1,\r\n}\r\n\r\nconst UP = vec3.fromValues(0, 1, 0);\r\nconst EYE_OFFSET = vec3.fromValues(0, 2, 0);\r\nconst TWO_PI = 2.0 * Math.PI;\r\nconst MOUSE_SCALE = 0.001;\r\nconst Y_LIMIT = 0.95;\r\n\r\nclass Player {\r\n    camera: Camera;\r\n    movementFlags: MovementFlags;\r\n    position: vec3;\r\n    eye: vec3;\r\n    forward: vec3;\r\n    right: vec3;\r\n    xzAngle: number;\r\n    flatForward: vec3; // forward projected on XZ plane\r\n    terrain: Terrain;\r\n\r\n    constructor(camera: Camera, position: vec3, forward: vec3) {\r\n        this.camera = camera;\r\n        this.movementFlags = MovementFlags.NONE;\r\n        this.position = vec3.clone(position);\r\n        this.eye = vec3.create();\r\n        this.forward = vec3.clone(forward);\r\n        this.right = vec3.create();\r\n        this.flatForward = vec3.fromValues(0, 0, 0);\r\n        // compute right\r\n        //vec3.normalize(this.forward, this.forward);\r\n        //vec3.cross(this.right, this.forward, UP);\r\n        // compute spherical angle\r\n        this.xzAngle = Math.atan2(forward[2], forward[0]);\r\n        // copied from mouse handler\r\n        if (this.xzAngle > TWO_PI) {\r\n            this.xzAngle -= TWO_PI;\r\n        }\r\n        else if (this.xzAngle < 0) {\r\n            this.xzAngle += TWO_PI;\r\n        }\r\n        this.flatForward[0] = Math.cos(this.xzAngle);\r\n        this.flatForward[2] = Math.sin(this.xzAngle);\r\n        // call mouse event handler to avoid \"jerk\" when first activating mouse\r\n        let mouseEvent = new MouseEvent(\"Fake event\");\r\n        this.handleMouseMovement(mouseEvent);\r\n        this.terrain = undefined;\r\n    }\r\n\r\n    handleKeyDownEvent(event: KeyboardEvent) {\r\n        if (event.defaultPrevented) {\r\n            return; // Do nothing if event was already processed\r\n        }\r\n\r\n        switch (event.key) {\r\n            case \"w\":\r\n            case \"W\":\r\n                this.movementFlags |= MovementFlags.FORWARD;\r\n                break;\r\n            case \"s\":\r\n            case \"S\":\r\n                this.movementFlags |= MovementFlags.BACKWARD;\r\n                break;\r\n            case \"d\":\r\n            case \"D\":\r\n                this.movementFlags |= MovementFlags.RIGHT;\r\n                break;\r\n            case \"a\":\r\n            case \"A\":\r\n                this.movementFlags |= MovementFlags.LEFT;\r\n                break;\r\n            //case \"e\":\r\n            //case \"E\":\r\n                //this.movementFlags |= MovementFlags.UP;\r\n                //break;\r\n            //case \"q\":\r\n            //case \"Q\":\r\n                //this.movementFlags |= MovementFlags.DOWN;\r\n                //break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    handleKeyUpEvent(event: KeyboardEvent) {\r\n        if (event.defaultPrevented) {\r\n            return; // Do nothing if event was already processed\r\n        }\r\n\r\n        switch (event.key) {\r\n            case \"w\":\r\n            case \"W\":\r\n                this.movementFlags &= ~MovementFlags.FORWARD;\r\n                break;\r\n            case \"s\":\r\n            case \"S\":\r\n                this.movementFlags &= ~MovementFlags.BACKWARD;\r\n                break;\r\n            case \"d\":\r\n            case \"D\":\r\n                this.movementFlags &= ~MovementFlags.RIGHT;\r\n                break;\r\n            case \"a\":\r\n            case \"A\":\r\n                this.movementFlags &= ~MovementFlags.LEFT;\r\n                break;\r\n            //case \"e\":\r\n            //case \"E\":\r\n                //this.movementFlags &= ~MovementFlags.UP;\r\n                //break;\r\n            //case \"q\":\r\n            //case \"Q\":\r\n                //this.movementFlags &= ~MovementFlags.DOWN;\r\n                //break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    handleLostFocus() {\r\n        this.movementFlags = MovementFlags.NONE;\r\n    }\r\n\r\n    handleMouseMovement(event: MouseEvent) {\r\n        if (event.movementX != 0) {\r\n            // normalize based on window dimensions?\r\n            this.xzAngle += event.movementX * MOUSE_SCALE;\r\n            if (this.xzAngle > TWO_PI) {\r\n                this.xzAngle -= TWO_PI;\r\n            }\r\n            else if (this.xzAngle < 0) {\r\n                this.xzAngle += TWO_PI;\r\n            }\r\n            this.flatForward[0] = Math.cos(this.xzAngle);\r\n            this.flatForward[2] = Math.sin(this.xzAngle);\r\n        }\r\n        if (event.movementY != 0) {\r\n            // need to negate movementY\r\n            let newY = this.forward[1] - event.movementY * MOUSE_SCALE;\r\n            this.forward[1] = clamp(newY, -Y_LIMIT, Y_LIMIT);\r\n        }\r\n        // compute length of xz component\r\n        let xzLength = 1.0 - this.forward[1] * this.forward[1];\r\n        // faster than pow(x, 0.25)?\r\n        let xzScale = Math.sqrt(Math.sqrt(xzLength));\r\n        this.forward[0] = this.flatForward[0] * xzScale;\r\n        this.forward[2] = this.flatForward[2] * xzScale;\r\n        // forward should be roughly normalized; compute right\r\n        vec3.cross(this.right, this.forward, UP);\r\n        vec3.normalize(this.right, this.right);\r\n        // but not really normalized -- ok for now?\r\n        // ok because we store projected forward separately anyway,\r\n        // camera direction just used to compute lookAt target\r\n    }\r\n\r\n    handleMouseClick(event: MouseEvent) {\r\n        console.log(this.terrain.raymarchBigColliders(this.position, this.forward));\r\n    }\r\n\r\n    // forces height to match height field without more collision checks\r\n    forceCorrectHeight() {\r\n        this.position[1] = this.terrain.getHeightFromRawPos(this.position);\r\n    }\r\n\r\n    move(deltaTime: number) {\r\n        if (this.movementFlags == MovementFlags.NONE || this.movementFlags == MovementFlags.ALL) {\r\n            return;\r\n        }\r\n\r\n        // compute move direction -- guaranteed not to be <0, 0, 0>, since\r\n        // this only happens on MovementFlags.NONE or MovementFlags.ALL\r\n        let movDir = vec3.fromValues(0, 0, 0);\r\n        if (this.movementFlags & MovementFlags.FORWARD) {\r\n            vec3.add(movDir, movDir, this.flatForward);\r\n        }\r\n        if (this.movementFlags & MovementFlags.BACKWARD) {\r\n            vec3.scaleAndAdd(movDir, movDir, this.flatForward, -1);\r\n        }\r\n        if (this.movementFlags & MovementFlags.RIGHT) {\r\n            vec3.add(movDir, movDir, this.right);\r\n        }\r\n        if (this.movementFlags & MovementFlags.LEFT) {\r\n            vec3.scaleAndAdd(movDir, movDir, this.right, -1);\r\n        }\r\n        //if (this.movementFlags & MovementFlags.UP) {\r\n            //vec3.add(movDir, movDir, UP);\r\n        //}\r\n        //if (this.movementFlags & MovementFlags.DOWN) {\r\n            //vec3.scaleAndAdd(movDir, movDir, UP, -1);\r\n        //}\r\n\r\n        vec3.normalize(movDir, movDir);\r\n\r\n        let target = vec3.create();\r\n        vec3.scaleAndAdd(target, this.position, movDir, deltaTime * 10.0);\r\n\r\n        // TODO: collision\r\n        // terrain collision\r\n        vec3.copy(target, this.terrain.collide(target, this.position, deltaTime * 10.0));\r\n        // find direction towards terrain-aware target, adjust its length\r\n        // NOTE: this may not work if tiles are too small relative to step size\r\n        //vec3.subtract(movDir, target, this.position);\r\n        //vec3.normalize(movDir, movDir);\r\n        //vec3.scaleAndAdd(target, this.position, movDir, deltaTime * 10.0);\r\n\r\n        // \"loop\" position on terrain\r\n        let loopedXZPos = this.terrain.getLoopedPosition(target);\r\n        vec3.set(this.position, loopedXZPos[0], target[1], loopedXZPos[1]);\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        this.move(deltaTime);\r\n        this.terrain.updatePlanes(this.position, deltaTime);\r\n        // update camera position, target, direction\r\n        vec3.add(this.eye, this.position, EYE_OFFSET);\r\n        vec3.copy(this.camera.position, this.eye);\r\n        vec3.copy(this.camera.direction, this.forward);\r\n        this.camera.update();\r\n        //this.controls.tick();\r\n\r\n        //vec3.add(this.target, this.position, this.direction);\r\n        //mat4.lookAt(this.viewMatrix, this.controls.eye, this.controls.center, this.up);\r\n        //mat4.lookAt(this.viewMatrix, this.position, this.target, this.up);\r\n    }\r\n};\r\n\r\nexport default Player;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/Player.ts","import {gl} from '../../globals';\r\n\r\nexport class Texture {\r\n  texture: WebGLTexture;\r\n  \r\n  bindTex() {\r\n  \t  gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n  }\r\n\r\n  handle(): WebGLTexture {\r\n  \treturn this.texture;\r\n  }\r\n\r\n  isPowerOf2(value: number) : boolean {\r\n      return (value & (value - 1)) == 0;\r\n  }\r\n\r\n  constructor(imgSource: string) {\r\n  \tthis.texture = gl.createTexture();\r\n  \tthis.bindTex();\r\n\r\n    // create a white pixel to serve as placeholder\r\n  \tconst formatSrc = gl.RGBA;\r\n  \tconst formatDst = gl.RGBA;\r\n  \tconst lvl = 0;\r\n  \tconst phWidth = 1; // placeholder\r\n  \tconst phHeight = 1;\r\n  \tconst phImg = new Uint8Array([255, 255, 255, 255]);\r\n  \tconst formatBit = gl.UNSIGNED_BYTE; // TODO: HDR\r\n\r\n  \tgl.texImage2D(gl.TEXTURE_2D, lvl, formatDst, phWidth, phHeight, 0, formatSrc, formatBit, phImg);\r\n\r\n  \t// get a javascript image locally and load it. not instant but will auto-replace white pixel\r\n  \tconst img = new Image();\r\n\r\n  \timg.onload = function() {\r\n  \t\tthis.bindTex()\r\n  \t\tgl.texImage2D(gl.TEXTURE_2D, lvl, formatDst, img.width, img.height, 0, formatSrc, formatBit, img);\r\n  \t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n  \t}.bind(this);\r\n\r\n  \timg.src = imgSource; // load the image\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default Texture;\n\n\n// WEBPACK FOOTER //\n// ./src/rendering/gl/Texture.ts","/*!\n *  howler.js v2.0.9\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);\n      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));\n      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function() {\n        // Fix Android can not play in suspend state.\n        Howler._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n          self.mobileAutoEnable = false;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Makr this sounded as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Mobile browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (typeof Promise !== 'undefined' && play instanceof Promise) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Releases the lock and executes queued actions.\n              var runLoadQueue = function() {\n                self._playLock = false;\n                if (!internal) {\n                  self._emit('play', sound._id);\n                }\n              };\n              play.then(runLoadQueue, runLoadQueue);\n            } else if (!internal) {\n              self._emit('play', sound._id);\n            }\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default') {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Restart the playback if the sound was playing.\n          if (playing) {\n            self.play(id, true);\n          }\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                self._emit('seek', id);\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            self._emit('seek', id);\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n          if (!checkIE) {\n            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n          }\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n\n        // Remove the references in the global Howler object.\n        var index = Howler._howls.indexOf(self);\n        if (index >= 0) {\n          Howler._howls.splice(index, 1);\n        }\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (Howler._scratchBuffer) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Decode the buffer into an audio source.\n    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      }\n    }, function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    });\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.9\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  \n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              sound._panner.setPosition(pan, 0, 0);\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setPosition(x, y, z);\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setOrientation(x, y, z);\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   * \n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/howler/dist/howler.js\n// module id = 53\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 54\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nuniform mat4 u_Model;\\r\\nuniform mat3 u_ModelInvTr;  \\r\\n\\r\\nuniform mat4 u_View;   \\r\\nuniform mat4 u_Proj; \\r\\n\\r\\nin vec4 vs_Pos;\\r\\nin vec4 vs_Nor;\\r\\nin vec4 vs_Col;\\r\\nin vec2 vs_UV;\\r\\n\\r\\nout vec4 fs_Pos;\\r\\nout vec4 fs_Nor;            \\r\\nout vec4 fs_Col;           \\r\\nout vec2 fs_UV;\\r\\n\\r\\n//out vec4 fs_WorldPos;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    fs_Col = vs_Col;\\r\\n    fs_UV = vs_UV;\\r\\n    fs_UV.y = 1.0 - fs_UV.y;\\r\\n\\r\\n    // fragment info is in view space\\r\\n    //mat3 invTranspose = mat3(u_ModelInvTr);\\r\\n    mat3 view = mat3(u_View);\\r\\n    //fs_Nor = vec4(view * invTranspose * vec3(vs_Nor), 0);\\r\\n    fs_Nor = vec4(u_ModelInvTr * vec3(vs_Nor), 0);\\r\\n    //fs_Pos = u_Model * vs_Pos;\\r\\n    fs_Pos = u_View * u_Model * vs_Pos;\\r\\n    //fs_WorldPos = u_Model * vs_Pos;\\r\\n    \\r\\n    gl_Position = u_Proj * u_View * u_Model * vs_Pos;\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/standard-vert.glsl\n// module id = 55\n// module chunks = 0","module.exports = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec4 fs_Pos;\\r\\nin vec4 fs_Nor;\\r\\nin vec4 fs_Col;\\r\\nin vec2 fs_UV;\\r\\n\\r\\n//in vec4 fs_WorldPos;\\r\\n\\r\\nout vec4 fragColor[3]; // The data in the ith index of this array of outputs\\r\\n                       // is passed to the ith index of OpenGLRenderer's\\r\\n                       // gbTargets array, which is an array of textures.\\r\\n                       // This lets us output different types of data,\\r\\n                       // such as albedo, normal, and position, as\\r\\n                       // separate images from a single render pass.\\r\\n\\r\\nuniform sampler2D tex_Color;\\r\\n\\r\\nconst float DEPTH_OFFSET = 0.0;\\r\\n\\r\\nvoid main() {\\r\\n    // TODO: pass proper data into gbuffers\\r\\n    // Presently, the provided shader passes \\\"nothing\\\" to the first\\r\\n    // two gbuffers and basic color to the third.\\r\\n\\r\\n    //vec3 col = texture(tex_Color, fs_UV).rgb;\\r\\n    vec3 col = fs_Col.xyz;\\r\\n\\r\\n    // if using textures, inverse gamma correct\\r\\n    //col = pow(col, vec3(2.2));\\r\\n\\r\\n    // normal.xyz, depth\\r\\n    fragColor[0] = vec4(fs_Nor.xyz, fs_Pos.z - DEPTH_OFFSET);\\r\\n    //fragColor[0] = vec4(fs_Nor.xyz, gl_FragCoord.w);\\r\\n    fragColor[1] = vec4(fs_Pos.xyz, 0.0);\\r\\n    //fragColor[1] = vec4(fs_Pos.xyz, 0.0);\\r\\n    fragColor[2] = vec4(col, 1.0);\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shaders/standard-frag.glsl\n// module id = 56\n// module chunks = 0"],"sourceRoot":""}